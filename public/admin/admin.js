/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/admin/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/jquery.niceform/dist/jquery.niceform.js":
/*!**************************************************************!*\
  !*** ./node_modules/jquery.niceform/dist/jquery.niceform.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery, $) {/*! NiceForm v1.0.4 | Copyright (c) 2014-present Duc Doan (ducdhm@gmail.com) */
!function(e,t){ true?module.exports=t(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")):undefined}("undefined"!=typeof self?self:this,function(e){return function(e){var t={};function r(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(a,n,function(t){return e[t]}.bind(null,n));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=7)}([function(t,r){t.exports=e},function(e,t,r){"use strict";t.a={date:"DD/MM/YYYY",time:"HH:mm",datetime:"DD/MM/YYYY HH:mm",successTitle:"Success!",successMessage:"The form has been successfully submitted",errorTitle:"Error!",invalidErrorMessage:"Please correct your invalid fields!",requiredErrorMessage:"This field is required",dateErrorMessage:"Please check the format of your date, it should be like 14/02/2000",timeErrorMessage:"Please check the format of your time, it should be like 14:02",datetimeErrorMessage:"Please check the format of your date time, it should be like 14/02/2000 14:02",emailErrorMessage:"Please check the format of your email address, it should read like someone@somewhere.com",numberErrorMessage:"Please enter only numbers",urlErrorMessage:"Please enter valid website address",passwordErrorMessage:"Your password must be at least 6 characters and it must contain numbers, letters (lowercase and uppercase) and at least 1 special character",repasswordErrorMessage:"Please confirm your password",simpleErrorMessage:"Please enter only letters, numbers and only 1 underscore or dash or space between letters and numbers",reallySimpleErrorMessage:"Please enter only letters and numbers, no punctuation, dots, etc",unknownErrorMessage:"Sorry, an error occurred attempting to submit the form. Please contact the site administrator to resolve!"}},,function(e,t){!function(e){function t(){this.fake=!0,this.boundary="--------FormData"+Math.random(),this._fields=[]}e.FormData||(t.prototype.append=function(e,t){this._fields.push([e,t])},t.prototype.toString=function(){var e=this.boundary,t="";return this._fields.forEach(function(r){if(t+="--"+e+"\r\n",r[1].name){var a=r[1];t+="Content-Disposition: form-data; name='"+r[0]+"'; filename='"+a.name+"'\r\n",t+="Content-Type: "+a.type+"\r\n\r\n",t+=a.getAsBinary()+"\r\n"}else t+="Content-Disposition: form-data; name='"+r[0]+"';\r\n\r\n",t+=r[1]+"\r\n"}),t+="--"+e+"--"},e.FormData=t)}(window)},function(e,t){var r;(r=jQuery).fn.serializeWithFiles=function(){var e=r(this),t=new FormData;e.find("input[type=file]").each(function(e,a){r.each(a.files,function(e,r){t.append(a.name,r)})});var a=e.serializeArray();return r.each(a,function(e,r){t.append(r.name,r.value)}),t}},,,function(e,t,r){"use strict";r.r(t);var a,n=r(0),o=r.n(n),i=function(e,t,r){var a=t.closest(".form-group");t.addClass("is-invalid"),a.addClass("has-error");var n=a.find(".nf-error-message");0===n.length&&(n=$('<div class="nf-error-message text-danger small" style="display: none;"></div>'),t.after(n)),n.html(r),e.niceform("showElement",n)},s=r(1);window.__NICEFORM_DEBUG__=!0;var l={postFormEnabled:!0,postUrl:null,ajax:{type:"POST",dataType:"JSON"},password:{min:6,max:32,specialLength:1,uppercaseLength:1,numberLength:1},regex:{email:/^(?:[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/,url:/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/,simple:/^[a-zA-Z0-9]+(?:[-_\s][a-zA-Z0-9]+)*$/,reallySimple:/^[a-zA-Z0-9]+$/},animationDuration:200,locale:s.a,validate:null,showError:function(e,t,r){e.niceform("showErrorMessage",r.locale.invalidErrorMessage),t.forEach(function(t){i(e,t,t.attr("data-error-message"))})},hideError:function(e,t){e.find(".has-error").removeClass("has-error"),e.find(".is-invalid").removeClass("is-invalid").attr("data-error-message",""),e.niceform("hideElement",e.find(".nf-error-message")),e.niceform("hideMessage")},processAjaxResponse:function(e,t,r){return e&&e.status},onValid:null,onInvalid:null,onBeforeSerializeForm:null,onBeforePostForm:null,onAjaxSuccess:function(e,t,r){t.niceform("showSuccessMessage",e.message||r.successMessage),clearTimeout(a),a=setTimeout(function(){return t.niceform("hideMessage")},5e3)},onAjaxError:function(e,t,r){e.responseJSON?(t.niceform("showErrorMessage",e.responseJSON.message||r.unknownErrorMessage),e.responseJSON.errorFields&&e.responseJSON.errorFields.forEach(function(e){i(t,t.find('[name="'.concat(e.name,'"]')),e.message)})):t.niceform("showErrorMessage",r.unknownErrorMessage)}},c=function(e){return!e.is('[data-ignore="validate"]')&&(!e.attr("data-error-message")&&(!!e.hasClass("required")||(e.val()||"").length>0))},u=function(e,t){return e.test(t)},f=function(e,t){var r=[];return e.find(".number").each(function(){var e,a=$(this);c(a)&&(e=this.value,isNaN(e)||"boolean"==typeof e)&&(a.attr("data-error-message",a.attr("data-number-message")||t),r.push(a))}),r};var d=function(e,t){var r={lower:0,upper:0,alpha:0,numeric:0,special:0,length:[0,1/0],custom:[],badWords:[],badSequenceLength:0,noQwertySequences:!1,noSequential:!1};for(var a in t)r[a]=t[a];var n,o,i={lower:/[a-z]/g,upper:/[A-Z]/g,alpha:/[A-Z]/gi,numeric:/[0-9]/g,special:/[\W_]/g};if(e.length<r.length[0]||e.length>r.length[1])return!1;for(n in i)if((e.match(i[n])||[]).length<r[n])return!1;for(o=0;o<r.badWords.length;o++)if(e.toLowerCase().indexOf(r.badWords[o].toLowerCase())>-1)return!1;if(r.noSequential&&/([\S\s])\1/.test(e))return!1;if(r.badSequenceLength){var s="abcdefghijklmnopqrstuvwxyz",l=s.toUpperCase(),c=r.badSequenceLength-1,u="_"+e.slice(0,c);for(o=c;o<e.length;o++)if(u=u.slice(1)+e.charAt(o),s.indexOf(u)>-1||l.indexOf(u)>-1||"0123456789".indexOf(u)>-1||r.noQwertySequences&&"qwertyuiopasdfghjklzxcvbnm".indexOf(u)>-1)return!1}for(o=0;o<r.custom.length;o++)if((n=r.custom[o])instanceof RegExp){if(!n.test(e))return!1}else if(n instanceof Function&&!n(e))return!1;return!0},m=function(e,t,r){var a=[];return e.find(".password").each(function(){var e,n=$(this);c(n)&&(e=this.value,!d(e,{lower:1,upper:t.uppercaseLength,alpha:0,numeric:t.numberLength,special:t.specialLength,length:[t.min,t.max],badWords:[],badSequenceLength:0,noQwertySequences:!1,noSequential:!1}))&&(n.attr("data-error-message",n.attr("data-password-message")||r),a.push(n))}),a},h=function(e,t){var r=[],a=function(e,t){var r=[],a={};return e.find(".required:radio, .required:checkbox").not('[data-ignore="validate"]').each(function(){if(!this.name in a){var n=e.find('input[name="'.concat(this.name,'"]'));0===n.filter(":checked").length&&(r.attr("data-error-message",n.attr("data-required-message")||t),r.push(n)),a[this.name]=!0}}),e.find(".required").filter("input, select, textarea").not('.tt-hint, :radio, :checkbox, [data-ignore="validate"]').each(function(){var e=$(this),a=e.val()||"",n=e.attr("placeholder");0!==a.length&&a!==n||(e.attr("data-error-message",e.attr("data-required-message")||t),r.push(e))}),r}(e,t.locale.requiredErrorMessage);if(a.length>0&&(r=r.concat(a)),void 0===window.moment)!function(){if(window.__NICEFORM_DEBUG__&&console&&"function"==typeof console.log){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];console.log.apply(console,["[ NiceForm ] "].concat(t))}}('WARN :: Can not find "moment", ignore ".date", ".datetime", ".time" fields');else{var n=function(e,t,r){var a=[];return e.find(".datetime").each(function(){var e=$(this);c(e)&&!moment(this.value,t,!0).isValid()&&(e.attr("data-error-message",e.attr("data-datetime-message")||r),a.push(e))}),a}(e,t.locale.datetime,t.locale.datetimeErrorMessage);n.length>0&&(r=r.concat(n));var o=function(e,t,r){var a=[];return e.find(".date").each(function(){var e=$(this);c(e)&&!moment(this.value,t,!0).isValid()&&(e.attr("data-error-message",e.attr("data-date-message")||r),a.push(e))}),a}(e,t.locale.date,t.locale.dateErrorMessage);o.length>0&&(r=r.concat(o));var i=function(e,t,r){var a=[];return e.find(".time").each(function(){var e=$(this);c(e)&&!moment(this.value,t,!0).isValid()&&(e.attr("data-error-message",e.attr("data-time-message")||r),a.push(e))}),a}(e,t.locale.time,t.locale.timeErrorMessage);i.length>0&&(r=r.concat(i))}var s=function(e,t,r){var a=[];return e.find(".email").each(function(){var e=$(this);c(e)&&!u(t,this.value)&&(e.attr("data-error-message",e.attr("data-email-message")||r),a.push(e))}),a}(e,t.regex.email,t.locale.emailErrorMessage);s.length>0&&(r=r.concat(s));var l=f(e,t.locale.numberErrorMessage);l.length>0&&(r=r.concat(l));var d=function(e,t,r){var a=[];return e.find(".url").each(function(){var e=$(this);c(e)&&!u(t,this.value)&&(e.attr("data-error-message",e.attr("data-url-message")||r),a.push(e))}),a}(e,t.regex.url,t.locale.urlErrorMessage);d.length>0&&(r=r.concat(d));var h=m(e,t.password,t.locale.passwordErrorMessage);h.length>0&&(r=r.concat(h));var p=function(e,t){var r=[],a=e.find(".password");return e.find(".repassword").each(function(){var e=$(this);e.val()!==a.val()&&(e.attr("data-error-message",e.attr("data-repassword-message")||t),r.push(e))}),r}(e,t.locale.repasswordErrorMessage);p.length>0&&(r=r.concat(p));var g=function(e,t,r){var a=[];return e.find(".simple").each(function(){var e=$(this);c(e)&&!u(t,this.value)&&(e.attr("data-error-message",e.attr("data-simple-message")||r),a.push(e))}),a}(e,t.regex.simple,t.locale.simpleErrorMessage);g.length>0&&(r=r.concat(g));var v=function(e,t,r){var a=[];return e.find(".really-simple").each(function(){var e=$(this);c(e)&&!u(t,this.value)&&(e.attr("data-error-message",e.attr("data-really-simple-message")||r),a.push(e))}),a}(e,t.regex.reallySimple,t.locale.reallySimpleErrorMessage);v.length>0&&(r=r.concat(v));var y=function(e){var t=[];return e.find(".regex").each(function(){var e=$(this),r=e.attr("data-regex");c(e)&&!u(new RegExp(r),this.value)&&(e.attr("data-error-message",e.attr("data-message")||e.attr("data-regex-message")),t.push(e))}),t}(e);if(y.length>0&&(r=r.concat(y)),"function"==typeof t.validate){var b=t.validate(e,t);b&&b.length>0&&(r=r.concat(b))}return!(r.length>0)||("function"==typeof t.showError&&t.showError(e,r,t),!1)},p=function(e){e.find("select, input, textarea").each(function(){this.readOnly&&this.setAttribute("data-origin-readonly",!0),this.readOnly=!0}),e.find("button").each(function(){this.disabled&&this.setAttribute("data-origin-disabled",!0),this.disabled=!0})},g=function(e){e.find("select, input, textarea").each(function(){this.getAttribute("data-origin-readonly")||(this.readOnly=!1)}),e.find("button").each(function(){this.getAttribute("data-origin-disabled")||(this.disabled=!1)})};function v(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var y=function(e,t){var r="multipart/form-data"===e.attr("enctype"),a=t.postUrl||e.attr("action")||window.location.pathname;"function"==typeof t.onBeforeSerializeForm&&t.onBeforeSerializeForm.call(void 0,e,t);var n=r?e.serializeWithFiles():e.serialize();"function"==typeof t.onBeforePostForm&&(n=t.onBeforePostForm.call(void 0,e,t,n)||n);try{p(e);var o=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},a=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),a.forEach(function(t){v(e,t,r[t])})}return e}({},t.ajax,{url:a,data:n,success:function(r,a,n){g(e);var o=!1;"function"==typeof t.processAjaxResponse&&(o=t.processAjaxResponse(r,e,t)),o?"function"==typeof t.onAjaxSuccess&&t.onAjaxSuccess.call(this,r,e,t):"function"==typeof t.onAjaxError&&t.onAjaxError.call(this,n,e,t)},error:function(r){g(e),"function"==typeof t.onAjaxError&&t.onAjaxError.call(this,r,e,t)}});r&&(o.processData=!1,o.contentType=!1),o.beforeSend=function(e,t){t.data=n,n.fake&&(e.setRequestHeader("Content-Type","multipart/form-data; boundary="+n.boundary),e.send=function(t){e.sendAsBinary(t.toString())})},$.ajax(o)}catch(r){"function"==typeof t.onAjaxError?t.onAjaxError.call(void 0,null,e,t):alert(t.unknownErrorMessage)}},b=function(e,t){e.stop().css("height","").animate({opacity:1,height:"show",marginTop:"show",marginBottom:"show",paddingTop:"show",paddingBottom:"show"},t,function(){e.css("height","")})},x=function(e,t,r,a,n){var i=e.find(".nf-form-message");0===i.length&&(i=o()('<div class="nf-form-message alert" style="display: none;"></div>'),e.prepend(i)),i.removeClass("alert-danger alert-info alert-success alert-warning");var s='\n<a class="close" data-dismiss="message">&times;</a>\n<b>'.concat(r,"</b><br />\n").concat(a,"\n");i.addClass("error"===t?"alert-danger":"alert-".concat(t)),i.html(s),b(i,n)},w=function(e,t){e.stop().animate({opacity:0,height:"hide",marginTop:"hide",marginBottom:"hide",paddingTop:"hide",paddingBottom:"hide"},t)},E=function(e,t){var r=e.find(".nf-form-message");0!==r.length&&w(r,t)};function M(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function S(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r(3),r(4);var j=function(){function e(t,r){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t.jquery&&0!==t.length){var a=this.options=o.a.extend({},e.DEFAULTS,r);this.form=t,t.off("submit").on("submit",function(e){e.preventDefault(),"function"==typeof a.hideError&&a.hideError(t,a),h(t,a)?("function"==typeof a.onValid&&a.onValid(t,a),!0===a.postFormEnabled&&y(t,a)):"function"==typeof a.onInvalid&&a.onInvalid(t,a)}),t.on("click","[data-dismiss=message]",function(e){e.preventDefault(),E(t,a.animationDuration)})}}var t,r,a;return t=e,(r=[{key:"clearValue",value:function(e){!function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"input, textarea, select";e.find(t).not('[data-ignore="clear"]').each(function(){var e=$(this),t=e.is("select"),r=e.is(":checkbox"),a=e.is(":radio");t?this.selectedIndex=-1:r||a?e.prop("checked",!1):e.val("")})}(this.form,e)}},{key:"enableForm",value:function(){g(this.form)}},{key:"disableForm",value:function(){p(this.form)}},{key:"showMessage",value:function(e,t,r){x(this.form,e,t,r,this.options.animationDuration)}},{key:"showSuccessMessage",value:function(e){x(this.form,"success",this.options.locale.successTitle,e,this.options.animationDuration)}},{key:"showErrorMessage",value:function(e){x(this.form,"danger",this.options.locale.errorTitle,e,this.options.animationDuration)}},{key:"hideMessage",value:function(){E(this.form,this.options.animationDuration)}},{key:"getOptions",value:function(){return o.a.extend({},this.options)}},{key:"showElement",value:function(e){b(e,this.options.animationDuration)}},{key:"hideElement",value:function(e){w(e,this.options.animationDuration)}}])&&M(t.prototype,r),a&&M(t,a),e}();S(j,"DEFAULTS",l),S(j,"version","1.0.4"),o.a.fn.niceform=function(e){var t=o()(this),r=t.data("niceform");if("string"==typeof e){if(r&&e in j.prototype){for(var a=arguments.length,n=new Array(a>1?a-1:0),i=1;i<a;i++)n[i-1]=arguments[i];return r[e].apply(r,n)}}else if(!r)return t.data("niceform",r=new j(t,e)),r};t.default=j}]).default});
//# sourceMappingURL=jquery.niceform.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./node_modules/jquery.niceform/index.js":
/*!***********************************************!*\
  !*** ./node_modules/jquery.niceform/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./dist/jquery.niceform */ "./node_modules/jquery.niceform/dist/jquery.niceform.js");


/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.4.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-04-10T19:48Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.4.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code, options ) {
		DOMEval( code, { nonce: options && options.nonce } );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) &&

				// Support: IE 8 only
				// Exclude object elements
				(nodeType !== 1 || context.nodeName.toLowerCase() !== "object") ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 && rdescend.test( selector ) ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem.namespaceURI,
		docElem = (elem.ownerDocument || elem).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( typeof elem.contentDocument !== "undefined" ) {
			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	if ( documentElement.attachShadow ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) &&
					dataPriv.get( el, "click" ) === undefined ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) &&
					dataPriv.get( el, "click" ) === undefined ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		jQuery.event.add( el, type, returnTrue );
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				if ( !saved ) {

					// Store arguments for use when handling the inner native event
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = undefined;
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();
						return result;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved ) {

				// ...and capture the result
				dataPriv.set( this, type, jQuery.event.trigger(

					// Support: IE <=9 - 11+
					// Extend with the prototype to reset the above stopImmediatePropagation()
					jQuery.extend( saved.shift(), jQuery.Event.prototype ),
					saved,
					this
				) );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								} );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	// Support: IE 9-11 only
	// Also use offsetWidth/offsetHeight for when box sizing is unreliable
	// We use getClientRects() to check for hidden/disconnected.
	// In those cases, the computed value can be trusted to be border-box
	if ( ( !support.boxSizingReliable() && isBorderBox ||
		val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url, options ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/admin/index.js":
/*!****************************!*\
  !*** ./src/admin/index.js ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var limitless_2_0_1_global_assets_js_main_jquery_min__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! limitless-2.0.1/global_assets/js/main/jquery.min */ "./src/limitless-2.0.1/global_assets/js/main/jquery.min.js");
/* harmony import */ var limitless_2_0_1_global_assets_js_main_jquery_min__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(limitless_2_0_1_global_assets_js_main_jquery_min__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var limitless_2_0_1_global_assets_js_main_bootstrap_bundle_min__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! limitless-2.0.1/global_assets/js/main/bootstrap.bundle.min */ "./src/limitless-2.0.1/global_assets/js/main/bootstrap.bundle.min.js");
/* harmony import */ var limitless_2_0_1_global_assets_js_main_bootstrap_bundle_min__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(limitless_2_0_1_global_assets_js_main_bootstrap_bundle_min__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var limitless_2_0_1_global_assets_js_plugins_loaders_blockui_min__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! limitless-2.0.1/global_assets/js/plugins/loaders/blockui.min */ "./src/limitless-2.0.1/global_assets/js/plugins/loaders/blockui.min.js");
/* harmony import */ var limitless_2_0_1_global_assets_js_plugins_loaders_blockui_min__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(limitless_2_0_1_global_assets_js_plugins_loaders_blockui_min__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var limitless_2_0_1_global_assets_js_plugins_forms_styling_uniform_min__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! limitless-2.0.1/global_assets/js/plugins/forms/styling/uniform.min */ "./src/limitless-2.0.1/global_assets/js/plugins/forms/styling/uniform.min.js");
/* harmony import */ var limitless_2_0_1_global_assets_js_plugins_forms_styling_uniform_min__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(limitless_2_0_1_global_assets_js_plugins_forms_styling_uniform_min__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var jquery_niceform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jquery.niceform */ "./node_modules/jquery.niceform/index.js");
/* harmony import */ var jquery_niceform__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(jquery_niceform__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var fonts_Roboto_scss__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! fonts/Roboto.scss */ "./src/fonts/Roboto.scss");
/* harmony import */ var fonts_Roboto_scss__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(fonts_Roboto_scss__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var limitless_2_0_1_global_assets_css_icons_icomoon_styles_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! limitless-2.0.1/global_assets/css/icons/icomoon/styles.css */ "./src/limitless-2.0.1/global_assets/css/icons/icomoon/styles.css");
/* harmony import */ var limitless_2_0_1_global_assets_css_icons_icomoon_styles_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(limitless_2_0_1_global_assets_css_icons_icomoon_styles_css__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var limitless_2_0_1_global_assets_css_icons_fontawesome_styles_min_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! limitless-2.0.1/global_assets/css/icons/fontawesome/styles.min.css */ "./src/limitless-2.0.1/global_assets/css/icons/fontawesome/styles.min.css");
/* harmony import */ var limitless_2_0_1_global_assets_css_icons_fontawesome_styles_min_css__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(limitless_2_0_1_global_assets_css_icons_fontawesome_styles_min_css__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var limitless_2_0_1_layout_2_default_assets_css_bootstrap_min_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! limitless-2.0.1/layout_2/default/assets/css/bootstrap.min.css */ "./src/limitless-2.0.1/layout_2/default/assets/css/bootstrap.min.css");
/* harmony import */ var limitless_2_0_1_layout_2_default_assets_css_bootstrap_min_css__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(limitless_2_0_1_layout_2_default_assets_css_bootstrap_min_css__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var limitless_2_0_1_layout_2_default_assets_css_bootstrap_limitless_min_css__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! limitless-2.0.1/layout_2/default/assets/css/bootstrap_limitless.min.css */ "./src/limitless-2.0.1/layout_2/default/assets/css/bootstrap_limitless.min.css");
/* harmony import */ var limitless_2_0_1_layout_2_default_assets_css_bootstrap_limitless_min_css__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(limitless_2_0_1_layout_2_default_assets_css_bootstrap_limitless_min_css__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var limitless_2_0_1_layout_2_default_assets_css_layout_min_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! limitless-2.0.1/layout_2/default/assets/css/layout.min.css */ "./src/limitless-2.0.1/layout_2/default/assets/css/layout.min.css");
/* harmony import */ var limitless_2_0_1_layout_2_default_assets_css_layout_min_css__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(limitless_2_0_1_layout_2_default_assets_css_layout_min_css__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var limitless_2_0_1_layout_2_default_assets_css_components_min_css__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! limitless-2.0.1/layout_2/default/assets/css/components.min.css */ "./src/limitless-2.0.1/layout_2/default/assets/css/components.min.css");
/* harmony import */ var limitless_2_0_1_layout_2_default_assets_css_components_min_css__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(limitless_2_0_1_layout_2_default_assets_css_components_min_css__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var limitless_2_0_1_layout_2_default_assets_css_colors_min_css__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! limitless-2.0.1/layout_2/default/assets/css/colors.min.css */ "./src/limitless-2.0.1/layout_2/default/assets/css/colors.min.css");
/* harmony import */ var limitless_2_0_1_layout_2_default_assets_css_colors_min_css__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(limitless_2_0_1_layout_2_default_assets_css_colors_min_css__WEBPACK_IMPORTED_MODULE_12__);
// Theme scripts
// -----------------------------------------------




 // Theme styles
// -----------------------------------------------










/***/ }),

/***/ "./src/fonts/Roboto.scss":
/*!*******************************!*\
  !*** ./src/fonts/Roboto.scss ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/limitless-2.0.1/global_assets/css/icons/fontawesome/styles.min.css":
/*!********************************************************************************!*\
  !*** ./src/limitless-2.0.1/global_assets/css/icons/fontawesome/styles.min.css ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/limitless-2.0.1/global_assets/css/icons/icomoon/styles.css":
/*!************************************************************************!*\
  !*** ./src/limitless-2.0.1/global_assets/css/icons/icomoon/styles.css ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/limitless-2.0.1/global_assets/js/main/bootstrap.bundle.min.js":
/*!***************************************************************************!*\
  !*** ./src/limitless-2.0.1/global_assets/js/main/bootstrap.bundle.min.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/*!* Bootstrap v4.1.1 (https://getbootstrap.com/)* Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)* Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)*/
!function (t, e) {
   true ? e(exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")) : undefined;
}(this, function (t, e) {
  "use strict";

  function i(t, e) {
    for (var n = 0; n < e.length; n++) {
      var i = e[n];
      i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
    }
  }

  function s(t, e, n) {
    return e && i(t.prototype, e), n && i(t, n), t;
  }

  function c(r) {
    for (var t = 1; t < arguments.length; t++) {
      var o = null != arguments[t] ? arguments[t] : {},
          e = Object.keys(o);
      "function" == typeof Object.getOwnPropertySymbols && (e = e.concat(Object.getOwnPropertySymbols(o).filter(function (t) {
        return Object.getOwnPropertyDescriptor(o, t).enumerable;
      }))), e.forEach(function (t) {
        var e, n, i;
        e = r, i = o[n = t], n in e ? Object.defineProperty(e, n, {
          value: i,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }) : e[n] = i;
      });
    }

    return r;
  }

  for (var r, n, o, a, l, f, h, u, d, p, g, m, _, v, E, y, b, T, C, w, I, D, A, S, O, N, k, L, P, x, j, M, R, H, W, F, U, B, K, V, Q, Y, G, q, z, X, J, Z, $, tt, et, nt, it, rt, ot, st, at, lt, ct, ft, ht, ut, dt, pt, gt = function (i) {
    var e = "transitionend";

    function t(t) {
      var e = this,
          n = !1;
      return i(this).one(l.TRANSITION_END, function () {
        n = !0;
      }), setTimeout(function () {
        n || l.triggerTransitionEnd(e);
      }, t), this;
    }

    var l = {
      TRANSITION_END: "bsTransitionEnd",
      getUID: function (t) {
        for (; t += ~~(1e6 * Math.random()), document.getElementById(t););

        return t;
      },
      getSelectorFromElement: function (t) {
        var e = t.getAttribute("data-target");
        e && "#" !== e || (e = t.getAttribute("href") || "");

        try {
          return 0 < i(document).find(e).length ? e : null;
        } catch (t) {
          return null;
        }
      },
      getTransitionDurationFromElement: function (t) {
        if (!t) return 0;
        var e = i(t).css("transition-duration");
        return parseFloat(e) ? (e = e.split(",")[0], 1e3 * parseFloat(e)) : 0;
      },
      reflow: function (t) {
        return t.offsetHeight;
      },
      triggerTransitionEnd: function (t) {
        i(t).trigger(e);
      },
      supportsTransitionEnd: function () {
        return Boolean(e);
      },
      isElement: function (t) {
        return (t[0] || t).nodeType;
      },
      typeCheckConfig: function (t, e, n) {
        for (var i in n) if (Object.prototype.hasOwnProperty.call(n, i)) {
          var r = n[i],
              o = e[i],
              s = o && l.isElement(o) ? "element" : (a = o, {}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());
          if (!new RegExp(r).test(s)) throw new Error(t.toUpperCase() + ': Option "' + i + '" provided type "' + s + '" but expected type "' + r + '".');
        }

        var a;
      }
    };
    return i.fn.emulateTransitionEnd = t, i.event.special[l.TRANSITION_END] = {
      bindType: e,
      delegateType: e,
      handle: function (t) {
        if (i(t.target).is(this)) return t.handleObj.handler.apply(this, arguments);
      }
    }, l;
  }(e = e && e.hasOwnProperty("default") ? e.default : e), mt = (n = "alert", a = "." + (o = "bs.alert"), l = (r = e).fn[n], f = {
    CLOSE: "close" + a,
    CLOSED: "closed" + a,
    CLICK_DATA_API: "click" + a + ".data-api"
  }, h = "alert", u = "fade", d = "show", p = function () {
    function i(t) {
      this._element = t;
    }

    var t = i.prototype;
    return t.close = function (t) {
      var e = this._element;
      t && (e = this._getRootElement(t)), this._triggerCloseEvent(e).isDefaultPrevented() || this._removeElement(e);
    }, t.dispose = function () {
      r.removeData(this._element, o), this._element = null;
    }, t._getRootElement = function (t) {
      var e = gt.getSelectorFromElement(t),
          n = !1;
      return e && (n = r(e)[0]), n || (n = r(t).closest("." + h)[0]), n;
    }, t._triggerCloseEvent = function (t) {
      var e = r.Event(f.CLOSE);
      return r(t).trigger(e), e;
    }, t._removeElement = function (e) {
      var n = this;

      if (r(e).removeClass(d), r(e).hasClass(u)) {
        var t = gt.getTransitionDurationFromElement(e);
        r(e).one(gt.TRANSITION_END, function (t) {
          return n._destroyElement(e, t);
        }).emulateTransitionEnd(t);
      } else this._destroyElement(e);
    }, t._destroyElement = function (t) {
      r(t).detach().trigger(f.CLOSED).remove();
    }, i._jQueryInterface = function (n) {
      return this.each(function () {
        var t = r(this),
            e = t.data(o);
        e || (e = new i(this), t.data(o, e)), "close" === n && e[n](this);
      });
    }, i._handleDismiss = function (e) {
      return function (t) {
        t && t.preventDefault(), e.close(this);
      };
    }, s(i, null, [{
      key: "VERSION",
      get: function () {
        return "4.1.1";
      }
    }]), i;
  }(), r(document).on(f.CLICK_DATA_API, '[data-dismiss="alert"]', p._handleDismiss(new p())), r.fn[n] = p._jQueryInterface, r.fn[n].Constructor = p, r.fn[n].noConflict = function () {
    return r.fn[n] = l, p._jQueryInterface;
  }, p), _t = (m = "button", v = "." + (_ = "bs.button"), E = ".data-api", y = (g = e).fn[m], b = "active", T = "btn", w = '[data-toggle^="button"]', I = '[data-toggle="buttons"]', D = "input", A = ".active", S = ".btn", O = {
    CLICK_DATA_API: "click" + v + E,
    FOCUS_BLUR_DATA_API: (C = "focus") + v + E + " blur" + v + E
  }, N = function () {
    function n(t) {
      this._element = t;
    }

    var t = n.prototype;
    return t.toggle = function () {
      var t = !0,
          e = !0,
          n = g(this._element).closest(I)[0];

      if (n) {
        var i = g(this._element).find(D)[0];

        if (i) {
          if ("radio" === i.type) if (i.checked && g(this._element).hasClass(b)) t = !1;else {
            var r = g(n).find(A)[0];
            r && g(r).removeClass(b);
          }

          if (t) {
            if (i.hasAttribute("disabled") || n.hasAttribute("disabled") || i.classList.contains("disabled") || n.classList.contains("disabled")) return;
            i.checked = !g(this._element).hasClass(b), g(i).trigger("change");
          }

          i.focus(), e = !1;
        }
      }

      e && this._element.setAttribute("aria-pressed", !g(this._element).hasClass(b)), t && g(this._element).toggleClass(b);
    }, t.dispose = function () {
      g.removeData(this._element, _), this._element = null;
    }, n._jQueryInterface = function (e) {
      return this.each(function () {
        var t = g(this).data(_);
        t || (t = new n(this), g(this).data(_, t)), "toggle" === e && t[e]();
      });
    }, s(n, null, [{
      key: "VERSION",
      get: function () {
        return "4.1.1";
      }
    }]), n;
  }(), g(document).on(O.CLICK_DATA_API, w, function (t) {
    t.preventDefault();
    var e = t.target;
    g(e).hasClass(T) || (e = g(e).closest(S)), N._jQueryInterface.call(g(e), "toggle");
  }).on(O.FOCUS_BLUR_DATA_API, w, function (t) {
    var e = g(t.target).closest(S)[0];
    g(e).toggleClass(C, /^focus(in)?$/.test(t.type));
  }), g.fn[m] = N._jQueryInterface, g.fn[m].Constructor = N, g.fn[m].noConflict = function () {
    return g.fn[m] = y, N._jQueryInterface;
  }, N), vt = (L = "carousel", x = "." + (P = "bs.carousel"), j = ".data-api", M = (k = e).fn[L], R = {
    interval: 5e3,
    keyboard: !0,
    slide: !1,
    pause: "hover",
    wrap: !0
  }, H = {
    interval: "(number|boolean)",
    keyboard: "boolean",
    slide: "(boolean|string)",
    pause: "(string|boolean)",
    wrap: "boolean"
  }, W = "next", F = "prev", U = "left", B = "right", K = {
    SLIDE: "slide" + x,
    SLID: "slid" + x,
    KEYDOWN: "keydown" + x,
    MOUSEENTER: "mouseenter" + x,
    MOUSELEAVE: "mouseleave" + x,
    TOUCHEND: "touchend" + x,
    LOAD_DATA_API: "load" + x + j,
    CLICK_DATA_API: "click" + x + j
  }, V = "carousel", Q = "active", Y = "slide", G = "carousel-item-right", q = "carousel-item-left", z = "carousel-item-next", X = "carousel-item-prev", J = {
    ACTIVE: ".active",
    ACTIVE_ITEM: ".active.carousel-item",
    ITEM: ".carousel-item",
    NEXT_PREV: ".carousel-item-next, .carousel-item-prev",
    INDICATORS: ".carousel-indicators",
    DATA_SLIDE: "[data-slide], [data-slide-to]",
    DATA_RIDE: '[data-ride="carousel"]'
  }, Z = function () {
    function o(t, e) {
      this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this._config = this._getConfig(e), this._element = k(t)[0], this._indicatorsElement = k(this._element).find(J.INDICATORS)[0], this._addEventListeners();
    }

    var t = o.prototype;
    return t.next = function () {
      this._isSliding || this._slide(W);
    }, t.nextWhenVisible = function () {
      !document.hidden && k(this._element).is(":visible") && "hidden" !== k(this._element).css("visibility") && this.next();
    }, t.prev = function () {
      this._isSliding || this._slide(F);
    }, t.pause = function (t) {
      t || (this._isPaused = !0), k(this._element).find(J.NEXT_PREV)[0] && (gt.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;
    }, t.cycle = function (t) {
      t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));
    }, t.to = function (t) {
      var e = this;
      this._activeElement = k(this._element).find(J.ACTIVE_ITEM)[0];

      var n = this._getItemIndex(this._activeElement);

      if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding) k(this._element).one(K.SLID, function () {
        return e.to(t);
      });else {
        if (n === t) return this.pause(), void this.cycle();
        var i = n < t ? W : F;

        this._slide(i, this._items[t]);
      }
    }, t.dispose = function () {
      k(this._element).off(x), k.removeData(this._element, P), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;
    }, t._getConfig = function (t) {
      return t = c({}, R, t), gt.typeCheckConfig(L, t, H), t;
    }, t._addEventListeners = function () {
      var e = this;
      this._config.keyboard && k(this._element).on(K.KEYDOWN, function (t) {
        return e._keydown(t);
      }), "hover" === this._config.pause && (k(this._element).on(K.MOUSEENTER, function (t) {
        return e.pause(t);
      }).on(K.MOUSELEAVE, function (t) {
        return e.cycle(t);
      }), ("ontouchstart" in document.documentElement) && k(this._element).on(K.TOUCHEND, function () {
        e.pause(), e.touchTimeout && clearTimeout(e.touchTimeout), e.touchTimeout = setTimeout(function (t) {
          return e.cycle(t);
        }, 500 + e._config.interval);
      }));
    }, t._keydown = function (t) {
      if (!/input|textarea/i.test(t.target.tagName)) switch (t.which) {
        case 37:
          t.preventDefault(), this.prev();
          break;

        case 39:
          t.preventDefault(), this.next();
      }
    }, t._getItemIndex = function (t) {
      return this._items = k.makeArray(k(t).parent().find(J.ITEM)), this._items.indexOf(t);
    }, t._getItemByDirection = function (t, e) {
      var n = t === W,
          i = t === F,
          r = this._getItemIndex(e),
          o = this._items.length - 1;

      if ((i && 0 === r || n && r === o) && !this._config.wrap) return e;
      var s = (r + (t === F ? -1 : 1)) % this._items.length;
      return -1 === s ? this._items[this._items.length - 1] : this._items[s];
    }, t._triggerSlideEvent = function (t, e) {
      var n = this._getItemIndex(t),
          i = this._getItemIndex(k(this._element).find(J.ACTIVE_ITEM)[0]),
          r = k.Event(K.SLIDE, {
        relatedTarget: t,
        direction: e,
        from: i,
        to: n
      });

      return k(this._element).trigger(r), r;
    }, t._setActiveIndicatorElement = function (t) {
      if (this._indicatorsElement) {
        k(this._indicatorsElement).find(J.ACTIVE).removeClass(Q);

        var e = this._indicatorsElement.children[this._getItemIndex(t)];

        e && k(e).addClass(Q);
      }
    }, t._slide = function (t, e) {
      var n,
          i,
          r,
          o = this,
          s = k(this._element).find(J.ACTIVE_ITEM)[0],
          a = this._getItemIndex(s),
          l = e || s && this._getItemByDirection(t, s),
          c = this._getItemIndex(l),
          f = Boolean(this._interval);

      if (t === W ? (n = q, i = z, r = U) : (n = G, i = X, r = B), l && k(l).hasClass(Q)) this._isSliding = !1;else if (!this._triggerSlideEvent(l, r).isDefaultPrevented() && s && l) {
        this._isSliding = !0, f && this.pause(), this._setActiveIndicatorElement(l);
        var h = k.Event(K.SLID, {
          relatedTarget: l,
          direction: r,
          from: a,
          to: c
        });

        if (k(this._element).hasClass(Y)) {
          k(l).addClass(i), gt.reflow(l), k(s).addClass(n), k(l).addClass(n);
          var u = gt.getTransitionDurationFromElement(s);
          k(s).one(gt.TRANSITION_END, function () {
            k(l).removeClass(n + " " + i).addClass(Q), k(s).removeClass(Q + " " + i + " " + n), o._isSliding = !1, setTimeout(function () {
              return k(o._element).trigger(h);
            }, 0);
          }).emulateTransitionEnd(u);
        } else k(s).removeClass(Q), k(l).addClass(Q), this._isSliding = !1, k(this._element).trigger(h);

        f && this.cycle();
      }
    }, o._jQueryInterface = function (i) {
      return this.each(function () {
        var t = k(this).data(P),
            e = c({}, R, k(this).data());
        "object" == typeof i && (e = c({}, e, i));
        var n = "string" == typeof i ? i : e.slide;
        if (t || (t = new o(this, e), k(this).data(P, t)), "number" == typeof i) t.to(i);else if ("string" == typeof n) {
          if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
          t[n]();
        } else e.interval && (t.pause(), t.cycle());
      });
    }, o._dataApiClickHandler = function (t) {
      var e = gt.getSelectorFromElement(this);

      if (e) {
        var n = k(e)[0];

        if (n && k(n).hasClass(V)) {
          var i = c({}, k(n).data(), k(this).data()),
              r = this.getAttribute("data-slide-to");
          r && (i.interval = !1), o._jQueryInterface.call(k(n), i), r && k(n).data(P).to(r), t.preventDefault();
        }
      }
    }, s(o, null, [{
      key: "VERSION",
      get: function () {
        return "4.1.1";
      }
    }, {
      key: "Default",
      get: function () {
        return R;
      }
    }]), o;
  }(), k(document).on(K.CLICK_DATA_API, J.DATA_SLIDE, Z._dataApiClickHandler), k(window).on(K.LOAD_DATA_API, function () {
    k(J.DATA_RIDE).each(function () {
      var t = k(this);

      Z._jQueryInterface.call(t, t.data());
    });
  }), k.fn[L] = Z._jQueryInterface, k.fn[L].Constructor = Z, k.fn[L].noConflict = function () {
    return k.fn[L] = M, Z._jQueryInterface;
  }, Z), Et = (tt = "collapse", nt = "." + (et = "bs.collapse"), it = ($ = e).fn[tt], rt = {
    toggle: !0,
    parent: ""
  }, ot = {
    toggle: "boolean",
    parent: "(string|element)"
  }, st = {
    SHOW: "show" + nt,
    SHOWN: "shown" + nt,
    HIDE: "hide" + nt,
    HIDDEN: "hidden" + nt,
    CLICK_DATA_API: "click" + nt + ".data-api"
  }, at = "show", lt = "collapse", ct = "collapsing", ft = "collapsed", ht = "width", ut = "height", dt = {
    ACTIVES: ".show, .collapsing",
    DATA_TOGGLE: '[data-toggle="collapse"]'
  }, pt = function () {
    function a(t, e) {
      this._isTransitioning = !1, this._element = t, this._config = this._getConfig(e), this._triggerArray = $.makeArray($('[data-toggle="collapse"][href="#' + t.id + '"],[data-toggle="collapse"][data-target="#' + t.id + '"]'));

      for (var n = $(dt.DATA_TOGGLE), i = 0; i < n.length; i++) {
        var r = n[i],
            o = gt.getSelectorFromElement(r);
        null !== o && 0 < $(o).filter(t).length && (this._selector = o, this._triggerArray.push(r));
      }

      this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();
    }

    var t = a.prototype;
    return t.toggle = function () {
      $(this._element).hasClass(at) ? this.hide() : this.show();
    }, t.show = function () {
      var t,
          e,
          n = this;

      if (!this._isTransitioning && !$(this._element).hasClass(at) && (this._parent && 0 === (t = $.makeArray($(this._parent).find(dt.ACTIVES).filter('[data-parent="' + this._config.parent + '"]'))).length && (t = null), !(t && (e = $(t).not(this._selector).data(et)) && e._isTransitioning))) {
        var i = $.Event(st.SHOW);

        if ($(this._element).trigger(i), !i.isDefaultPrevented()) {
          t && (a._jQueryInterface.call($(t).not(this._selector), "hide"), e || $(t).data(et, null));

          var r = this._getDimension();

          $(this._element).removeClass(lt).addClass(ct), (this._element.style[r] = 0) < this._triggerArray.length && $(this._triggerArray).removeClass(ft).attr("aria-expanded", !0), this.setTransitioning(!0);
          var o = "scroll" + (r[0].toUpperCase() + r.slice(1)),
              s = gt.getTransitionDurationFromElement(this._element);
          $(this._element).one(gt.TRANSITION_END, function () {
            $(n._element).removeClass(ct).addClass(lt).addClass(at), n._element.style[r] = "", n.setTransitioning(!1), $(n._element).trigger(st.SHOWN);
          }).emulateTransitionEnd(s), this._element.style[r] = this._element[o] + "px";
        }
      }
    }, t.hide = function () {
      var t = this;

      if (!this._isTransitioning && $(this._element).hasClass(at)) {
        var e = $.Event(st.HIDE);

        if ($(this._element).trigger(e), !e.isDefaultPrevented()) {
          var n = this._getDimension();

          if (this._element.style[n] = this._element.getBoundingClientRect()[n] + "px", gt.reflow(this._element), $(this._element).addClass(ct).removeClass(lt).removeClass(at), 0 < this._triggerArray.length) for (var i = 0; i < this._triggerArray.length; i++) {
            var r = this._triggerArray[i],
                o = gt.getSelectorFromElement(r);
            if (null !== o) $(o).hasClass(at) || $(r).addClass(ft).attr("aria-expanded", !1);
          }
          this.setTransitioning(!0);
          this._element.style[n] = "";
          var s = gt.getTransitionDurationFromElement(this._element);
          $(this._element).one(gt.TRANSITION_END, function () {
            t.setTransitioning(!1), $(t._element).removeClass(ct).addClass(lt).trigger(st.HIDDEN);
          }).emulateTransitionEnd(s);
        }
      }
    }, t.setTransitioning = function (t) {
      this._isTransitioning = t;
    }, t.dispose = function () {
      $.removeData(this._element, et), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;
    }, t._getConfig = function (t) {
      return (t = c({}, rt, t)).toggle = Boolean(t.toggle), gt.typeCheckConfig(tt, t, ot), t;
    }, t._getDimension = function () {
      return $(this._element).hasClass(ht) ? ht : ut;
    }, t._getParent = function () {
      var n = this,
          t = null;
      gt.isElement(this._config.parent) ? (t = this._config.parent, "undefined" != typeof this._config.parent.jquery && (t = this._config.parent[0])) : t = $(this._config.parent)[0];
      var e = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';
      return $(t).find(e).each(function (t, e) {
        n._addAriaAndCollapsedClass(a._getTargetFromElement(e), [e]);
      }), t;
    }, t._addAriaAndCollapsedClass = function (t, e) {
      if (t) {
        var n = $(t).hasClass(at);
        0 < e.length && $(e).toggleClass(ft, !n).attr("aria-expanded", n);
      }
    }, a._getTargetFromElement = function (t) {
      var e = gt.getSelectorFromElement(t);
      return e ? $(e)[0] : null;
    }, a._jQueryInterface = function (i) {
      return this.each(function () {
        var t = $(this),
            e = t.data(et),
            n = c({}, rt, t.data(), "object" == typeof i && i ? i : {});

        if (!e && n.toggle && /show|hide/.test(i) && (n.toggle = !1), e || (e = new a(this, n), t.data(et, e)), "string" == typeof i) {
          if ("undefined" == typeof e[i]) throw new TypeError('No method named "' + i + '"');
          e[i]();
        }
      });
    }, s(a, null, [{
      key: "VERSION",
      get: function () {
        return "4.1.1";
      }
    }, {
      key: "Default",
      get: function () {
        return rt;
      }
    }]), a;
  }(), $(document).on(st.CLICK_DATA_API, dt.DATA_TOGGLE, function (t) {
    "A" === t.currentTarget.tagName && t.preventDefault();
    var n = $(this),
        e = gt.getSelectorFromElement(this);
    $(e).each(function () {
      var t = $(this),
          e = t.data(et) ? "toggle" : n.data();

      pt._jQueryInterface.call(t, e);
    });
  }), $.fn[tt] = pt._jQueryInterface, $.fn[tt].Constructor = pt, $.fn[tt].noConflict = function () {
    return $.fn[tt] = it, pt._jQueryInterface;
  }, pt), yt = "undefined" != typeof window && "undefined" != typeof document, bt = ["Edge", "Trident", "Firefox"], Tt = 0, Ct = 0; Ct < bt.length; Ct += 1) if (yt && 0 <= navigator.userAgent.indexOf(bt[Ct])) {
    Tt = 1;
    break;
  }

  var wt = yt && window.Promise ? function (t) {
    var e = !1;
    return function () {
      e || (e = !0, window.Promise.resolve().then(function () {
        e = !1, t();
      }));
    };
  } : function (t) {
    var e = !1;
    return function () {
      e || (e = !0, setTimeout(function () {
        e = !1, t();
      }, Tt));
    };
  };

  function It(t) {
    return t && "[object Function]" === {}.toString.call(t);
  }

  function Dt(t, e) {
    if (1 !== t.nodeType) return [];
    var n = getComputedStyle(t, null);
    return e ? n[e] : n;
  }

  function At(t) {
    return "HTML" === t.nodeName ? t : t.parentNode || t.host;
  }

  function St(t) {
    if (!t) return document.body;

    switch (t.nodeName) {
      case "HTML":
      case "BODY":
        return t.ownerDocument.body;

      case "#document":
        return t.body;
    }

    var e = Dt(t),
        n = e.overflow,
        i = e.overflowX,
        r = e.overflowY;
    return /(auto|scroll|overlay)/.test(n + r + i) ? t : St(At(t));
  }

  var Ot = yt && !(!window.MSInputMethodContext || !document.documentMode),
      Nt = yt && /MSIE 10/.test(navigator.userAgent);

  function kt(t) {
    return 11 === t ? Ot : 10 === t ? Nt : Ot || Nt;
  }

  function Lt(t) {
    if (!t) return document.documentElement;

    for (var e = kt(10) ? document.body : null, n = t.offsetParent; n === e && t.nextElementSibling;) n = (t = t.nextElementSibling).offsetParent;

    var i = n && n.nodeName;
    return i && "BODY" !== i && "HTML" !== i ? -1 !== ["TD", "TABLE"].indexOf(n.nodeName) && "static" === Dt(n, "position") ? Lt(n) : n : t ? t.ownerDocument.documentElement : document.documentElement;
  }

  function Pt(t) {
    return null !== t.parentNode ? Pt(t.parentNode) : t;
  }

  function xt(t, e) {
    if (!(t && t.nodeType && e && e.nodeType)) return document.documentElement;
    var n = t.compareDocumentPosition(e) & Node.DOCUMENT_POSITION_FOLLOWING,
        i = n ? t : e,
        r = n ? e : t,
        o = document.createRange();
    o.setStart(i, 0), o.setEnd(r, 0);
    var s,
        a,
        l = o.commonAncestorContainer;
    if (t !== l && e !== l || i.contains(r)) return "BODY" === (a = (s = l).nodeName) || "HTML" !== a && Lt(s.firstElementChild) !== s ? Lt(l) : l;
    var c = Pt(t);
    return c.host ? xt(c.host, e) : xt(t, Pt(e).host);
  }

  function jt(t) {
    var e = "top" === (1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "top") ? "scrollTop" : "scrollLeft",
        n = t.nodeName;

    if ("BODY" === n || "HTML" === n) {
      var i = t.ownerDocument.documentElement;
      return (t.ownerDocument.scrollingElement || i)[e];
    }

    return t[e];
  }

  function Mt(t, e) {
    var n = "x" === e ? "Left" : "Top",
        i = "Left" === n ? "Right" : "Bottom";
    return parseFloat(t["border" + n + "Width"], 10) + parseFloat(t["border" + i + "Width"], 10);
  }

  function Rt(t, e, n, i) {
    return Math.max(e["offset" + t], e["scroll" + t], n["client" + t], n["offset" + t], n["scroll" + t], kt(10) ? n["offset" + t] + i["margin" + ("Height" === t ? "Top" : "Left")] + i["margin" + ("Height" === t ? "Bottom" : "Right")] : 0);
  }

  function Ht() {
    var t = document.body,
        e = document.documentElement,
        n = kt(10) && getComputedStyle(e);
    return {
      height: Rt("Height", t, e, n),
      width: Rt("Width", t, e, n)
    };
  }

  var Wt = function (t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
  },
      Ft = function () {
    function i(t, e) {
      for (var n = 0; n < e.length; n++) {
        var i = e[n];
        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
      }
    }

    return function (t, e, n) {
      return e && i(t.prototype, e), n && i(t, n), t;
    };
  }(),
      Ut = function (t, e, n) {
    return e in t ? Object.defineProperty(t, e, {
      value: n,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : t[e] = n, t;
  },
      Bt = Object.assign || function (t) {
    for (var e = 1; e < arguments.length; e++) {
      var n = arguments[e];

      for (var i in n) Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
    }

    return t;
  };

  function Kt(t) {
    return Bt({}, t, {
      right: t.left + t.width,
      bottom: t.top + t.height
    });
  }

  function Vt(t) {
    var e = {};

    try {
      if (kt(10)) {
        e = t.getBoundingClientRect();
        var n = jt(t, "top"),
            i = jt(t, "left");
        e.top += n, e.left += i, e.bottom += n, e.right += i;
      } else e = t.getBoundingClientRect();
    } catch (t) {}

    var r = {
      left: e.left,
      top: e.top,
      width: e.right - e.left,
      height: e.bottom - e.top
    },
        o = "HTML" === t.nodeName ? Ht() : {},
        s = o.width || t.clientWidth || r.right - r.left,
        a = o.height || t.clientHeight || r.bottom - r.top,
        l = t.offsetWidth - s,
        c = t.offsetHeight - a;

    if (l || c) {
      var f = Dt(t);
      l -= Mt(f, "x"), c -= Mt(f, "y"), r.width -= l, r.height -= c;
    }

    return Kt(r);
  }

  function Qt(t, e) {
    var n = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],
        i = kt(10),
        r = "HTML" === e.nodeName,
        o = Vt(t),
        s = Vt(e),
        a = St(t),
        l = Dt(e),
        c = parseFloat(l.borderTopWidth, 10),
        f = parseFloat(l.borderLeftWidth, 10);
    n && "HTML" === e.nodeName && (s.top = Math.max(s.top, 0), s.left = Math.max(s.left, 0));
    var h = Kt({
      top: o.top - s.top - c,
      left: o.left - s.left - f,
      width: o.width,
      height: o.height
    });

    if (h.marginTop = 0, h.marginLeft = 0, !i && r) {
      var u = parseFloat(l.marginTop, 10),
          d = parseFloat(l.marginLeft, 10);
      h.top -= c - u, h.bottom -= c - u, h.left -= f - d, h.right -= f - d, h.marginTop = u, h.marginLeft = d;
    }

    return (i && !n ? e.contains(a) : e === a && "BODY" !== a.nodeName) && (h = function (t, e) {
      var n = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],
          i = jt(e, "top"),
          r = jt(e, "left"),
          o = n ? -1 : 1;
      return t.top += i * o, t.bottom += i * o, t.left += r * o, t.right += r * o, t;
    }(h, e)), h;
  }

  function Yt(t) {
    if (!t || !t.parentElement || kt()) return document.documentElement;

    for (var e = t.parentElement; e && "none" === Dt(e, "transform");) e = e.parentElement;

    return e || document.documentElement;
  }

  function Gt(t, e, n, i) {
    var r = 4 < arguments.length && void 0 !== arguments[4] && arguments[4],
        o = {
      top: 0,
      left: 0
    },
        s = r ? Yt(t) : xt(t, e);
    if ("viewport" === i) o = function (t) {
      var e = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
          n = t.ownerDocument.documentElement,
          i = Qt(t, n),
          r = Math.max(n.clientWidth, window.innerWidth || 0),
          o = Math.max(n.clientHeight, window.innerHeight || 0),
          s = e ? 0 : jt(n),
          a = e ? 0 : jt(n, "left");
      return Kt({
        top: s - i.top + i.marginTop,
        left: a - i.left + i.marginLeft,
        width: r,
        height: o
      });
    }(s, r);else {
      var a = void 0;
      "scrollParent" === i ? "BODY" === (a = St(At(e))).nodeName && (a = t.ownerDocument.documentElement) : a = "window" === i ? t.ownerDocument.documentElement : i;
      var l = Qt(a, s, r);
      if ("HTML" !== a.nodeName || function t(e) {
        var n = e.nodeName;
        return "BODY" !== n && "HTML" !== n && ("fixed" === Dt(e, "position") || t(At(e)));
      }(s)) o = l;else {
        var c = Ht(),
            f = c.height,
            h = c.width;
        o.top += l.top - l.marginTop, o.bottom = f + l.top, o.left += l.left - l.marginLeft, o.right = h + l.left;
      }
    }
    return o.left += n, o.top += n, o.right -= n, o.bottom -= n, o;
  }

  function qt(t, e, i, n, r) {
    var o = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;
    if (-1 === t.indexOf("auto")) return t;
    var s = Gt(i, n, o, r),
        a = {
      top: {
        width: s.width,
        height: e.top - s.top
      },
      right: {
        width: s.right - e.right,
        height: s.height
      },
      bottom: {
        width: s.width,
        height: s.bottom - e.bottom
      },
      left: {
        width: e.left - s.left,
        height: s.height
      }
    },
        l = Object.keys(a).map(function (t) {
      return Bt({
        key: t
      }, a[t], {
        area: (e = a[t], e.width * e.height)
      });
      var e;
    }).sort(function (t, e) {
      return e.area - t.area;
    }),
        c = l.filter(function (t) {
      var e = t.width,
          n = t.height;
      return e >= i.clientWidth && n >= i.clientHeight;
    }),
        f = 0 < c.length ? c[0].key : l[0].key,
        h = t.split("-")[1];
    return f + (h ? "-" + h : "");
  }

  function zt(t, e, n) {
    var i = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
    return Qt(n, i ? Yt(e) : xt(e, n), i);
  }

  function Xt(t) {
    var e = getComputedStyle(t),
        n = parseFloat(e.marginTop) + parseFloat(e.marginBottom),
        i = parseFloat(e.marginLeft) + parseFloat(e.marginRight);
    return {
      width: t.offsetWidth + i,
      height: t.offsetHeight + n
    };
  }

  function Jt(t) {
    var e = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom"
    };
    return t.replace(/left|right|bottom|top/g, function (t) {
      return e[t];
    });
  }

  function Zt(t, e, n) {
    n = n.split("-")[0];
    var i = Xt(t),
        r = {
      width: i.width,
      height: i.height
    },
        o = -1 !== ["right", "left"].indexOf(n),
        s = o ? "top" : "left",
        a = o ? "left" : "top",
        l = o ? "height" : "width",
        c = o ? "width" : "height";
    return r[s] = e[s] + e[l] / 2 - i[l] / 2, r[a] = n === a ? e[a] - i[c] : e[Jt(a)], r;
  }

  function $t(t, e) {
    return Array.prototype.find ? t.find(e) : t.filter(e)[0];
  }

  function te(t, n, e) {
    return (void 0 === e ? t : t.slice(0, function (t, e, n) {
      if (Array.prototype.findIndex) return t.findIndex(function (t) {
        return t[e] === n;
      });
      var i = $t(t, function (t) {
        return t[e] === n;
      });
      return t.indexOf(i);
    }(t, "name", e))).forEach(function (t) {
      t.function && console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
      var e = t.function || t.fn;
      t.enabled && It(e) && (n.offsets.popper = Kt(n.offsets.popper), n.offsets.reference = Kt(n.offsets.reference), n = e(n, t));
    }), n;
  }

  function ee(t, n) {
    return t.some(function (t) {
      var e = t.name;
      return t.enabled && e === n;
    });
  }

  function ne(t) {
    for (var e = [!1, "ms", "Webkit", "Moz", "O"], n = t.charAt(0).toUpperCase() + t.slice(1), i = 0; i < e.length; i++) {
      var r = e[i],
          o = r ? "" + r + n : t;
      if ("undefined" != typeof document.body.style[o]) return o;
    }

    return null;
  }

  function ie(t) {
    var e = t.ownerDocument;
    return e ? e.defaultView : window;
  }

  function re(t, e, n, i) {
    n.updateBound = i, ie(t).addEventListener("resize", n.updateBound, {
      passive: !0
    });
    var r = St(t);
    return function t(e, n, i, r) {
      var o = "BODY" === e.nodeName,
          s = o ? e.ownerDocument.defaultView : e;
      s.addEventListener(n, i, {
        passive: !0
      }), o || t(St(s.parentNode), n, i, r), r.push(s);
    }(r, "scroll", n.updateBound, n.scrollParents), n.scrollElement = r, n.eventsEnabled = !0, n;
  }

  function oe() {
    var t, e;
    this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = (t = this.reference, e = this.state, ie(t).removeEventListener("resize", e.updateBound), e.scrollParents.forEach(function (t) {
      t.removeEventListener("scroll", e.updateBound);
    }), e.updateBound = null, e.scrollParents = [], e.scrollElement = null, e.eventsEnabled = !1, e));
  }

  function se(t) {
    return "" !== t && !isNaN(parseFloat(t)) && isFinite(t);
  }

  function ae(n, i) {
    Object.keys(i).forEach(function (t) {
      var e = "";
      -1 !== ["width", "height", "top", "right", "bottom", "left"].indexOf(t) && se(i[t]) && (e = "px"), n.style[t] = i[t] + e;
    });
  }

  function le(t, e, n) {
    var i = $t(t, function (t) {
      return t.name === e;
    }),
        r = !!i && t.some(function (t) {
      return t.name === n && t.enabled && t.order < i.order;
    });

    if (!r) {
      var o = "`" + e + "`",
          s = "`" + n + "`";
      console.warn(s + " modifier is required by " + o + " modifier in order to work, be sure to include it before " + o + "!");
    }

    return r;
  }

  var ce = ["auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start"],
      fe = ce.slice(3);

  function he(t) {
    var e = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
        n = fe.indexOf(t),
        i = fe.slice(n + 1).concat(fe.slice(0, n));
    return e ? i.reverse() : i;
  }

  var ue = {
    FLIP: "flip",
    CLOCKWISE: "clockwise",
    COUNTERCLOCKWISE: "counterclockwise"
  };

  function de(t, r, o, e) {
    var s = [0, 0],
        a = -1 !== ["right", "left"].indexOf(e),
        n = t.split(/(\+|\-)/).map(function (t) {
      return t.trim();
    }),
        i = n.indexOf($t(n, function (t) {
      return -1 !== t.search(/,|\s/);
    }));
    n[i] && -1 === n[i].indexOf(",") && console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
    var l = /\s*,\s*|\s+/,
        c = -1 !== i ? [n.slice(0, i).concat([n[i].split(l)[0]]), [n[i].split(l)[1]].concat(n.slice(i + 1))] : [n];
    return (c = c.map(function (t, e) {
      var n = (1 === e ? !a : a) ? "height" : "width",
          i = !1;
      return t.reduce(function (t, e) {
        return "" === t[t.length - 1] && -1 !== ["+", "-"].indexOf(e) ? (t[t.length - 1] = e, i = !0, t) : i ? (t[t.length - 1] += e, i = !1, t) : t.concat(e);
      }, []).map(function (t) {
        return function (t, e, n, i) {
          var r = t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),
              o = +r[1],
              s = r[2];
          if (!o) return t;

          if (0 === s.indexOf("%")) {
            var a = void 0;

            switch (s) {
              case "%p":
                a = n;
                break;

              case "%":
              case "%r":
              default:
                a = i;
            }

            return Kt(a)[e] / 100 * o;
          }

          if ("vh" === s || "vw" === s) return ("vh" === s ? Math.max(document.documentElement.clientHeight, window.innerHeight || 0) : Math.max(document.documentElement.clientWidth, window.innerWidth || 0)) / 100 * o;
          return o;
        }(t, n, r, o);
      });
    })).forEach(function (n, i) {
      n.forEach(function (t, e) {
        se(t) && (s[i] += t * ("-" === n[e - 1] ? -1 : 1));
      });
    }), s;
  }

  var pe = {
    placement: "bottom",
    positionFixed: !1,
    eventsEnabled: !0,
    removeOnDestroy: !1,
    onCreate: function () {},
    onUpdate: function () {},
    modifiers: {
      shift: {
        order: 100,
        enabled: !0,
        fn: function (t) {
          var e = t.placement,
              n = e.split("-")[0],
              i = e.split("-")[1];

          if (i) {
            var r = t.offsets,
                o = r.reference,
                s = r.popper,
                a = -1 !== ["bottom", "top"].indexOf(n),
                l = a ? "left" : "top",
                c = a ? "width" : "height",
                f = {
              start: Ut({}, l, o[l]),
              end: Ut({}, l, o[l] + o[c] - s[c])
            };
            t.offsets.popper = Bt({}, s, f[i]);
          }

          return t;
        }
      },
      offset: {
        order: 200,
        enabled: !0,
        fn: function (t, e) {
          var n = e.offset,
              i = t.placement,
              r = t.offsets,
              o = r.popper,
              s = r.reference,
              a = i.split("-")[0],
              l = void 0;
          return l = se(+n) ? [+n, 0] : de(n, o, s, a), "left" === a ? (o.top += l[0], o.left -= l[1]) : "right" === a ? (o.top += l[0], o.left += l[1]) : "top" === a ? (o.left += l[0], o.top -= l[1]) : "bottom" === a && (o.left += l[0], o.top += l[1]), t.popper = o, t;
        },
        offset: 0
      },
      preventOverflow: {
        order: 300,
        enabled: !0,
        fn: function (t, i) {
          var e = i.boundariesElement || Lt(t.instance.popper);
          t.instance.reference === e && (e = Lt(e));
          var n = ne("transform"),
              r = t.instance.popper.style,
              o = r.top,
              s = r.left,
              a = r[n];
          r.top = "", r.left = "", r[n] = "";
          var l = Gt(t.instance.popper, t.instance.reference, i.padding, e, t.positionFixed);
          r.top = o, r.left = s, r[n] = a, i.boundaries = l;
          var c = i.priority,
              f = t.offsets.popper,
              h = {
            primary: function (t) {
              var e = f[t];
              return f[t] < l[t] && !i.escapeWithReference && (e = Math.max(f[t], l[t])), Ut({}, t, e);
            },
            secondary: function (t) {
              var e = "right" === t ? "left" : "top",
                  n = f[e];
              return f[t] > l[t] && !i.escapeWithReference && (n = Math.min(f[e], l[t] - ("right" === t ? f.width : f.height))), Ut({}, e, n);
            }
          };
          return c.forEach(function (t) {
            var e = -1 !== ["left", "top"].indexOf(t) ? "primary" : "secondary";
            f = Bt({}, f, h[e](t));
          }), t.offsets.popper = f, t;
        },
        priority: ["left", "right", "top", "bottom"],
        padding: 5,
        boundariesElement: "scrollParent"
      },
      keepTogether: {
        order: 400,
        enabled: !0,
        fn: function (t) {
          var e = t.offsets,
              n = e.popper,
              i = e.reference,
              r = t.placement.split("-")[0],
              o = Math.floor,
              s = -1 !== ["top", "bottom"].indexOf(r),
              a = s ? "right" : "bottom",
              l = s ? "left" : "top",
              c = s ? "width" : "height";
          return n[a] < o(i[l]) && (t.offsets.popper[l] = o(i[l]) - n[c]), n[l] > o(i[a]) && (t.offsets.popper[l] = o(i[a])), t;
        }
      },
      arrow: {
        order: 500,
        enabled: !0,
        fn: function (t, e) {
          var n;
          if (!le(t.instance.modifiers, "arrow", "keepTogether")) return t;
          var i = e.element;

          if ("string" == typeof i) {
            if (!(i = t.instance.popper.querySelector(i))) return t;
          } else if (!t.instance.popper.contains(i)) return console.warn("WARNING: `arrow.element` must be child of its popper element!"), t;

          var r = t.placement.split("-")[0],
              o = t.offsets,
              s = o.popper,
              a = o.reference,
              l = -1 !== ["left", "right"].indexOf(r),
              c = l ? "height" : "width",
              f = l ? "Top" : "Left",
              h = f.toLowerCase(),
              u = l ? "left" : "top",
              d = l ? "bottom" : "right",
              p = Xt(i)[c];
          a[d] - p < s[h] && (t.offsets.popper[h] -= s[h] - (a[d] - p)), a[h] + p > s[d] && (t.offsets.popper[h] += a[h] + p - s[d]), t.offsets.popper = Kt(t.offsets.popper);

          var g = a[h] + a[c] / 2 - p / 2,
              m = Dt(t.instance.popper),
              _ = parseFloat(m["margin" + f], 10),
              v = parseFloat(m["border" + f + "Width"], 10),
              E = g - t.offsets.popper[h] - _ - v;

          return E = Math.max(Math.min(s[c] - p, E), 0), t.arrowElement = i, t.offsets.arrow = (Ut(n = {}, h, Math.round(E)), Ut(n, u, ""), n), t;
        },
        element: "[x-arrow]"
      },
      flip: {
        order: 600,
        enabled: !0,
        fn: function (p, g) {
          if (ee(p.instance.modifiers, "inner")) return p;
          if (p.flipped && p.placement === p.originalPlacement) return p;
          var m = Gt(p.instance.popper, p.instance.reference, g.padding, g.boundariesElement, p.positionFixed),
              _ = p.placement.split("-")[0],
              v = Jt(_),
              E = p.placement.split("-")[1] || "",
              y = [];

          switch (g.behavior) {
            case ue.FLIP:
              y = [_, v];
              break;

            case ue.CLOCKWISE:
              y = he(_);
              break;

            case ue.COUNTERCLOCKWISE:
              y = he(_, !0);
              break;

            default:
              y = g.behavior;
          }

          return y.forEach(function (t, e) {
            if (_ !== t || y.length === e + 1) return p;
            _ = p.placement.split("-")[0], v = Jt(_);
            var n,
                i = p.offsets.popper,
                r = p.offsets.reference,
                o = Math.floor,
                s = "left" === _ && o(i.right) > o(r.left) || "right" === _ && o(i.left) < o(r.right) || "top" === _ && o(i.bottom) > o(r.top) || "bottom" === _ && o(i.top) < o(r.bottom),
                a = o(i.left) < o(m.left),
                l = o(i.right) > o(m.right),
                c = o(i.top) < o(m.top),
                f = o(i.bottom) > o(m.bottom),
                h = "left" === _ && a || "right" === _ && l || "top" === _ && c || "bottom" === _ && f,
                u = -1 !== ["top", "bottom"].indexOf(_),
                d = !!g.flipVariations && (u && "start" === E && a || u && "end" === E && l || !u && "start" === E && c || !u && "end" === E && f);
            (s || h || d) && (p.flipped = !0, (s || h) && (_ = y[e + 1]), d && (E = "end" === (n = E) ? "start" : "start" === n ? "end" : n), p.placement = _ + (E ? "-" + E : ""), p.offsets.popper = Bt({}, p.offsets.popper, Zt(p.instance.popper, p.offsets.reference, p.placement)), p = te(p.instance.modifiers, p, "flip"));
          }), p;
        },
        behavior: "flip",
        padding: 5,
        boundariesElement: "viewport"
      },
      inner: {
        order: 700,
        enabled: !1,
        fn: function (t) {
          var e = t.placement,
              n = e.split("-")[0],
              i = t.offsets,
              r = i.popper,
              o = i.reference,
              s = -1 !== ["left", "right"].indexOf(n),
              a = -1 === ["top", "left"].indexOf(n);
          return r[s ? "left" : "top"] = o[n] - (a ? r[s ? "width" : "height"] : 0), t.placement = Jt(e), t.offsets.popper = Kt(r), t;
        }
      },
      hide: {
        order: 800,
        enabled: !0,
        fn: function (t) {
          if (!le(t.instance.modifiers, "hide", "preventOverflow")) return t;
          var e = t.offsets.reference,
              n = $t(t.instance.modifiers, function (t) {
            return "preventOverflow" === t.name;
          }).boundaries;

          if (e.bottom < n.top || e.left > n.right || e.top > n.bottom || e.right < n.left) {
            if (!0 === t.hide) return t;
            t.hide = !0, t.attributes["x-out-of-boundaries"] = "";
          } else {
            if (!1 === t.hide) return t;
            t.hide = !1, t.attributes["x-out-of-boundaries"] = !1;
          }

          return t;
        }
      },
      computeStyle: {
        order: 850,
        enabled: !0,
        fn: function (t, e) {
          var n = e.x,
              i = e.y,
              r = t.offsets.popper,
              o = $t(t.instance.modifiers, function (t) {
            return "applyStyle" === t.name;
          }).gpuAcceleration;
          void 0 !== o && console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");
          var s = void 0 !== o ? o : e.gpuAcceleration,
              a = Vt(Lt(t.instance.popper)),
              l = {
            position: r.position
          },
              c = {
            left: Math.floor(r.left),
            top: Math.round(r.top),
            bottom: Math.round(r.bottom),
            right: Math.floor(r.right)
          },
              f = "bottom" === n ? "top" : "bottom",
              h = "right" === i ? "left" : "right",
              u = ne("transform"),
              d = void 0,
              p = void 0;
          if (p = "bottom" === f ? -a.height + c.bottom : c.top, d = "right" === h ? -a.width + c.right : c.left, s && u) l[u] = "translate3d(" + d + "px, " + p + "px, 0)", l[f] = 0, l[h] = 0, l.willChange = "transform";else {
            var g = "bottom" === f ? -1 : 1,
                m = "right" === h ? -1 : 1;
            l[f] = p * g, l[h] = d * m, l.willChange = f + ", " + h;
          }
          var _ = {
            "x-placement": t.placement
          };
          return t.attributes = Bt({}, _, t.attributes), t.styles = Bt({}, l, t.styles), t.arrowStyles = Bt({}, t.offsets.arrow, t.arrowStyles), t;
        },
        gpuAcceleration: !0,
        x: "bottom",
        y: "right"
      },
      applyStyle: {
        order: 900,
        enabled: !0,
        fn: function (t) {
          var e, n;
          return ae(t.instance.popper, t.styles), e = t.instance.popper, n = t.attributes, Object.keys(n).forEach(function (t) {
            !1 !== n[t] ? e.setAttribute(t, n[t]) : e.removeAttribute(t);
          }), t.arrowElement && Object.keys(t.arrowStyles).length && ae(t.arrowElement, t.arrowStyles), t;
        },
        onLoad: function (t, e, n, i, r) {
          var o = zt(r, e, t, n.positionFixed),
              s = qt(n.placement, o, e, t, n.modifiers.flip.boundariesElement, n.modifiers.flip.padding);
          return e.setAttribute("x-placement", s), ae(e, {
            position: n.positionFixed ? "fixed" : "absolute"
          }), n;
        },
        gpuAcceleration: void 0
      }
    }
  },
      ge = function () {
    function o(t, e) {
      var n = this,
          i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};
      Wt(this, o), this.scheduleUpdate = function () {
        return requestAnimationFrame(n.update);
      }, this.update = wt(this.update.bind(this)), this.options = Bt({}, o.Defaults, i), this.state = {
        isDestroyed: !1,
        isCreated: !1,
        scrollParents: []
      }, this.reference = t && t.jquery ? t[0] : t, this.popper = e && e.jquery ? e[0] : e, this.options.modifiers = {}, Object.keys(Bt({}, o.Defaults.modifiers, i.modifiers)).forEach(function (t) {
        n.options.modifiers[t] = Bt({}, o.Defaults.modifiers[t] || {}, i.modifiers ? i.modifiers[t] : {});
      }), this.modifiers = Object.keys(this.options.modifiers).map(function (t) {
        return Bt({
          name: t
        }, n.options.modifiers[t]);
      }).sort(function (t, e) {
        return t.order - e.order;
      }), this.modifiers.forEach(function (t) {
        t.enabled && It(t.onLoad) && t.onLoad(n.reference, n.popper, n.options, t, n.state);
      }), this.update();
      var r = this.options.eventsEnabled;
      r && this.enableEventListeners(), this.state.eventsEnabled = r;
    }

    return Ft(o, [{
      key: "update",
      value: function () {
        return function () {
          if (!this.state.isDestroyed) {
            var t = {
              instance: this,
              styles: {},
              arrowStyles: {},
              attributes: {},
              flipped: !1,
              offsets: {}
            };
            t.offsets.reference = zt(this.state, this.popper, this.reference, this.options.positionFixed), t.placement = qt(this.options.placement, t.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), t.originalPlacement = t.placement, t.positionFixed = this.options.positionFixed, t.offsets.popper = Zt(this.popper, t.offsets.reference, t.placement), t.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute", t = te(this.modifiers, t), this.state.isCreated ? this.options.onUpdate(t) : (this.state.isCreated = !0, this.options.onCreate(t));
          }
        }.call(this);
      }
    }, {
      key: "destroy",
      value: function () {
        return function () {
          return this.state.isDestroyed = !0, ee(this.modifiers, "applyStyle") && (this.popper.removeAttribute("x-placement"), this.popper.style.position = "", this.popper.style.top = "", this.popper.style.left = "", this.popper.style.right = "", this.popper.style.bottom = "", this.popper.style.willChange = "", this.popper.style[ne("transform")] = ""), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;
        }.call(this);
      }
    }, {
      key: "enableEventListeners",
      value: function () {
        return function () {
          this.state.eventsEnabled || (this.state = re(this.reference, this.options, this.state, this.scheduleUpdate));
        }.call(this);
      }
    }, {
      key: "disableEventListeners",
      value: function () {
        return oe.call(this);
      }
    }]), o;
  }();

  ge.Utils = ("undefined" != typeof window ? window : global).PopperUtils, ge.placements = ce, ge.Defaults = pe;

  var me,
      _e,
      ve,
      Ee,
      ye,
      be,
      Te,
      Ce,
      we,
      Ie,
      De,
      Ae,
      Se,
      Oe,
      Ne,
      ke,
      Le,
      Pe,
      xe,
      je,
      Me,
      Re,
      He,
      We,
      Fe,
      Ue,
      Be,
      Ke,
      Ve,
      Qe,
      Ye,
      Ge,
      qe,
      ze,
      Xe,
      Je,
      Ze,
      $e,
      tn,
      en,
      nn,
      rn,
      on,
      sn,
      an,
      ln,
      cn,
      fn,
      hn,
      un,
      dn,
      pn,
      gn,
      mn,
      _n,
      vn,
      En,
      yn,
      bn,
      Tn,
      Cn,
      wn,
      In,
      Dn,
      An,
      Sn,
      On,
      Nn,
      kn,
      Ln,
      Pn,
      xn,
      jn,
      Mn,
      Rn,
      Hn,
      Wn,
      Fn,
      Un,
      Bn,
      Kn,
      Vn,
      Qn,
      Yn,
      Gn,
      qn,
      zn,
      Xn,
      Jn,
      Zn,
      $n,
      ti,
      ei,
      ni,
      ii,
      ri,
      oi,
      si,
      ai,
      li,
      ci,
      fi,
      hi,
      ui,
      di,
      pi,
      gi,
      mi,
      _i,
      vi,
      Ei,
      yi,
      bi,
      Ti = (_e = "dropdown", Ee = "." + (ve = "bs.dropdown"), ye = ".data-api", be = (me = e).fn[_e], Te = new RegExp("38|40|27"), Ce = {
    HIDE: "hide" + Ee,
    HIDDEN: "hidden" + Ee,
    SHOW: "show" + Ee,
    SHOWN: "shown" + Ee,
    CLICK: "click" + Ee,
    CLICK_DATA_API: "click" + Ee + ye,
    KEYDOWN_DATA_API: "keydown" + Ee + ye,
    KEYUP_DATA_API: "keyup" + Ee + ye
  }, we = "disabled", Ie = "show", De = "dropup", Ae = "dropright", Se = "dropleft", Oe = "dropdown-menu-right", Ne = "position-static", ke = '[data-toggle="dropdown"]', Le = ".dropdown form", Pe = ".dropdown-menu", xe = ".navbar-nav", je = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)", Me = "top-start", Re = "top-end", He = "bottom-start", We = "bottom-end", Fe = "right-start", Ue = "left-start", Be = {
    offset: 0,
    flip: !0,
    boundary: "scrollParent",
    reference: "toggle",
    display: "dynamic"
  }, Ke = {
    offset: "(number|string|function)",
    flip: "boolean",
    boundary: "(string|element)",
    reference: "(string|element)",
    display: "string"
  }, Ve = function () {
    function l(t, e) {
      this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();
    }

    var t = l.prototype;
    return t.toggle = function () {
      if (!this._element.disabled && !me(this._element).hasClass(we)) {
        var t = l._getParentFromElement(this._element),
            e = me(this._menu).hasClass(Ie);

        if (l._clearMenus(), !e) {
          var n = {
            relatedTarget: this._element
          },
              i = me.Event(Ce.SHOW, n);

          if (me(t).trigger(i), !i.isDefaultPrevented()) {
            if (!this._inNavbar) {
              if ("undefined" == typeof ge) throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");
              var r = this._element;
              "parent" === this._config.reference ? r = t : gt.isElement(this._config.reference) && (r = this._config.reference, "undefined" != typeof this._config.reference.jquery && (r = this._config.reference[0])), "scrollParent" !== this._config.boundary && me(t).addClass(Ne), this._popper = new ge(r, this._menu, this._getPopperConfig());
            }

            "ontouchstart" in document.documentElement && 0 === me(t).closest(xe).length && me(document.body).children().on("mouseover", null, me.noop), this._element.focus(), this._element.setAttribute("aria-expanded", !0), me(this._menu).toggleClass(Ie), me(t).toggleClass(Ie).trigger(me.Event(Ce.SHOWN, n));
          }
        }
      }
    }, t.dispose = function () {
      me.removeData(this._element, ve), me(this._element).off(Ee), this._element = null, (this._menu = null) !== this._popper && (this._popper.destroy(), this._popper = null);
    }, t.update = function () {
      this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();
    }, t._addEventListeners = function () {
      var e = this;
      me(this._element).on(Ce.CLICK, function (t) {
        t.preventDefault(), t.stopPropagation(), e.toggle();
      });
    }, t._getConfig = function (t) {
      return t = c({}, this.constructor.Default, me(this._element).data(), t), gt.typeCheckConfig(_e, t, this.constructor.DefaultType), t;
    }, t._getMenuElement = function () {
      if (!this._menu) {
        var t = l._getParentFromElement(this._element);

        this._menu = me(t).find(Pe)[0];
      }

      return this._menu;
    }, t._getPlacement = function () {
      var t = me(this._element).parent(),
          e = He;
      return t.hasClass(De) ? (e = Me, me(this._menu).hasClass(Oe) && (e = Re)) : t.hasClass(Ae) ? e = Fe : t.hasClass(Se) ? e = Ue : me(this._menu).hasClass(Oe) && (e = We), e;
    }, t._detectNavbar = function () {
      return 0 < me(this._element).closest(".navbar").length;
    }, t._getPopperConfig = function () {
      var e = this,
          t = {};
      "function" == typeof this._config.offset ? t.fn = function (t) {
        return t.offsets = c({}, t.offsets, e._config.offset(t.offsets) || {}), t;
      } : t.offset = this._config.offset;
      var n = {
        placement: this._getPlacement(),
        modifiers: {
          offset: t,
          flip: {
            enabled: this._config.flip
          },
          preventOverflow: {
            boundariesElement: this._config.boundary
          }
        }
      };
      return "static" === this._config.display && (n.modifiers.applyStyle = {
        enabled: !1
      }), n;
    }, l._jQueryInterface = function (e) {
      return this.each(function () {
        var t = me(this).data(ve);

        if (t || (t = new l(this, "object" == typeof e ? e : null), me(this).data(ve, t)), "string" == typeof e) {
          if ("undefined" == typeof t[e]) throw new TypeError('No method named "' + e + '"');
          t[e]();
        }
      });
    }, l._clearMenus = function (t) {
      if (!t || 3 !== t.which && ("keyup" !== t.type || 9 === t.which)) for (var e = me.makeArray(me(ke)), n = 0; n < e.length; n++) {
        var i = l._getParentFromElement(e[n]),
            r = me(e[n]).data(ve),
            o = {
          relatedTarget: e[n]
        };

        if (r) {
          var s = r._menu;

          if (me(i).hasClass(Ie) && !(t && ("click" === t.type && /input|textarea/i.test(t.target.tagName) || "keyup" === t.type && 9 === t.which) && me.contains(i, t.target))) {
            var a = me.Event(Ce.HIDE, o);
            me(i).trigger(a), a.isDefaultPrevented() || ("ontouchstart" in document.documentElement && me(document.body).children().off("mouseover", null, me.noop), e[n].setAttribute("aria-expanded", "false"), me(s).removeClass(Ie), me(i).removeClass(Ie).trigger(me.Event(Ce.HIDDEN, o)));
          }
        }
      }
    }, l._getParentFromElement = function (t) {
      var e,
          n = gt.getSelectorFromElement(t);
      return n && (e = me(n)[0]), e || t.parentNode;
    }, l._dataApiKeydownHandler = function (t) {
      if ((/input|textarea/i.test(t.target.tagName) ? !(32 === t.which || 27 !== t.which && (40 !== t.which && 38 !== t.which || me(t.target).closest(Pe).length)) : Te.test(t.which)) && (t.preventDefault(), t.stopPropagation(), !this.disabled && !me(this).hasClass(we))) {
        var e = l._getParentFromElement(this),
            n = me(e).hasClass(Ie);

        if ((n || 27 === t.which && 32 === t.which) && (!n || 27 !== t.which && 32 !== t.which)) {
          var i = me(e).find(je).get();

          if (0 !== i.length) {
            var r = i.indexOf(t.target);
            38 === t.which && 0 < r && r--, 40 === t.which && r < i.length - 1 && r++, r < 0 && (r = 0), i[r].focus();
          }
        } else {
          if (27 === t.which) {
            var o = me(e).find(ke)[0];
            me(o).trigger("focus");
          }

          me(this).trigger("click");
        }
      }
    }, s(l, null, [{
      key: "VERSION",
      get: function () {
        return "4.1.1";
      }
    }, {
      key: "Default",
      get: function () {
        return Be;
      }
    }, {
      key: "DefaultType",
      get: function () {
        return Ke;
      }
    }]), l;
  }(), me(document).on(Ce.KEYDOWN_DATA_API, ke, Ve._dataApiKeydownHandler).on(Ce.KEYDOWN_DATA_API, Pe, Ve._dataApiKeydownHandler).on(Ce.CLICK_DATA_API + " " + Ce.KEYUP_DATA_API, Ve._clearMenus).on(Ce.CLICK_DATA_API, ke, function (t) {
    t.preventDefault(), t.stopPropagation(), Ve._jQueryInterface.call(me(this), "toggle");
  }).on(Ce.CLICK_DATA_API, Le, function (t) {
    t.stopPropagation();
  }), me.fn[_e] = Ve._jQueryInterface, me.fn[_e].Constructor = Ve, me.fn[_e].noConflict = function () {
    return me.fn[_e] = be, Ve._jQueryInterface;
  }, Ve),
      Ci = (Ye = "modal", qe = "." + (Ge = "bs.modal"), ze = (Qe = e).fn[Ye], Xe = {
    backdrop: !0,
    keyboard: !0,
    focus: !0,
    show: !0
  }, Je = {
    backdrop: "(boolean|string)",
    keyboard: "boolean",
    focus: "boolean",
    show: "boolean"
  }, Ze = {
    HIDE: "hide" + qe,
    HIDDEN: "hidden" + qe,
    SHOW: "show" + qe,
    SHOWN: "shown" + qe,
    FOCUSIN: "focusin" + qe,
    RESIZE: "resize" + qe,
    CLICK_DISMISS: "click.dismiss" + qe,
    KEYDOWN_DISMISS: "keydown.dismiss" + qe,
    MOUSEUP_DISMISS: "mouseup.dismiss" + qe,
    MOUSEDOWN_DISMISS: "mousedown.dismiss" + qe,
    CLICK_DATA_API: "click" + qe + ".data-api"
  }, $e = "modal-scrollbar-measure", tn = "modal-backdrop", en = "modal-open", nn = "fade", rn = "show", on = {
    DIALOG: ".modal-dialog",
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
    STICKY_CONTENT: ".sticky-top",
    NAVBAR_TOGGLER: ".navbar-toggler"
  }, sn = function () {
    function r(t, e) {
      this._config = this._getConfig(e), this._element = t, this._dialog = Qe(t).find(on.DIALOG)[0], this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._scrollbarWidth = 0;
    }

    var t = r.prototype;
    return t.toggle = function (t) {
      return this._isShown ? this.hide() : this.show(t);
    }, t.show = function (t) {
      var e = this;

      if (!this._isTransitioning && !this._isShown) {
        Qe(this._element).hasClass(nn) && (this._isTransitioning = !0);
        var n = Qe.Event(Ze.SHOW, {
          relatedTarget: t
        });
        Qe(this._element).trigger(n), this._isShown || n.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), Qe(document.body).addClass(en), this._setEscapeEvent(), this._setResizeEvent(), Qe(this._element).on(Ze.CLICK_DISMISS, on.DATA_DISMISS, function (t) {
          return e.hide(t);
        }), Qe(this._dialog).on(Ze.MOUSEDOWN_DISMISS, function () {
          Qe(e._element).one(Ze.MOUSEUP_DISMISS, function (t) {
            Qe(t.target).is(e._element) && (e._ignoreBackdropClick = !0);
          });
        }), this._showBackdrop(function () {
          return e._showElement(t);
        }));
      }
    }, t.hide = function (t) {
      var e = this;

      if (t && t.preventDefault(), !this._isTransitioning && this._isShown) {
        var n = Qe.Event(Ze.HIDE);

        if (Qe(this._element).trigger(n), this._isShown && !n.isDefaultPrevented()) {
          this._isShown = !1;
          var i = Qe(this._element).hasClass(nn);

          if (i && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), Qe(document).off(Ze.FOCUSIN), Qe(this._element).removeClass(rn), Qe(this._element).off(Ze.CLICK_DISMISS), Qe(this._dialog).off(Ze.MOUSEDOWN_DISMISS), i) {
            var r = gt.getTransitionDurationFromElement(this._element);
            Qe(this._element).one(gt.TRANSITION_END, function (t) {
              return e._hideModal(t);
            }).emulateTransitionEnd(r);
          } else this._hideModal();
        }
      }
    }, t.dispose = function () {
      Qe.removeData(this._element, Ge), Qe(window, document, this._element, this._backdrop).off(qe), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._scrollbarWidth = null;
    }, t.handleUpdate = function () {
      this._adjustDialog();
    }, t._getConfig = function (t) {
      return t = c({}, Xe, t), gt.typeCheckConfig(Ye, t, Je), t;
    }, t._showElement = function (t) {
      var e = this,
          n = Qe(this._element).hasClass(nn);
      this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.scrollTop = 0, n && gt.reflow(this._element), Qe(this._element).addClass(rn), this._config.focus && this._enforceFocus();

      var i = Qe.Event(Ze.SHOWN, {
        relatedTarget: t
      }),
          r = function () {
        e._config.focus && e._element.focus(), e._isTransitioning = !1, Qe(e._element).trigger(i);
      };

      if (n) {
        var o = gt.getTransitionDurationFromElement(this._element);
        Qe(this._dialog).one(gt.TRANSITION_END, r).emulateTransitionEnd(o);
      } else r();
    }, t._enforceFocus = function () {
      var e = this;
      Qe(document).off(Ze.FOCUSIN).on(Ze.FOCUSIN, function (t) {
        document !== t.target && e._element !== t.target && 0 === Qe(e._element).has(t.target).length && e._element.focus();
      });
    }, t._setEscapeEvent = function () {
      var e = this;
      this._isShown && this._config.keyboard ? Qe(this._element).on(Ze.KEYDOWN_DISMISS, function (t) {
        27 === t.which && (t.preventDefault(), e.hide());
      }) : this._isShown || Qe(this._element).off(Ze.KEYDOWN_DISMISS);
    }, t._setResizeEvent = function () {
      var e = this;
      this._isShown ? Qe(window).on(Ze.RESIZE, function (t) {
        return e.handleUpdate(t);
      }) : Qe(window).off(Ze.RESIZE);
    }, t._hideModal = function () {
      var t = this;
      this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._isTransitioning = !1, this._showBackdrop(function () {
        Qe(document.body).removeClass(en), t._resetAdjustments(), t._resetScrollbar(), Qe(t._element).trigger(Ze.HIDDEN);
      });
    }, t._removeBackdrop = function () {
      this._backdrop && (Qe(this._backdrop).remove(), this._backdrop = null);
    }, t._showBackdrop = function (t) {
      var e = this,
          n = Qe(this._element).hasClass(nn) ? nn : "";

      if (this._isShown && this._config.backdrop) {
        if (this._backdrop = document.createElement("div"), this._backdrop.className = tn, n && Qe(this._backdrop).addClass(n), Qe(this._backdrop).appendTo(document.body), Qe(this._element).on(Ze.CLICK_DISMISS, function (t) {
          e._ignoreBackdropClick ? e._ignoreBackdropClick = !1 : t.target === t.currentTarget && ("static" === e._config.backdrop ? e._element.focus() : e.hide());
        }), n && gt.reflow(this._backdrop), Qe(this._backdrop).addClass(rn), !t) return;
        if (!n) return void t();
        var i = gt.getTransitionDurationFromElement(this._backdrop);
        Qe(this._backdrop).one(gt.TRANSITION_END, t).emulateTransitionEnd(i);
      } else if (!this._isShown && this._backdrop) {
        Qe(this._backdrop).removeClass(rn);

        var r = function () {
          e._removeBackdrop(), t && t();
        };

        if (Qe(this._element).hasClass(nn)) {
          var o = gt.getTransitionDurationFromElement(this._backdrop);
          Qe(this._backdrop).one(gt.TRANSITION_END, r).emulateTransitionEnd(o);
        } else r();
      } else t && t();
    }, t._adjustDialog = function () {
      var t = this._element.scrollHeight > document.documentElement.clientHeight;
      !this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + "px");
    }, t._resetAdjustments = function () {
      this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
    }, t._checkScrollbar = function () {
      var t = document.body.getBoundingClientRect();
      this._isBodyOverflowing = t.left + t.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
    }, t._setScrollbar = function () {
      var r = this;

      if (this._isBodyOverflowing) {
        Qe(on.FIXED_CONTENT).each(function (t, e) {
          var n = Qe(e)[0].style.paddingRight,
              i = Qe(e).css("padding-right");
          Qe(e).data("padding-right", n).css("padding-right", parseFloat(i) + r._scrollbarWidth + "px");
        }), Qe(on.STICKY_CONTENT).each(function (t, e) {
          var n = Qe(e)[0].style.marginRight,
              i = Qe(e).css("margin-right");
          Qe(e).data("margin-right", n).css("margin-right", parseFloat(i) - r._scrollbarWidth + "px");
        }), Qe(on.NAVBAR_TOGGLER).each(function (t, e) {
          var n = Qe(e)[0].style.marginRight,
              i = Qe(e).css("margin-right");
          Qe(e).data("margin-right", n).css("margin-right", parseFloat(i) + r._scrollbarWidth + "px");
        });
        var t = document.body.style.paddingRight,
            e = Qe(document.body).css("padding-right");
        Qe(document.body).data("padding-right", t).css("padding-right", parseFloat(e) + this._scrollbarWidth + "px");
      }
    }, t._resetScrollbar = function () {
      Qe(on.FIXED_CONTENT).each(function (t, e) {
        var n = Qe(e).data("padding-right");
        "undefined" != typeof n && Qe(e).css("padding-right", n).removeData("padding-right");
      }), Qe(on.STICKY_CONTENT + ", " + on.NAVBAR_TOGGLER).each(function (t, e) {
        var n = Qe(e).data("margin-right");
        "undefined" != typeof n && Qe(e).css("margin-right", n).removeData("margin-right");
      });
      var t = Qe(document.body).data("padding-right");
      "undefined" != typeof t && Qe(document.body).css("padding-right", t).removeData("padding-right");
    }, t._getScrollbarWidth = function () {
      var t = document.createElement("div");
      t.className = $e, document.body.appendChild(t);
      var e = t.getBoundingClientRect().width - t.clientWidth;
      return document.body.removeChild(t), e;
    }, r._jQueryInterface = function (n, i) {
      return this.each(function () {
        var t = Qe(this).data(Ge),
            e = c({}, Xe, Qe(this).data(), "object" == typeof n && n ? n : {});

        if (t || (t = new r(this, e), Qe(this).data(Ge, t)), "string" == typeof n) {
          if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
          t[n](i);
        } else e.show && t.show(i);
      });
    }, s(r, null, [{
      key: "VERSION",
      get: function () {
        return "4.1.1";
      }
    }, {
      key: "Default",
      get: function () {
        return Xe;
      }
    }]), r;
  }(), Qe(document).on(Ze.CLICK_DATA_API, on.DATA_TOGGLE, function (t) {
    var e,
        n = this,
        i = gt.getSelectorFromElement(this);
    i && (e = Qe(i)[0]);
    var r = Qe(e).data(Ge) ? "toggle" : c({}, Qe(e).data(), Qe(this).data());
    "A" !== this.tagName && "AREA" !== this.tagName || t.preventDefault();
    var o = Qe(e).one(Ze.SHOW, function (t) {
      t.isDefaultPrevented() || o.one(Ze.HIDDEN, function () {
        Qe(n).is(":visible") && n.focus();
      });
    });

    sn._jQueryInterface.call(Qe(e), r, this);
  }), Qe.fn[Ye] = sn._jQueryInterface, Qe.fn[Ye].Constructor = sn, Qe.fn[Ye].noConflict = function () {
    return Qe.fn[Ye] = ze, sn._jQueryInterface;
  }, sn),
      wi = (ln = "tooltip", fn = "." + (cn = "bs.tooltip"), hn = (an = e).fn[ln], un = "bs-tooltip", dn = new RegExp("(^|\\s)" + un + "\\S+", "g"), mn = {
    animation: !0,
    template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: "hover focus",
    title: "",
    delay: 0,
    html: !(gn = {
      AUTO: "auto",
      TOP: "top",
      RIGHT: "right",
      BOTTOM: "bottom",
      LEFT: "left"
    }),
    selector: !(pn = {
      animation: "boolean",
      template: "string",
      title: "(string|element|function)",
      trigger: "string",
      delay: "(number|object)",
      html: "boolean",
      selector: "(string|boolean)",
      placement: "(string|function)",
      offset: "(number|string)",
      container: "(string|element|boolean)",
      fallbackPlacement: "(string|array)",
      boundary: "(string|element)"
    }),
    placement: "top",
    offset: 0,
    container: !1,
    fallbackPlacement: "flip",
    boundary: "scrollParent"
  }, vn = "out", En = {
    HIDE: "hide" + fn,
    HIDDEN: "hidden" + fn,
    SHOW: (_n = "show") + fn,
    SHOWN: "shown" + fn,
    INSERTED: "inserted" + fn,
    CLICK: "click" + fn,
    FOCUSIN: "focusin" + fn,
    FOCUSOUT: "focusout" + fn,
    MOUSEENTER: "mouseenter" + fn,
    MOUSELEAVE: "mouseleave" + fn
  }, yn = "fade", bn = "show", Tn = ".tooltip-inner", Cn = ".arrow", wn = "hover", In = "focus", Dn = "click", An = "manual", Sn = function () {
    function i(t, e) {
      if ("undefined" == typeof ge) throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");
      this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners();
    }

    var t = i.prototype;
    return t.enable = function () {
      this._isEnabled = !0;
    }, t.disable = function () {
      this._isEnabled = !1;
    }, t.toggleEnabled = function () {
      this._isEnabled = !this._isEnabled;
    }, t.toggle = function (t) {
      if (this._isEnabled) if (t) {
        var e = this.constructor.DATA_KEY,
            n = an(t.currentTarget).data(e);
        n || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), an(t.currentTarget).data(e, n)), n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n);
      } else {
        if (an(this.getTipElement()).hasClass(bn)) return void this._leave(null, this);

        this._enter(null, this);
      }
    }, t.dispose = function () {
      clearTimeout(this._timeout), an.removeData(this.element, this.constructor.DATA_KEY), an(this.element).off(this.constructor.EVENT_KEY), an(this.element).closest(".modal").off("hide.bs.modal"), this.tip && an(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, (this._activeTrigger = null) !== this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null;
    }, t.show = function () {
      var e = this;
      if ("none" === an(this.element).css("display")) throw new Error("Please use show on visible elements");
      var t = an.Event(this.constructor.Event.SHOW);

      if (this.isWithContent() && this._isEnabled) {
        an(this.element).trigger(t);
        var n = an.contains(this.element.ownerDocument.documentElement, this.element);
        if (t.isDefaultPrevented() || !n) return;
        var i = this.getTipElement(),
            r = gt.getUID(this.constructor.NAME);
        i.setAttribute("id", r), this.element.setAttribute("aria-describedby", r), this.setContent(), this.config.animation && an(i).addClass(yn);

        var o = "function" == typeof this.config.placement ? this.config.placement.call(this, i, this.element) : this.config.placement,
            s = this._getAttachment(o);

        this.addAttachmentClass(s);
        var a = !1 === this.config.container ? document.body : an(this.config.container);
        an(i).data(this.constructor.DATA_KEY, this), an.contains(this.element.ownerDocument.documentElement, this.tip) || an(i).appendTo(a), an(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new ge(this.element, i, {
          placement: s,
          modifiers: {
            offset: {
              offset: this.config.offset
            },
            flip: {
              behavior: this.config.fallbackPlacement
            },
            arrow: {
              element: Cn
            },
            preventOverflow: {
              boundariesElement: this.config.boundary
            }
          },
          onCreate: function (t) {
            t.originalPlacement !== t.placement && e._handlePopperPlacementChange(t);
          },
          onUpdate: function (t) {
            e._handlePopperPlacementChange(t);
          }
        }), an(i).addClass(bn), "ontouchstart" in document.documentElement && an(document.body).children().on("mouseover", null, an.noop);

        var l = function () {
          e.config.animation && e._fixTransition();
          var t = e._hoverState;
          e._hoverState = null, an(e.element).trigger(e.constructor.Event.SHOWN), t === vn && e._leave(null, e);
        };

        if (an(this.tip).hasClass(yn)) {
          var c = gt.getTransitionDurationFromElement(this.tip);
          an(this.tip).one(gt.TRANSITION_END, l).emulateTransitionEnd(c);
        } else l();
      }
    }, t.hide = function (t) {
      var e = this,
          n = this.getTipElement(),
          i = an.Event(this.constructor.Event.HIDE),
          r = function () {
        e._hoverState !== _n && n.parentNode && n.parentNode.removeChild(n), e._cleanTipClass(), e.element.removeAttribute("aria-describedby"), an(e.element).trigger(e.constructor.Event.HIDDEN), null !== e._popper && e._popper.destroy(), t && t();
      };

      if (an(this.element).trigger(i), !i.isDefaultPrevented()) {
        if (an(n).removeClass(bn), "ontouchstart" in document.documentElement && an(document.body).children().off("mouseover", null, an.noop), this._activeTrigger[Dn] = !1, this._activeTrigger[In] = !1, this._activeTrigger[wn] = !1, an(this.tip).hasClass(yn)) {
          var o = gt.getTransitionDurationFromElement(n);
          an(n).one(gt.TRANSITION_END, r).emulateTransitionEnd(o);
        } else r();

        this._hoverState = "";
      }
    }, t.update = function () {
      null !== this._popper && this._popper.scheduleUpdate();
    }, t.isWithContent = function () {
      return Boolean(this.getTitle());
    }, t.addAttachmentClass = function (t) {
      an(this.getTipElement()).addClass(un + "-" + t);
    }, t.getTipElement = function () {
      return this.tip = this.tip || an(this.config.template)[0], this.tip;
    }, t.setContent = function () {
      var t = an(this.getTipElement());
      this.setElementContent(t.find(Tn), this.getTitle()), t.removeClass(yn + " " + bn);
    }, t.setElementContent = function (t, e) {
      var n = this.config.html;
      "object" == typeof e && (e.nodeType || e.jquery) ? n ? an(e).parent().is(t) || t.empty().append(e) : t.text(an(e).text()) : t[n ? "html" : "text"](e);
    }, t.getTitle = function () {
      var t = this.element.getAttribute("data-original-title");
      return t || (t = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t;
    }, t._getAttachment = function (t) {
      return gn[t.toUpperCase()];
    }, t._setListeners = function () {
      var i = this;
      this.config.trigger.split(" ").forEach(function (t) {
        if ("click" === t) an(i.element).on(i.constructor.Event.CLICK, i.config.selector, function (t) {
          return i.toggle(t);
        });else if (t !== An) {
          var e = t === wn ? i.constructor.Event.MOUSEENTER : i.constructor.Event.FOCUSIN,
              n = t === wn ? i.constructor.Event.MOUSELEAVE : i.constructor.Event.FOCUSOUT;
          an(i.element).on(e, i.config.selector, function (t) {
            return i._enter(t);
          }).on(n, i.config.selector, function (t) {
            return i._leave(t);
          });
        }
        an(i.element).closest(".modal").on("hide.bs.modal", function () {
          return i.hide();
        });
      }), this.config.selector ? this.config = c({}, this.config, {
        trigger: "manual",
        selector: ""
      }) : this._fixTitle();
    }, t._fixTitle = function () {
      var t = typeof this.element.getAttribute("data-original-title");
      (this.element.getAttribute("title") || "string" !== t) && (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""));
    }, t._enter = function (t, e) {
      var n = this.constructor.DATA_KEY;
      (e = e || an(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), an(t.currentTarget).data(n, e)), t && (e._activeTrigger["focusin" === t.type ? In : wn] = !0), an(e.getTipElement()).hasClass(bn) || e._hoverState === _n ? e._hoverState = _n : (clearTimeout(e._timeout), e._hoverState = _n, e.config.delay && e.config.delay.show ? e._timeout = setTimeout(function () {
        e._hoverState === _n && e.show();
      }, e.config.delay.show) : e.show());
    }, t._leave = function (t, e) {
      var n = this.constructor.DATA_KEY;
      (e = e || an(t.currentTarget).data(n)) || (e = new this.constructor(t.currentTarget, this._getDelegateConfig()), an(t.currentTarget).data(n, e)), t && (e._activeTrigger["focusout" === t.type ? In : wn] = !1), e._isWithActiveTrigger() || (clearTimeout(e._timeout), e._hoverState = vn, e.config.delay && e.config.delay.hide ? e._timeout = setTimeout(function () {
        e._hoverState === vn && e.hide();
      }, e.config.delay.hide) : e.hide());
    }, t._isWithActiveTrigger = function () {
      for (var t in this._activeTrigger) if (this._activeTrigger[t]) return !0;

      return !1;
    }, t._getConfig = function (t) {
      return "number" == typeof (t = c({}, this.constructor.Default, an(this.element).data(), "object" == typeof t && t ? t : {})).delay && (t.delay = {
        show: t.delay,
        hide: t.delay
      }), "number" == typeof t.title && (t.title = t.title.toString()), "number" == typeof t.content && (t.content = t.content.toString()), gt.typeCheckConfig(ln, t, this.constructor.DefaultType), t;
    }, t._getDelegateConfig = function () {
      var t = {};
      if (this.config) for (var e in this.config) this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);
      return t;
    }, t._cleanTipClass = function () {
      var t = an(this.getTipElement()),
          e = t.attr("class").match(dn);
      null !== e && 0 < e.length && t.removeClass(e.join(""));
    }, t._handlePopperPlacementChange = function (t) {
      this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(t.placement));
    }, t._fixTransition = function () {
      var t = this.getTipElement(),
          e = this.config.animation;
      null === t.getAttribute("x-placement") && (an(t).removeClass(yn), this.config.animation = !1, this.hide(), this.show(), this.config.animation = e);
    }, i._jQueryInterface = function (n) {
      return this.each(function () {
        var t = an(this).data(cn),
            e = "object" == typeof n && n;

        if ((t || !/dispose|hide/.test(n)) && (t || (t = new i(this, e), an(this).data(cn, t)), "string" == typeof n)) {
          if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
          t[n]();
        }
      });
    }, s(i, null, [{
      key: "VERSION",
      get: function () {
        return "4.1.1";
      }
    }, {
      key: "Default",
      get: function () {
        return mn;
      }
    }, {
      key: "NAME",
      get: function () {
        return ln;
      }
    }, {
      key: "DATA_KEY",
      get: function () {
        return cn;
      }
    }, {
      key: "Event",
      get: function () {
        return En;
      }
    }, {
      key: "EVENT_KEY",
      get: function () {
        return fn;
      }
    }, {
      key: "DefaultType",
      get: function () {
        return pn;
      }
    }]), i;
  }(), an.fn[ln] = Sn._jQueryInterface, an.fn[ln].Constructor = Sn, an.fn[ln].noConflict = function () {
    return an.fn[ln] = hn, Sn._jQueryInterface;
  }, Sn),
      Ii = (Nn = "popover", Ln = "." + (kn = "bs.popover"), Pn = (On = e).fn[Nn], xn = "bs-popover", jn = new RegExp("(^|\\s)" + xn + "\\S+", "g"), Mn = c({}, wi.Default, {
    placement: "right",
    trigger: "click",
    content: "",
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
  }), Rn = c({}, wi.DefaultType, {
    content: "(string|element|function)"
  }), Hn = "fade", Fn = ".popover-header", Un = ".popover-body", Bn = {
    HIDE: "hide" + Ln,
    HIDDEN: "hidden" + Ln,
    SHOW: (Wn = "show") + Ln,
    SHOWN: "shown" + Ln,
    INSERTED: "inserted" + Ln,
    CLICK: "click" + Ln,
    FOCUSIN: "focusin" + Ln,
    FOCUSOUT: "focusout" + Ln,
    MOUSEENTER: "mouseenter" + Ln,
    MOUSELEAVE: "mouseleave" + Ln
  }, Kn = function (t) {
    var e, n;

    function i() {
      return t.apply(this, arguments) || this;
    }

    n = t, (e = i).prototype = Object.create(n.prototype), (e.prototype.constructor = e).__proto__ = n;
    var r = i.prototype;
    return r.isWithContent = function () {
      return this.getTitle() || this._getContent();
    }, r.addAttachmentClass = function (t) {
      On(this.getTipElement()).addClass(xn + "-" + t);
    }, r.getTipElement = function () {
      return this.tip = this.tip || On(this.config.template)[0], this.tip;
    }, r.setContent = function () {
      var t = On(this.getTipElement());
      this.setElementContent(t.find(Fn), this.getTitle());

      var e = this._getContent();

      "function" == typeof e && (e = e.call(this.element)), this.setElementContent(t.find(Un), e), t.removeClass(Hn + " " + Wn);
    }, r._getContent = function () {
      return this.element.getAttribute("data-content") || this.config.content;
    }, r._cleanTipClass = function () {
      var t = On(this.getTipElement()),
          e = t.attr("class").match(jn);
      null !== e && 0 < e.length && t.removeClass(e.join(""));
    }, i._jQueryInterface = function (n) {
      return this.each(function () {
        var t = On(this).data(kn),
            e = "object" == typeof n ? n : null;

        if ((t || !/destroy|hide/.test(n)) && (t || (t = new i(this, e), On(this).data(kn, t)), "string" == typeof n)) {
          if ("undefined" == typeof t[n]) throw new TypeError('No method named "' + n + '"');
          t[n]();
        }
      });
    }, s(i, null, [{
      key: "VERSION",
      get: function () {
        return "4.1.1";
      }
    }, {
      key: "Default",
      get: function () {
        return Mn;
      }
    }, {
      key: "NAME",
      get: function () {
        return Nn;
      }
    }, {
      key: "DATA_KEY",
      get: function () {
        return kn;
      }
    }, {
      key: "Event",
      get: function () {
        return Bn;
      }
    }, {
      key: "EVENT_KEY",
      get: function () {
        return Ln;
      }
    }, {
      key: "DefaultType",
      get: function () {
        return Rn;
      }
    }]), i;
  }(wi), On.fn[Nn] = Kn._jQueryInterface, On.fn[Nn].Constructor = Kn, On.fn[Nn].noConflict = function () {
    return On.fn[Nn] = Pn, Kn._jQueryInterface;
  }, Kn),
      Di = (Qn = "scrollspy", Gn = "." + (Yn = "bs.scrollspy"), qn = (Vn = e).fn[Qn], zn = {
    offset: 10,
    method: "auto",
    target: ""
  }, Xn = {
    offset: "number",
    method: "string",
    target: "(string|element)"
  }, Jn = {
    ACTIVATE: "activate" + Gn,
    SCROLL: "scroll" + Gn,
    LOAD_DATA_API: "load" + Gn + ".data-api"
  }, Zn = "dropdown-item", $n = "active", ti = {
    DATA_SPY: '[data-spy="scroll"]',
    ACTIVE: ".active",
    NAV_LIST_GROUP: ".nav, .list-group",
    NAV_LINKS: ".nav-link",
    NAV_ITEMS: ".nav-item",
    LIST_ITEMS: ".list-group-item",
    DROPDOWN: ".dropdown",
    DROPDOWN_ITEMS: ".dropdown-item",
    DROPDOWN_TOGGLE: ".dropdown-toggle"
  }, ei = "offset", ni = "position", ii = function () {
    function n(t, e) {
      var n = this;
      this._element = t, this._scrollElement = "BODY" === t.tagName ? window : t, this._config = this._getConfig(e), this._selector = this._config.target + " " + ti.NAV_LINKS + "," + this._config.target + " " + ti.LIST_ITEMS + "," + this._config.target + " " + ti.DROPDOWN_ITEMS, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, Vn(this._scrollElement).on(Jn.SCROLL, function (t) {
        return n._process(t);
      }), this.refresh(), this._process();
    }

    var t = n.prototype;
    return t.refresh = function () {
      var e = this,
          t = this._scrollElement === this._scrollElement.window ? ei : ni,
          r = "auto" === this._config.method ? t : this._config.method,
          o = r === ni ? this._getScrollTop() : 0;
      this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), Vn.makeArray(Vn(this._selector)).map(function (t) {
        var e,
            n = gt.getSelectorFromElement(t);

        if (n && (e = Vn(n)[0]), e) {
          var i = e.getBoundingClientRect();
          if (i.width || i.height) return [Vn(e)[r]().top + o, n];
        }

        return null;
      }).filter(function (t) {
        return t;
      }).sort(function (t, e) {
        return t[0] - e[0];
      }).forEach(function (t) {
        e._offsets.push(t[0]), e._targets.push(t[1]);
      });
    }, t.dispose = function () {
      Vn.removeData(this._element, Yn), Vn(this._scrollElement).off(Gn), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;
    }, t._getConfig = function (t) {
      if ("string" != typeof (t = c({}, zn, "object" == typeof t && t ? t : {})).target) {
        var e = Vn(t.target).attr("id");
        e || (e = gt.getUID(Qn), Vn(t.target).attr("id", e)), t.target = "#" + e;
      }

      return gt.typeCheckConfig(Qn, t, Xn), t;
    }, t._getScrollTop = function () {
      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
    }, t._getScrollHeight = function () {
      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    }, t._getOffsetHeight = function () {
      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
    }, t._process = function () {
      var t = this._getScrollTop() + this._config.offset,
          e = this._getScrollHeight(),
          n = this._config.offset + e - this._getOffsetHeight();

      if (this._scrollHeight !== e && this.refresh(), n <= t) {
        var i = this._targets[this._targets.length - 1];
        this._activeTarget !== i && this._activate(i);
      } else {
        if (this._activeTarget && t < this._offsets[0] && 0 < this._offsets[0]) return this._activeTarget = null, void this._clear();

        for (var r = this._offsets.length; r--;) {
          this._activeTarget !== this._targets[r] && t >= this._offsets[r] && ("undefined" == typeof this._offsets[r + 1] || t < this._offsets[r + 1]) && this._activate(this._targets[r]);
        }
      }
    }, t._activate = function (e) {
      this._activeTarget = e, this._clear();

      var t = this._selector.split(",");

      t = t.map(function (t) {
        return t + '[data-target="' + e + '"],' + t + '[href="' + e + '"]';
      });
      var n = Vn(t.join(","));
      n.hasClass(Zn) ? (n.closest(ti.DROPDOWN).find(ti.DROPDOWN_TOGGLE).addClass($n), n.addClass($n)) : (n.addClass($n), n.parents(ti.NAV_LIST_GROUP).prev(ti.NAV_LINKS + ", " + ti.LIST_ITEMS).addClass($n), n.parents(ti.NAV_LIST_GROUP).prev(ti.NAV_ITEMS).children(ti.NAV_LINKS).addClass($n)), Vn(this._scrollElement).trigger(Jn.ACTIVATE, {
        relatedTarget: e
      });
    }, t._clear = function () {
      Vn(this._selector).filter(ti.ACTIVE).removeClass($n);
    }, n._jQueryInterface = function (e) {
      return this.each(function () {
        var t = Vn(this).data(Yn);

        if (t || (t = new n(this, "object" == typeof e && e), Vn(this).data(Yn, t)), "string" == typeof e) {
          if ("undefined" == typeof t[e]) throw new TypeError('No method named "' + e + '"');
          t[e]();
        }
      });
    }, s(n, null, [{
      key: "VERSION",
      get: function () {
        return "4.1.1";
      }
    }, {
      key: "Default",
      get: function () {
        return zn;
      }
    }]), n;
  }(), Vn(window).on(Jn.LOAD_DATA_API, function () {
    for (var t = Vn.makeArray(Vn(ti.DATA_SPY)), e = t.length; e--;) {
      var n = Vn(t[e]);

      ii._jQueryInterface.call(n, n.data());
    }
  }), Vn.fn[Qn] = ii._jQueryInterface, Vn.fn[Qn].Constructor = ii, Vn.fn[Qn].noConflict = function () {
    return Vn.fn[Qn] = qn, ii._jQueryInterface;
  }, ii),
      Ai = (si = "." + (oi = "bs.tab"), ai = (ri = e).fn.tab, li = {
    HIDE: "hide" + si,
    HIDDEN: "hidden" + si,
    SHOW: "show" + si,
    SHOWN: "shown" + si,
    CLICK_DATA_API: "click" + si + ".data-api"
  }, ci = "dropdown-menu", fi = "active", hi = "disabled", ui = "fade", di = "show", pi = ".dropdown", gi = ".nav, .list-group", mi = ".active", _i = "> li > .active", vi = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]', Ei = ".dropdown-toggle", yi = "> .dropdown-menu .active", bi = function () {
    function i(t) {
      this._element = t;
    }

    var t = i.prototype;
    return t.show = function () {
      var n = this;

      if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && ri(this._element).hasClass(fi) || ri(this._element).hasClass(hi))) {
        var t,
            i,
            e = ri(this._element).closest(gi)[0],
            r = gt.getSelectorFromElement(this._element);

        if (e) {
          var o = "UL" === e.nodeName ? _i : mi;
          i = (i = ri.makeArray(ri(e).find(o)))[i.length - 1];
        }

        var s = ri.Event(li.HIDE, {
          relatedTarget: this._element
        }),
            a = ri.Event(li.SHOW, {
          relatedTarget: i
        });

        if (i && ri(i).trigger(s), ri(this._element).trigger(a), !a.isDefaultPrevented() && !s.isDefaultPrevented()) {
          r && (t = ri(r)[0]), this._activate(this._element, e);

          var l = function () {
            var t = ri.Event(li.HIDDEN, {
              relatedTarget: n._element
            }),
                e = ri.Event(li.SHOWN, {
              relatedTarget: i
            });
            ri(i).trigger(t), ri(n._element).trigger(e);
          };

          t ? this._activate(t, t.parentNode, l) : l();
        }
      }
    }, t.dispose = function () {
      ri.removeData(this._element, oi), this._element = null;
    }, t._activate = function (t, e, n) {
      var i = this,
          r = ("UL" === e.nodeName ? ri(e).find(_i) : ri(e).children(mi))[0],
          o = n && r && ri(r).hasClass(ui),
          s = function () {
        return i._transitionComplete(t, r, n);
      };

      if (r && o) {
        var a = gt.getTransitionDurationFromElement(r);
        ri(r).one(gt.TRANSITION_END, s).emulateTransitionEnd(a);
      } else s();
    }, t._transitionComplete = function (t, e, n) {
      if (e) {
        ri(e).removeClass(di + " " + fi);
        var i = ri(e.parentNode).find(yi)[0];
        i && ri(i).removeClass(fi), "tab" === e.getAttribute("role") && e.setAttribute("aria-selected", !1);
      }

      if (ri(t).addClass(fi), "tab" === t.getAttribute("role") && t.setAttribute("aria-selected", !0), gt.reflow(t), ri(t).addClass(di), t.parentNode && ri(t.parentNode).hasClass(ci)) {
        var r = ri(t).closest(pi)[0];
        r && ri(r).find(Ei).addClass(fi), t.setAttribute("aria-expanded", !0);
      }

      n && n();
    }, i._jQueryInterface = function (n) {
      return this.each(function () {
        var t = ri(this),
            e = t.data(oi);

        if (e || (e = new i(this), t.data(oi, e)), "string" == typeof n) {
          if ("undefined" == typeof e[n]) throw new TypeError('No method named "' + n + '"');
          e[n]();
        }
      });
    }, s(i, null, [{
      key: "VERSION",
      get: function () {
        return "4.1.1";
      }
    }]), i;
  }(), ri(document).on(li.CLICK_DATA_API, vi, function (t) {
    t.preventDefault(), bi._jQueryInterface.call(ri(this), "show");
  }), ri.fn.tab = bi._jQueryInterface, ri.fn.tab.Constructor = bi, ri.fn.tab.noConflict = function () {
    return ri.fn.tab = ai, bi._jQueryInterface;
  }, bi);

  !function (t) {
    if ("undefined" == typeof t) throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");
    var e = t.fn.jquery.split(" ")[0].split(".");
    if (e[0] < 2 && e[1] < 9 || 1 === e[0] && 9 === e[1] && e[2] < 1 || 4 <= e[0]) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
  }(e), t.Util = gt, t.Alert = mt, t.Button = _t, t.Carousel = vt, t.Collapse = Et, t.Dropdown = Ti, t.Modal = Ci, t.Popover = Ii, t.Scrollspy = Di, t.Tab = Ai, t.Tooltip = wi, Object.defineProperty(t, "__esModule", {
    value: !0
  });
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./src/limitless-2.0.1/global_assets/js/main/jquery.min.js":
/*!*****************************************************************!*\
  !*** ./src/limitless-2.0.1/global_assets/js/main/jquery.min.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! jQuery v3.3.1 | (c) JS Foundation and other contributors | jquery.org/license */
!function (e, t) {
  "use strict";

   true && "object" == typeof module.exports ? module.exports = e.document ? t(e, !0) : function (e) {
    if (!e.document) throw new Error("jQuery requires a window with a document");
    return t(e);
  } : t(e);
}("undefined" != typeof window ? window : this, function (e, t) {
  "use strict";

  var n = [],
      r = e.document,
      i = Object.getPrototypeOf,
      o = n.slice,
      a = n.concat,
      s = n.push,
      u = n.indexOf,
      l = {},
      c = l.toString,
      f = l.hasOwnProperty,
      p = f.toString,
      d = p.call(Object),
      h = {},
      g = function e(t) {
    return "function" == typeof t && "number" != typeof t.nodeType;
  },
      y = function e(t) {
    return null != t && t === t.window;
  },
      v = {
    type: !0,
    src: !0,
    noModule: !0
  };

  function m(e, t, n) {
    var i,
        o = (t = t || r).createElement("script");
    if (o.text = e, n) for (i in v) n[i] && (o[i] = n[i]);
    t.head.appendChild(o).parentNode.removeChild(o);
  }

  function x(e) {
    return null == e ? e + "" : "object" == typeof e || "function" == typeof e ? l[c.call(e)] || "object" : typeof e;
  }

  var b = "3.3.1",
      w = function (e, t) {
    return new w.fn.init(e, t);
  },
      T = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

  w.fn = w.prototype = {
    jquery: "3.3.1",
    constructor: w,
    length: 0,
    toArray: function () {
      return o.call(this);
    },
    get: function (e) {
      return null == e ? o.call(this) : e < 0 ? this[e + this.length] : this[e];
    },
    pushStack: function (e) {
      var t = w.merge(this.constructor(), e);
      return t.prevObject = this, t;
    },
    each: function (e) {
      return w.each(this, e);
    },
    map: function (e) {
      return this.pushStack(w.map(this, function (t, n) {
        return e.call(t, n, t);
      }));
    },
    slice: function () {
      return this.pushStack(o.apply(this, arguments));
    },
    first: function () {
      return this.eq(0);
    },
    last: function () {
      return this.eq(-1);
    },
    eq: function (e) {
      var t = this.length,
          n = +e + (e < 0 ? t : 0);
      return this.pushStack(n >= 0 && n < t ? [this[n]] : []);
    },
    end: function () {
      return this.prevObject || this.constructor();
    },
    push: s,
    sort: n.sort,
    splice: n.splice
  }, w.extend = w.fn.extend = function () {
    var e,
        t,
        n,
        r,
        i,
        o,
        a = arguments[0] || {},
        s = 1,
        u = arguments.length,
        l = !1;

    for ("boolean" == typeof a && (l = a, a = arguments[s] || {}, s++), "object" == typeof a || g(a) || (a = {}), s === u && (a = this, s--); s < u; s++) if (null != (e = arguments[s])) for (t in e) n = a[t], a !== (r = e[t]) && (l && r && (w.isPlainObject(r) || (i = Array.isArray(r))) ? (i ? (i = !1, o = n && Array.isArray(n) ? n : []) : o = n && w.isPlainObject(n) ? n : {}, a[t] = w.extend(l, o, r)) : void 0 !== r && (a[t] = r));

    return a;
  }, w.extend({
    expando: "jQuery" + ("3.3.1" + Math.random()).replace(/\D/g, ""),
    isReady: !0,
    error: function (e) {
      throw new Error(e);
    },
    noop: function () {},
    isPlainObject: function (e) {
      var t, n;
      return !(!e || "[object Object]" !== c.call(e)) && (!(t = i(e)) || "function" == typeof (n = f.call(t, "constructor") && t.constructor) && p.call(n) === d);
    },
    isEmptyObject: function (e) {
      var t;

      for (t in e) return !1;

      return !0;
    },
    globalEval: function (e) {
      m(e);
    },
    each: function (e, t) {
      var n,
          r = 0;

      if (C(e)) {
        for (n = e.length; r < n; r++) if (!1 === t.call(e[r], r, e[r])) break;
      } else for (r in e) if (!1 === t.call(e[r], r, e[r])) break;

      return e;
    },
    trim: function (e) {
      return null == e ? "" : (e + "").replace(T, "");
    },
    makeArray: function (e, t) {
      var n = t || [];
      return null != e && (C(Object(e)) ? w.merge(n, "string" == typeof e ? [e] : e) : s.call(n, e)), n;
    },
    inArray: function (e, t, n) {
      return null == t ? -1 : u.call(t, e, n);
    },
    merge: function (e, t) {
      for (var n = +t.length, r = 0, i = e.length; r < n; r++) e[i++] = t[r];

      return e.length = i, e;
    },
    grep: function (e, t, n) {
      for (var r, i = [], o = 0, a = e.length, s = !n; o < a; o++) (r = !t(e[o], o)) !== s && i.push(e[o]);

      return i;
    },
    map: function (e, t, n) {
      var r,
          i,
          o = 0,
          s = [];
      if (C(e)) for (r = e.length; o < r; o++) null != (i = t(e[o], o, n)) && s.push(i);else for (o in e) null != (i = t(e[o], o, n)) && s.push(i);
      return a.apply([], s);
    },
    guid: 1,
    support: h
  }), "function" == typeof Symbol && (w.fn[Symbol.iterator] = n[Symbol.iterator]), w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (e, t) {
    l["[object " + t + "]"] = t.toLowerCase();
  });

  function C(e) {
    var t = !!e && "length" in e && e.length,
        n = x(e);
    return !g(e) && !y(e) && ("array" === n || 0 === t || "number" == typeof t && t > 0 && t - 1 in e);
  }

  var E = function (e) {
    var t,
        n,
        r,
        i,
        o,
        a,
        s,
        u,
        l,
        c,
        f,
        p,
        d,
        h,
        g,
        y,
        v,
        m,
        x,
        b = "sizzle" + 1 * new Date(),
        w = e.document,
        T = 0,
        C = 0,
        E = ae(),
        k = ae(),
        S = ae(),
        D = function (e, t) {
      return e === t && (f = !0), 0;
    },
        N = {}.hasOwnProperty,
        A = [],
        j = A.pop,
        q = A.push,
        L = A.push,
        H = A.slice,
        O = function (e, t) {
      for (var n = 0, r = e.length; n < r; n++) if (e[n] === t) return n;

      return -1;
    },
        P = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
        M = "[\\x20\\t\\r\\n\\f]",
        R = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
        I = "\\[" + M + "*(" + R + ")(?:" + M + "*([*^$|!~]?=)" + M + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + R + "))|)" + M + "*\\]",
        W = ":(" + R + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + I + ")*)|.*)\\)|)",
        $ = new RegExp(M + "+", "g"),
        B = new RegExp("^" + M + "+|((?:^|[^\\\\])(?:\\\\.)*)" + M + "+$", "g"),
        F = new RegExp("^" + M + "*," + M + "*"),
        _ = new RegExp("^" + M + "*([>+~]|" + M + ")" + M + "*"),
        z = new RegExp("=" + M + "*([^\\]'\"]*?)" + M + "*\\]", "g"),
        X = new RegExp(W),
        U = new RegExp("^" + R + "$"),
        V = {
      ID: new RegExp("^#(" + R + ")"),
      CLASS: new RegExp("^\\.(" + R + ")"),
      TAG: new RegExp("^(" + R + "|[*])"),
      ATTR: new RegExp("^" + I),
      PSEUDO: new RegExp("^" + W),
      CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + M + "*(even|odd|(([+-]|)(\\d*)n|)" + M + "*(?:([+-]|)" + M + "*(\\d+)|))" + M + "*\\)|)", "i"),
      bool: new RegExp("^(?:" + P + ")$", "i"),
      needsContext: new RegExp("^" + M + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + M + "*((?:-\\d)?\\d*)" + M + "*\\)|)(?=[^-]|$)", "i")
    },
        G = /^(?:input|select|textarea|button)$/i,
        Y = /^h\d$/i,
        Q = /^[^{]+\{\s*\[native \w/,
        J = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        K = /[+~]/,
        Z = new RegExp("\\\\([\\da-f]{1,6}" + M + "?|(" + M + ")|.)", "ig"),
        ee = function (e, t, n) {
      var r = "0x" + t - 65536;
      return r !== r || n ? t : r < 0 ? String.fromCharCode(r + 65536) : String.fromCharCode(r >> 10 | 55296, 1023 & r | 56320);
    },
        te = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        ne = function (e, t) {
      return t ? "\0" === e ? "\ufffd" : e.slice(0, -1) + "\\" + e.charCodeAt(e.length - 1).toString(16) + " " : "\\" + e;
    },
        re = function () {
      p();
    },
        ie = me(function (e) {
      return !0 === e.disabled && ("form" in e || "label" in e);
    }, {
      dir: "parentNode",
      next: "legend"
    });

    try {
      L.apply(A = H.call(w.childNodes), w.childNodes), A[w.childNodes.length].nodeType;
    } catch (e) {
      L = {
        apply: A.length ? function (e, t) {
          q.apply(e, H.call(t));
        } : function (e, t) {
          var n = e.length,
              r = 0;

          while (e[n++] = t[r++]);

          e.length = n - 1;
        }
      };
    }

    function oe(e, t, r, i) {
      var o,
          s,
          l,
          c,
          f,
          h,
          v,
          m = t && t.ownerDocument,
          T = t ? t.nodeType : 9;
      if (r = r || [], "string" != typeof e || !e || 1 !== T && 9 !== T && 11 !== T) return r;

      if (!i && ((t ? t.ownerDocument || t : w) !== d && p(t), t = t || d, g)) {
        if (11 !== T && (f = J.exec(e))) if (o = f[1]) {
          if (9 === T) {
            if (!(l = t.getElementById(o))) return r;
            if (l.id === o) return r.push(l), r;
          } else if (m && (l = m.getElementById(o)) && x(t, l) && l.id === o) return r.push(l), r;
        } else {
          if (f[2]) return L.apply(r, t.getElementsByTagName(e)), r;
          if ((o = f[3]) && n.getElementsByClassName && t.getElementsByClassName) return L.apply(r, t.getElementsByClassName(o)), r;
        }

        if (n.qsa && !S[e + " "] && (!y || !y.test(e))) {
          if (1 !== T) m = t, v = e;else if ("object" !== t.nodeName.toLowerCase()) {
            (c = t.getAttribute("id")) ? c = c.replace(te, ne) : t.setAttribute("id", c = b), s = (h = a(e)).length;

            while (s--) h[s] = "#" + c + " " + ve(h[s]);

            v = h.join(","), m = K.test(e) && ge(t.parentNode) || t;
          }
          if (v) try {
            return L.apply(r, m.querySelectorAll(v)), r;
          } catch (e) {} finally {
            c === b && t.removeAttribute("id");
          }
        }
      }

      return u(e.replace(B, "$1"), t, r, i);
    }

    function ae() {
      var e = [];

      function t(n, i) {
        return e.push(n + " ") > r.cacheLength && delete t[e.shift()], t[n + " "] = i;
      }

      return t;
    }

    function se(e) {
      return e[b] = !0, e;
    }

    function ue(e) {
      var t = d.createElement("fieldset");

      try {
        return !!e(t);
      } catch (e) {
        return !1;
      } finally {
        t.parentNode && t.parentNode.removeChild(t), t = null;
      }
    }

    function le(e, t) {
      var n = e.split("|"),
          i = n.length;

      while (i--) r.attrHandle[n[i]] = t;
    }

    function ce(e, t) {
      var n = t && e,
          r = n && 1 === e.nodeType && 1 === t.nodeType && e.sourceIndex - t.sourceIndex;
      if (r) return r;
      if (n) while (n = n.nextSibling) if (n === t) return -1;
      return e ? 1 : -1;
    }

    function fe(e) {
      return function (t) {
        return "input" === t.nodeName.toLowerCase() && t.type === e;
      };
    }

    function pe(e) {
      return function (t) {
        var n = t.nodeName.toLowerCase();
        return ("input" === n || "button" === n) && t.type === e;
      };
    }

    function de(e) {
      return function (t) {
        return "form" in t ? t.parentNode && !1 === t.disabled ? "label" in t ? "label" in t.parentNode ? t.parentNode.disabled === e : t.disabled === e : t.isDisabled === e || t.isDisabled !== !e && ie(t) === e : t.disabled === e : "label" in t && t.disabled === e;
      };
    }

    function he(e) {
      return se(function (t) {
        return t = +t, se(function (n, r) {
          var i,
              o = e([], n.length, t),
              a = o.length;

          while (a--) n[i = o[a]] && (n[i] = !(r[i] = n[i]));
        });
      });
    }

    function ge(e) {
      return e && "undefined" != typeof e.getElementsByTagName && e;
    }

    n = oe.support = {}, o = oe.isXML = function (e) {
      var t = e && (e.ownerDocument || e).documentElement;
      return !!t && "HTML" !== t.nodeName;
    }, p = oe.setDocument = function (e) {
      var t,
          i,
          a = e ? e.ownerDocument || e : w;
      return a !== d && 9 === a.nodeType && a.documentElement ? (d = a, h = d.documentElement, g = !o(d), w !== d && (i = d.defaultView) && i.top !== i && (i.addEventListener ? i.addEventListener("unload", re, !1) : i.attachEvent && i.attachEvent("onunload", re)), n.attributes = ue(function (e) {
        return e.className = "i", !e.getAttribute("className");
      }), n.getElementsByTagName = ue(function (e) {
        return e.appendChild(d.createComment("")), !e.getElementsByTagName("*").length;
      }), n.getElementsByClassName = Q.test(d.getElementsByClassName), n.getById = ue(function (e) {
        return h.appendChild(e).id = b, !d.getElementsByName || !d.getElementsByName(b).length;
      }), n.getById ? (r.filter.ID = function (e) {
        var t = e.replace(Z, ee);
        return function (e) {
          return e.getAttribute("id") === t;
        };
      }, r.find.ID = function (e, t) {
        if ("undefined" != typeof t.getElementById && g) {
          var n = t.getElementById(e);
          return n ? [n] : [];
        }
      }) : (r.filter.ID = function (e) {
        var t = e.replace(Z, ee);
        return function (e) {
          var n = "undefined" != typeof e.getAttributeNode && e.getAttributeNode("id");
          return n && n.value === t;
        };
      }, r.find.ID = function (e, t) {
        if ("undefined" != typeof t.getElementById && g) {
          var n,
              r,
              i,
              o = t.getElementById(e);

          if (o) {
            if ((n = o.getAttributeNode("id")) && n.value === e) return [o];
            i = t.getElementsByName(e), r = 0;

            while (o = i[r++]) if ((n = o.getAttributeNode("id")) && n.value === e) return [o];
          }

          return [];
        }
      }), r.find.TAG = n.getElementsByTagName ? function (e, t) {
        return "undefined" != typeof t.getElementsByTagName ? t.getElementsByTagName(e) : n.qsa ? t.querySelectorAll(e) : void 0;
      } : function (e, t) {
        var n,
            r = [],
            i = 0,
            o = t.getElementsByTagName(e);

        if ("*" === e) {
          while (n = o[i++]) 1 === n.nodeType && r.push(n);

          return r;
        }

        return o;
      }, r.find.CLASS = n.getElementsByClassName && function (e, t) {
        if ("undefined" != typeof t.getElementsByClassName && g) return t.getElementsByClassName(e);
      }, v = [], y = [], (n.qsa = Q.test(d.querySelectorAll)) && (ue(function (e) {
        h.appendChild(e).innerHTML = "<a id='" + b + "'></a><select id='" + b + "-\r\\' msallowcapture=''><option selected=''></option></select>", e.querySelectorAll("[msallowcapture^='']").length && y.push("[*^$]=" + M + "*(?:''|\"\")"), e.querySelectorAll("[selected]").length || y.push("\\[" + M + "*(?:value|" + P + ")"), e.querySelectorAll("[id~=" + b + "-]").length || y.push("~="), e.querySelectorAll(":checked").length || y.push(":checked"), e.querySelectorAll("a#" + b + "+*").length || y.push(".#.+[+~]");
      }), ue(function (e) {
        e.innerHTML = "<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";
        var t = d.createElement("input");
        t.setAttribute("type", "hidden"), e.appendChild(t).setAttribute("name", "D"), e.querySelectorAll("[name=d]").length && y.push("name" + M + "*[*^$|!~]?="), 2 !== e.querySelectorAll(":enabled").length && y.push(":enabled", ":disabled"), h.appendChild(e).disabled = !0, 2 !== e.querySelectorAll(":disabled").length && y.push(":enabled", ":disabled"), e.querySelectorAll("*,:x"), y.push(",.*:");
      })), (n.matchesSelector = Q.test(m = h.matches || h.webkitMatchesSelector || h.mozMatchesSelector || h.oMatchesSelector || h.msMatchesSelector)) && ue(function (e) {
        n.disconnectedMatch = m.call(e, "*"), m.call(e, "[s!='']:x"), v.push("!=", W);
      }), y = y.length && new RegExp(y.join("|")), v = v.length && new RegExp(v.join("|")), t = Q.test(h.compareDocumentPosition), x = t || Q.test(h.contains) ? function (e, t) {
        var n = 9 === e.nodeType ? e.documentElement : e,
            r = t && t.parentNode;
        return e === r || !(!r || 1 !== r.nodeType || !(n.contains ? n.contains(r) : e.compareDocumentPosition && 16 & e.compareDocumentPosition(r)));
      } : function (e, t) {
        if (t) while (t = t.parentNode) if (t === e) return !0;
        return !1;
      }, D = t ? function (e, t) {
        if (e === t) return f = !0, 0;
        var r = !e.compareDocumentPosition - !t.compareDocumentPosition;
        return r || (1 & (r = (e.ownerDocument || e) === (t.ownerDocument || t) ? e.compareDocumentPosition(t) : 1) || !n.sortDetached && t.compareDocumentPosition(e) === r ? e === d || e.ownerDocument === w && x(w, e) ? -1 : t === d || t.ownerDocument === w && x(w, t) ? 1 : c ? O(c, e) - O(c, t) : 0 : 4 & r ? -1 : 1);
      } : function (e, t) {
        if (e === t) return f = !0, 0;
        var n,
            r = 0,
            i = e.parentNode,
            o = t.parentNode,
            a = [e],
            s = [t];
        if (!i || !o) return e === d ? -1 : t === d ? 1 : i ? -1 : o ? 1 : c ? O(c, e) - O(c, t) : 0;
        if (i === o) return ce(e, t);
        n = e;

        while (n = n.parentNode) a.unshift(n);

        n = t;

        while (n = n.parentNode) s.unshift(n);

        while (a[r] === s[r]) r++;

        return r ? ce(a[r], s[r]) : a[r] === w ? -1 : s[r] === w ? 1 : 0;
      }, d) : d;
    }, oe.matches = function (e, t) {
      return oe(e, null, null, t);
    }, oe.matchesSelector = function (e, t) {
      if ((e.ownerDocument || e) !== d && p(e), t = t.replace(z, "='$1']"), n.matchesSelector && g && !S[t + " "] && (!v || !v.test(t)) && (!y || !y.test(t))) try {
        var r = m.call(e, t);
        if (r || n.disconnectedMatch || e.document && 11 !== e.document.nodeType) return r;
      } catch (e) {}
      return oe(t, d, null, [e]).length > 0;
    }, oe.contains = function (e, t) {
      return (e.ownerDocument || e) !== d && p(e), x(e, t);
    }, oe.attr = function (e, t) {
      (e.ownerDocument || e) !== d && p(e);
      var i = r.attrHandle[t.toLowerCase()],
          o = i && N.call(r.attrHandle, t.toLowerCase()) ? i(e, t, !g) : void 0;
      return void 0 !== o ? o : n.attributes || !g ? e.getAttribute(t) : (o = e.getAttributeNode(t)) && o.specified ? o.value : null;
    }, oe.escape = function (e) {
      return (e + "").replace(te, ne);
    }, oe.error = function (e) {
      throw new Error("Syntax error, unrecognized expression: " + e);
    }, oe.uniqueSort = function (e) {
      var t,
          r = [],
          i = 0,
          o = 0;

      if (f = !n.detectDuplicates, c = !n.sortStable && e.slice(0), e.sort(D), f) {
        while (t = e[o++]) t === e[o] && (i = r.push(o));

        while (i--) e.splice(r[i], 1);
      }

      return c = null, e;
    }, i = oe.getText = function (e) {
      var t,
          n = "",
          r = 0,
          o = e.nodeType;

      if (o) {
        if (1 === o || 9 === o || 11 === o) {
          if ("string" == typeof e.textContent) return e.textContent;

          for (e = e.firstChild; e; e = e.nextSibling) n += i(e);
        } else if (3 === o || 4 === o) return e.nodeValue;
      } else while (t = e[r++]) n += i(t);

      return n;
    }, (r = oe.selectors = {
      cacheLength: 50,
      createPseudo: se,
      match: V,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: !0
        },
        " ": {
          dir: "parentNode"
        },
        "+": {
          dir: "previousSibling",
          first: !0
        },
        "~": {
          dir: "previousSibling"
        }
      },
      preFilter: {
        ATTR: function (e) {
          return e[1] = e[1].replace(Z, ee), e[3] = (e[3] || e[4] || e[5] || "").replace(Z, ee), "~=" === e[2] && (e[3] = " " + e[3] + " "), e.slice(0, 4);
        },
        CHILD: function (e) {
          return e[1] = e[1].toLowerCase(), "nth" === e[1].slice(0, 3) ? (e[3] || oe.error(e[0]), e[4] = +(e[4] ? e[5] + (e[6] || 1) : 2 * ("even" === e[3] || "odd" === e[3])), e[5] = +(e[7] + e[8] || "odd" === e[3])) : e[3] && oe.error(e[0]), e;
        },
        PSEUDO: function (e) {
          var t,
              n = !e[6] && e[2];
          return V.CHILD.test(e[0]) ? null : (e[3] ? e[2] = e[4] || e[5] || "" : n && X.test(n) && (t = a(n, !0)) && (t = n.indexOf(")", n.length - t) - n.length) && (e[0] = e[0].slice(0, t), e[2] = n.slice(0, t)), e.slice(0, 3));
        }
      },
      filter: {
        TAG: function (e) {
          var t = e.replace(Z, ee).toLowerCase();
          return "*" === e ? function () {
            return !0;
          } : function (e) {
            return e.nodeName && e.nodeName.toLowerCase() === t;
          };
        },
        CLASS: function (e) {
          var t = E[e + " "];
          return t || (t = new RegExp("(^|" + M + ")" + e + "(" + M + "|$)")) && E(e, function (e) {
            return t.test("string" == typeof e.className && e.className || "undefined" != typeof e.getAttribute && e.getAttribute("class") || "");
          });
        },
        ATTR: function (e, t, n) {
          return function (r) {
            var i = oe.attr(r, e);
            return null == i ? "!=" === t : !t || (i += "", "=" === t ? i === n : "!=" === t ? i !== n : "^=" === t ? n && 0 === i.indexOf(n) : "*=" === t ? n && i.indexOf(n) > -1 : "$=" === t ? n && i.slice(-n.length) === n : "~=" === t ? (" " + i.replace($, " ") + " ").indexOf(n) > -1 : "|=" === t && (i === n || i.slice(0, n.length + 1) === n + "-"));
          };
        },
        CHILD: function (e, t, n, r, i) {
          var o = "nth" !== e.slice(0, 3),
              a = "last" !== e.slice(-4),
              s = "of-type" === t;
          return 1 === r && 0 === i ? function (e) {
            return !!e.parentNode;
          } : function (t, n, u) {
            var l,
                c,
                f,
                p,
                d,
                h,
                g = o !== a ? "nextSibling" : "previousSibling",
                y = t.parentNode,
                v = s && t.nodeName.toLowerCase(),
                m = !u && !s,
                x = !1;

            if (y) {
              if (o) {
                while (g) {
                  p = t;

                  while (p = p[g]) if (s ? p.nodeName.toLowerCase() === v : 1 === p.nodeType) return !1;

                  h = g = "only" === e && !h && "nextSibling";
                }

                return !0;
              }

              if (h = [a ? y.firstChild : y.lastChild], a && m) {
                x = (d = (l = (c = (f = (p = y)[b] || (p[b] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] || [])[0] === T && l[1]) && l[2], p = d && y.childNodes[d];

                while (p = ++d && p && p[g] || (x = d = 0) || h.pop()) if (1 === p.nodeType && ++x && p === t) {
                  c[e] = [T, d, x];
                  break;
                }
              } else if (m && (x = d = (l = (c = (f = (p = t)[b] || (p[b] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] || [])[0] === T && l[1]), !1 === x) while (p = ++d && p && p[g] || (x = d = 0) || h.pop()) if ((s ? p.nodeName.toLowerCase() === v : 1 === p.nodeType) && ++x && (m && ((c = (f = p[b] || (p[b] = {}))[p.uniqueID] || (f[p.uniqueID] = {}))[e] = [T, x]), p === t)) break;

              return (x -= i) === r || x % r == 0 && x / r >= 0;
            }
          };
        },
        PSEUDO: function (e, t) {
          var n,
              i = r.pseudos[e] || r.setFilters[e.toLowerCase()] || oe.error("unsupported pseudo: " + e);
          return i[b] ? i(t) : i.length > 1 ? (n = [e, e, "", t], r.setFilters.hasOwnProperty(e.toLowerCase()) ? se(function (e, n) {
            var r,
                o = i(e, t),
                a = o.length;

            while (a--) e[r = O(e, o[a])] = !(n[r] = o[a]);
          }) : function (e) {
            return i(e, 0, n);
          }) : i;
        }
      },
      pseudos: {
        not: se(function (e) {
          var t = [],
              n = [],
              r = s(e.replace(B, "$1"));
          return r[b] ? se(function (e, t, n, i) {
            var o,
                a = r(e, null, i, []),
                s = e.length;

            while (s--) (o = a[s]) && (e[s] = !(t[s] = o));
          }) : function (e, i, o) {
            return t[0] = e, r(t, null, o, n), t[0] = null, !n.pop();
          };
        }),
        has: se(function (e) {
          return function (t) {
            return oe(e, t).length > 0;
          };
        }),
        contains: se(function (e) {
          return e = e.replace(Z, ee), function (t) {
            return (t.textContent || t.innerText || i(t)).indexOf(e) > -1;
          };
        }),
        lang: se(function (e) {
          return U.test(e || "") || oe.error("unsupported lang: " + e), e = e.replace(Z, ee).toLowerCase(), function (t) {
            var n;

            do {
              if (n = g ? t.lang : t.getAttribute("xml:lang") || t.getAttribute("lang")) return (n = n.toLowerCase()) === e || 0 === n.indexOf(e + "-");
            } while ((t = t.parentNode) && 1 === t.nodeType);

            return !1;
          };
        }),
        target: function (t) {
          var n = e.location && e.location.hash;
          return n && n.slice(1) === t.id;
        },
        root: function (e) {
          return e === h;
        },
        focus: function (e) {
          return e === d.activeElement && (!d.hasFocus || d.hasFocus()) && !!(e.type || e.href || ~e.tabIndex);
        },
        enabled: de(!1),
        disabled: de(!0),
        checked: function (e) {
          var t = e.nodeName.toLowerCase();
          return "input" === t && !!e.checked || "option" === t && !!e.selected;
        },
        selected: function (e) {
          return e.parentNode && e.parentNode.selectedIndex, !0 === e.selected;
        },
        empty: function (e) {
          for (e = e.firstChild; e; e = e.nextSibling) if (e.nodeType < 6) return !1;

          return !0;
        },
        parent: function (e) {
          return !r.pseudos.empty(e);
        },
        header: function (e) {
          return Y.test(e.nodeName);
        },
        input: function (e) {
          return G.test(e.nodeName);
        },
        button: function (e) {
          var t = e.nodeName.toLowerCase();
          return "input" === t && "button" === e.type || "button" === t;
        },
        text: function (e) {
          var t;
          return "input" === e.nodeName.toLowerCase() && "text" === e.type && (null == (t = e.getAttribute("type")) || "text" === t.toLowerCase());
        },
        first: he(function () {
          return [0];
        }),
        last: he(function (e, t) {
          return [t - 1];
        }),
        eq: he(function (e, t, n) {
          return [n < 0 ? n + t : n];
        }),
        even: he(function (e, t) {
          for (var n = 0; n < t; n += 2) e.push(n);

          return e;
        }),
        odd: he(function (e, t) {
          for (var n = 1; n < t; n += 2) e.push(n);

          return e;
        }),
        lt: he(function (e, t, n) {
          for (var r = n < 0 ? n + t : n; --r >= 0;) e.push(r);

          return e;
        }),
        gt: he(function (e, t, n) {
          for (var r = n < 0 ? n + t : n; ++r < t;) e.push(r);

          return e;
        })
      }
    }).pseudos.nth = r.pseudos.eq;

    for (t in {
      radio: !0,
      checkbox: !0,
      file: !0,
      password: !0,
      image: !0
    }) r.pseudos[t] = fe(t);

    for (t in {
      submit: !0,
      reset: !0
    }) r.pseudos[t] = pe(t);

    function ye() {}

    ye.prototype = r.filters = r.pseudos, r.setFilters = new ye(), a = oe.tokenize = function (e, t) {
      var n,
          i,
          o,
          a,
          s,
          u,
          l,
          c = k[e + " "];
      if (c) return t ? 0 : c.slice(0);
      s = e, u = [], l = r.preFilter;

      while (s) {
        n && !(i = F.exec(s)) || (i && (s = s.slice(i[0].length) || s), u.push(o = [])), n = !1, (i = _.exec(s)) && (n = i.shift(), o.push({
          value: n,
          type: i[0].replace(B, " ")
        }), s = s.slice(n.length));

        for (a in r.filter) !(i = V[a].exec(s)) || l[a] && !(i = l[a](i)) || (n = i.shift(), o.push({
          value: n,
          type: a,
          matches: i
        }), s = s.slice(n.length));

        if (!n) break;
      }

      return t ? s.length : s ? oe.error(e) : k(e, u).slice(0);
    };

    function ve(e) {
      for (var t = 0, n = e.length, r = ""; t < n; t++) r += e[t].value;

      return r;
    }

    function me(e, t, n) {
      var r = t.dir,
          i = t.next,
          o = i || r,
          a = n && "parentNode" === o,
          s = C++;
      return t.first ? function (t, n, i) {
        while (t = t[r]) if (1 === t.nodeType || a) return e(t, n, i);

        return !1;
      } : function (t, n, u) {
        var l,
            c,
            f,
            p = [T, s];

        if (u) {
          while (t = t[r]) if ((1 === t.nodeType || a) && e(t, n, u)) return !0;
        } else while (t = t[r]) if (1 === t.nodeType || a) if (f = t[b] || (t[b] = {}), c = f[t.uniqueID] || (f[t.uniqueID] = {}), i && i === t.nodeName.toLowerCase()) t = t[r] || t;else {
          if ((l = c[o]) && l[0] === T && l[1] === s) return p[2] = l[2];
          if (c[o] = p, p[2] = e(t, n, u)) return !0;
        }

        return !1;
      };
    }

    function xe(e) {
      return e.length > 1 ? function (t, n, r) {
        var i = e.length;

        while (i--) if (!e[i](t, n, r)) return !1;

        return !0;
      } : e[0];
    }

    function be(e, t, n) {
      for (var r = 0, i = t.length; r < i; r++) oe(e, t[r], n);

      return n;
    }

    function we(e, t, n, r, i) {
      for (var o, a = [], s = 0, u = e.length, l = null != t; s < u; s++) (o = e[s]) && (n && !n(o, r, i) || (a.push(o), l && t.push(s)));

      return a;
    }

    function Te(e, t, n, r, i, o) {
      return r && !r[b] && (r = Te(r)), i && !i[b] && (i = Te(i, o)), se(function (o, a, s, u) {
        var l,
            c,
            f,
            p = [],
            d = [],
            h = a.length,
            g = o || be(t || "*", s.nodeType ? [s] : s, []),
            y = !e || !o && t ? g : we(g, p, e, s, u),
            v = n ? i || (o ? e : h || r) ? [] : a : y;

        if (n && n(y, v, s, u), r) {
          l = we(v, d), r(l, [], s, u), c = l.length;

          while (c--) (f = l[c]) && (v[d[c]] = !(y[d[c]] = f));
        }

        if (o) {
          if (i || e) {
            if (i) {
              l = [], c = v.length;

              while (c--) (f = v[c]) && l.push(y[c] = f);

              i(null, v = [], l, u);
            }

            c = v.length;

            while (c--) (f = v[c]) && (l = i ? O(o, f) : p[c]) > -1 && (o[l] = !(a[l] = f));
          }
        } else v = we(v === a ? v.splice(h, v.length) : v), i ? i(null, a, v, u) : L.apply(a, v);
      });
    }

    function Ce(e) {
      for (var t, n, i, o = e.length, a = r.relative[e[0].type], s = a || r.relative[" "], u = a ? 1 : 0, c = me(function (e) {
        return e === t;
      }, s, !0), f = me(function (e) {
        return O(t, e) > -1;
      }, s, !0), p = [function (e, n, r) {
        var i = !a && (r || n !== l) || ((t = n).nodeType ? c(e, n, r) : f(e, n, r));
        return t = null, i;
      }]; u < o; u++) if (n = r.relative[e[u].type]) p = [me(xe(p), n)];else {
        if ((n = r.filter[e[u].type].apply(null, e[u].matches))[b]) {
          for (i = ++u; i < o; i++) if (r.relative[e[i].type]) break;

          return Te(u > 1 && xe(p), u > 1 && ve(e.slice(0, u - 1).concat({
            value: " " === e[u - 2].type ? "*" : ""
          })).replace(B, "$1"), n, u < i && Ce(e.slice(u, i)), i < o && Ce(e = e.slice(i)), i < o && ve(e));
        }

        p.push(n);
      }

      return xe(p);
    }

    function Ee(e, t) {
      var n = t.length > 0,
          i = e.length > 0,
          o = function (o, a, s, u, c) {
        var f,
            h,
            y,
            v = 0,
            m = "0",
            x = o && [],
            b = [],
            w = l,
            C = o || i && r.find.TAG("*", c),
            E = T += null == w ? 1 : Math.random() || .1,
            k = C.length;

        for (c && (l = a === d || a || c); m !== k && null != (f = C[m]); m++) {
          if (i && f) {
            h = 0, a || f.ownerDocument === d || (p(f), s = !g);

            while (y = e[h++]) if (y(f, a || d, s)) {
              u.push(f);
              break;
            }

            c && (T = E);
          }

          n && ((f = !y && f) && v--, o && x.push(f));
        }

        if (v += m, n && m !== v) {
          h = 0;

          while (y = t[h++]) y(x, b, a, s);

          if (o) {
            if (v > 0) while (m--) x[m] || b[m] || (b[m] = j.call(u));
            b = we(b);
          }

          L.apply(u, b), c && !o && b.length > 0 && v + t.length > 1 && oe.uniqueSort(u);
        }

        return c && (T = E, l = w), x;
      };

      return n ? se(o) : o;
    }

    return s = oe.compile = function (e, t) {
      var n,
          r = [],
          i = [],
          o = S[e + " "];

      if (!o) {
        t || (t = a(e)), n = t.length;

        while (n--) (o = Ce(t[n]))[b] ? r.push(o) : i.push(o);

        (o = S(e, Ee(i, r))).selector = e;
      }

      return o;
    }, u = oe.select = function (e, t, n, i) {
      var o,
          u,
          l,
          c,
          f,
          p = "function" == typeof e && e,
          d = !i && a(e = p.selector || e);

      if (n = n || [], 1 === d.length) {
        if ((u = d[0] = d[0].slice(0)).length > 2 && "ID" === (l = u[0]).type && 9 === t.nodeType && g && r.relative[u[1].type]) {
          if (!(t = (r.find.ID(l.matches[0].replace(Z, ee), t) || [])[0])) return n;
          p && (t = t.parentNode), e = e.slice(u.shift().value.length);
        }

        o = V.needsContext.test(e) ? 0 : u.length;

        while (o--) {
          if (l = u[o], r.relative[c = l.type]) break;

          if ((f = r.find[c]) && (i = f(l.matches[0].replace(Z, ee), K.test(u[0].type) && ge(t.parentNode) || t))) {
            if (u.splice(o, 1), !(e = i.length && ve(u))) return L.apply(n, i), n;
            break;
          }
        }
      }

      return (p || s(e, d))(i, t, !g, n, !t || K.test(e) && ge(t.parentNode) || t), n;
    }, n.sortStable = b.split("").sort(D).join("") === b, n.detectDuplicates = !!f, p(), n.sortDetached = ue(function (e) {
      return 1 & e.compareDocumentPosition(d.createElement("fieldset"));
    }), ue(function (e) {
      return e.innerHTML = "<a href='#'></a>", "#" === e.firstChild.getAttribute("href");
    }) || le("type|href|height|width", function (e, t, n) {
      if (!n) return e.getAttribute(t, "type" === t.toLowerCase() ? 1 : 2);
    }), n.attributes && ue(function (e) {
      return e.innerHTML = "<input/>", e.firstChild.setAttribute("value", ""), "" === e.firstChild.getAttribute("value");
    }) || le("value", function (e, t, n) {
      if (!n && "input" === e.nodeName.toLowerCase()) return e.defaultValue;
    }), ue(function (e) {
      return null == e.getAttribute("disabled");
    }) || le(P, function (e, t, n) {
      var r;
      if (!n) return !0 === e[t] ? t.toLowerCase() : (r = e.getAttributeNode(t)) && r.specified ? r.value : null;
    }), oe;
  }(e);

  w.find = E, w.expr = E.selectors, w.expr[":"] = w.expr.pseudos, w.uniqueSort = w.unique = E.uniqueSort, w.text = E.getText, w.isXMLDoc = E.isXML, w.contains = E.contains, w.escapeSelector = E.escape;

  var k = function (e, t, n) {
    var r = [],
        i = void 0 !== n;

    while ((e = e[t]) && 9 !== e.nodeType) if (1 === e.nodeType) {
      if (i && w(e).is(n)) break;
      r.push(e);
    }

    return r;
  },
      S = function (e, t) {
    for (var n = []; e; e = e.nextSibling) 1 === e.nodeType && e !== t && n.push(e);

    return n;
  },
      D = w.expr.match.needsContext;

  function N(e, t) {
    return e.nodeName && e.nodeName.toLowerCase() === t.toLowerCase();
  }

  var A = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

  function j(e, t, n) {
    return g(t) ? w.grep(e, function (e, r) {
      return !!t.call(e, r, e) !== n;
    }) : t.nodeType ? w.grep(e, function (e) {
      return e === t !== n;
    }) : "string" != typeof t ? w.grep(e, function (e) {
      return u.call(t, e) > -1 !== n;
    }) : w.filter(t, e, n);
  }

  w.filter = function (e, t, n) {
    var r = t[0];
    return n && (e = ":not(" + e + ")"), 1 === t.length && 1 === r.nodeType ? w.find.matchesSelector(r, e) ? [r] : [] : w.find.matches(e, w.grep(t, function (e) {
      return 1 === e.nodeType;
    }));
  }, w.fn.extend({
    find: function (e) {
      var t,
          n,
          r = this.length,
          i = this;
      if ("string" != typeof e) return this.pushStack(w(e).filter(function () {
        for (t = 0; t < r; t++) if (w.contains(i[t], this)) return !0;
      }));

      for (n = this.pushStack([]), t = 0; t < r; t++) w.find(e, i[t], n);

      return r > 1 ? w.uniqueSort(n) : n;
    },
    filter: function (e) {
      return this.pushStack(j(this, e || [], !1));
    },
    not: function (e) {
      return this.pushStack(j(this, e || [], !0));
    },
    is: function (e) {
      return !!j(this, "string" == typeof e && D.test(e) ? w(e) : e || [], !1).length;
    }
  });
  var q,
      L = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;
  (w.fn.init = function (e, t, n) {
    var i, o;
    if (!e) return this;

    if (n = n || q, "string" == typeof e) {
      if (!(i = "<" === e[0] && ">" === e[e.length - 1] && e.length >= 3 ? [null, e, null] : L.exec(e)) || !i[1] && t) return !t || t.jquery ? (t || n).find(e) : this.constructor(t).find(e);

      if (i[1]) {
        if (t = t instanceof w ? t[0] : t, w.merge(this, w.parseHTML(i[1], t && t.nodeType ? t.ownerDocument || t : r, !0)), A.test(i[1]) && w.isPlainObject(t)) for (i in t) g(this[i]) ? this[i](t[i]) : this.attr(i, t[i]);
        return this;
      }

      return (o = r.getElementById(i[2])) && (this[0] = o, this.length = 1), this;
    }

    return e.nodeType ? (this[0] = e, this.length = 1, this) : g(e) ? void 0 !== n.ready ? n.ready(e) : e(w) : w.makeArray(e, this);
  }).prototype = w.fn, q = w(r);
  var H = /^(?:parents|prev(?:Until|All))/,
      O = {
    children: !0,
    contents: !0,
    next: !0,
    prev: !0
  };
  w.fn.extend({
    has: function (e) {
      var t = w(e, this),
          n = t.length;
      return this.filter(function () {
        for (var e = 0; e < n; e++) if (w.contains(this, t[e])) return !0;
      });
    },
    closest: function (e, t) {
      var n,
          r = 0,
          i = this.length,
          o = [],
          a = "string" != typeof e && w(e);
      if (!D.test(e)) for (; r < i; r++) for (n = this[r]; n && n !== t; n = n.parentNode) if (n.nodeType < 11 && (a ? a.index(n) > -1 : 1 === n.nodeType && w.find.matchesSelector(n, e))) {
        o.push(n);
        break;
      }
      return this.pushStack(o.length > 1 ? w.uniqueSort(o) : o);
    },
    index: function (e) {
      return e ? "string" == typeof e ? u.call(w(e), this[0]) : u.call(this, e.jquery ? e[0] : e) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
    },
    add: function (e, t) {
      return this.pushStack(w.uniqueSort(w.merge(this.get(), w(e, t))));
    },
    addBack: function (e) {
      return this.add(null == e ? this.prevObject : this.prevObject.filter(e));
    }
  });

  function P(e, t) {
    while ((e = e[t]) && 1 !== e.nodeType);

    return e;
  }

  w.each({
    parent: function (e) {
      var t = e.parentNode;
      return t && 11 !== t.nodeType ? t : null;
    },
    parents: function (e) {
      return k(e, "parentNode");
    },
    parentsUntil: function (e, t, n) {
      return k(e, "parentNode", n);
    },
    next: function (e) {
      return P(e, "nextSibling");
    },
    prev: function (e) {
      return P(e, "previousSibling");
    },
    nextAll: function (e) {
      return k(e, "nextSibling");
    },
    prevAll: function (e) {
      return k(e, "previousSibling");
    },
    nextUntil: function (e, t, n) {
      return k(e, "nextSibling", n);
    },
    prevUntil: function (e, t, n) {
      return k(e, "previousSibling", n);
    },
    siblings: function (e) {
      return S((e.parentNode || {}).firstChild, e);
    },
    children: function (e) {
      return S(e.firstChild);
    },
    contents: function (e) {
      return N(e, "iframe") ? e.contentDocument : (N(e, "template") && (e = e.content || e), w.merge([], e.childNodes));
    }
  }, function (e, t) {
    w.fn[e] = function (n, r) {
      var i = w.map(this, t, n);
      return "Until" !== e.slice(-5) && (r = n), r && "string" == typeof r && (i = w.filter(r, i)), this.length > 1 && (O[e] || w.uniqueSort(i), H.test(e) && i.reverse()), this.pushStack(i);
    };
  });
  var M = /[^\x20\t\r\n\f]+/g;

  function R(e) {
    var t = {};
    return w.each(e.match(M) || [], function (e, n) {
      t[n] = !0;
    }), t;
  }

  w.Callbacks = function (e) {
    e = "string" == typeof e ? R(e) : w.extend({}, e);

    var t,
        n,
        r,
        i,
        o = [],
        a = [],
        s = -1,
        u = function () {
      for (i = i || e.once, r = t = !0; a.length; s = -1) {
        n = a.shift();

        while (++s < o.length) !1 === o[s].apply(n[0], n[1]) && e.stopOnFalse && (s = o.length, n = !1);
      }

      e.memory || (n = !1), t = !1, i && (o = n ? [] : "");
    },
        l = {
      add: function () {
        return o && (n && !t && (s = o.length - 1, a.push(n)), function t(n) {
          w.each(n, function (n, r) {
            g(r) ? e.unique && l.has(r) || o.push(r) : r && r.length && "string" !== x(r) && t(r);
          });
        }(arguments), n && !t && u()), this;
      },
      remove: function () {
        return w.each(arguments, function (e, t) {
          var n;

          while ((n = w.inArray(t, o, n)) > -1) o.splice(n, 1), n <= s && s--;
        }), this;
      },
      has: function (e) {
        return e ? w.inArray(e, o) > -1 : o.length > 0;
      },
      empty: function () {
        return o && (o = []), this;
      },
      disable: function () {
        return i = a = [], o = n = "", this;
      },
      disabled: function () {
        return !o;
      },
      lock: function () {
        return i = a = [], n || t || (o = n = ""), this;
      },
      locked: function () {
        return !!i;
      },
      fireWith: function (e, n) {
        return i || (n = [e, (n = n || []).slice ? n.slice() : n], a.push(n), t || u()), this;
      },
      fire: function () {
        return l.fireWith(this, arguments), this;
      },
      fired: function () {
        return !!r;
      }
    };

    return l;
  };

  function I(e) {
    return e;
  }

  function W(e) {
    throw e;
  }

  function $(e, t, n, r) {
    var i;

    try {
      e && g(i = e.promise) ? i.call(e).done(t).fail(n) : e && g(i = e.then) ? i.call(e, t, n) : t.apply(void 0, [e].slice(r));
    } catch (e) {
      n.apply(void 0, [e]);
    }
  }

  w.extend({
    Deferred: function (t) {
      var n = [["notify", "progress", w.Callbacks("memory"), w.Callbacks("memory"), 2], ["resolve", "done", w.Callbacks("once memory"), w.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", w.Callbacks("once memory"), w.Callbacks("once memory"), 1, "rejected"]],
          r = "pending",
          i = {
        state: function () {
          return r;
        },
        always: function () {
          return o.done(arguments).fail(arguments), this;
        },
        "catch": function (e) {
          return i.then(null, e);
        },
        pipe: function () {
          var e = arguments;
          return w.Deferred(function (t) {
            w.each(n, function (n, r) {
              var i = g(e[r[4]]) && e[r[4]];
              o[r[1]](function () {
                var e = i && i.apply(this, arguments);
                e && g(e.promise) ? e.promise().progress(t.notify).done(t.resolve).fail(t.reject) : t[r[0] + "With"](this, i ? [e] : arguments);
              });
            }), e = null;
          }).promise();
        },
        then: function (t, r, i) {
          var o = 0;

          function a(t, n, r, i) {
            return function () {
              var s = this,
                  u = arguments,
                  l = function () {
                var e, l;

                if (!(t < o)) {
                  if ((e = r.apply(s, u)) === n.promise()) throw new TypeError("Thenable self-resolution");
                  l = e && ("object" == typeof e || "function" == typeof e) && e.then, g(l) ? i ? l.call(e, a(o, n, I, i), a(o, n, W, i)) : (o++, l.call(e, a(o, n, I, i), a(o, n, W, i), a(o, n, I, n.notifyWith))) : (r !== I && (s = void 0, u = [e]), (i || n.resolveWith)(s, u));
                }
              },
                  c = i ? l : function () {
                try {
                  l();
                } catch (e) {
                  w.Deferred.exceptionHook && w.Deferred.exceptionHook(e, c.stackTrace), t + 1 >= o && (r !== W && (s = void 0, u = [e]), n.rejectWith(s, u));
                }
              };

              t ? c() : (w.Deferred.getStackHook && (c.stackTrace = w.Deferred.getStackHook()), e.setTimeout(c));
            };
          }

          return w.Deferred(function (e) {
            n[0][3].add(a(0, e, g(i) ? i : I, e.notifyWith)), n[1][3].add(a(0, e, g(t) ? t : I)), n[2][3].add(a(0, e, g(r) ? r : W));
          }).promise();
        },
        promise: function (e) {
          return null != e ? w.extend(e, i) : i;
        }
      },
          o = {};
      return w.each(n, function (e, t) {
        var a = t[2],
            s = t[5];
        i[t[1]] = a.add, s && a.add(function () {
          r = s;
        }, n[3 - e][2].disable, n[3 - e][3].disable, n[0][2].lock, n[0][3].lock), a.add(t[3].fire), o[t[0]] = function () {
          return o[t[0] + "With"](this === o ? void 0 : this, arguments), this;
        }, o[t[0] + "With"] = a.fireWith;
      }), i.promise(o), t && t.call(o, o), o;
    },
    when: function (e) {
      var t = arguments.length,
          n = t,
          r = Array(n),
          i = o.call(arguments),
          a = w.Deferred(),
          s = function (e) {
        return function (n) {
          r[e] = this, i[e] = arguments.length > 1 ? o.call(arguments) : n, --t || a.resolveWith(r, i);
        };
      };

      if (t <= 1 && ($(e, a.done(s(n)).resolve, a.reject, !t), "pending" === a.state() || g(i[n] && i[n].then))) return a.then();

      while (n--) $(i[n], s(n), a.reject);

      return a.promise();
    }
  });
  var B = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
  w.Deferred.exceptionHook = function (t, n) {
    e.console && e.console.warn && t && B.test(t.name) && e.console.warn("jQuery.Deferred exception: " + t.message, t.stack, n);
  }, w.readyException = function (t) {
    e.setTimeout(function () {
      throw t;
    });
  };
  var F = w.Deferred();
  w.fn.ready = function (e) {
    return F.then(e)["catch"](function (e) {
      w.readyException(e);
    }), this;
  }, w.extend({
    isReady: !1,
    readyWait: 1,
    ready: function (e) {
      (!0 === e ? --w.readyWait : w.isReady) || (w.isReady = !0, !0 !== e && --w.readyWait > 0 || F.resolveWith(r, [w]));
    }
  }), w.ready.then = F.then;

  function _() {
    r.removeEventListener("DOMContentLoaded", _), e.removeEventListener("load", _), w.ready();
  }

  "complete" === r.readyState || "loading" !== r.readyState && !r.documentElement.doScroll ? e.setTimeout(w.ready) : (r.addEventListener("DOMContentLoaded", _), e.addEventListener("load", _));

  var z = function (e, t, n, r, i, o, a) {
    var s = 0,
        u = e.length,
        l = null == n;

    if ("object" === x(n)) {
      i = !0;

      for (s in n) z(e, t, s, n[s], !0, o, a);
    } else if (void 0 !== r && (i = !0, g(r) || (a = !0), l && (a ? (t.call(e, r), t = null) : (l = t, t = function (e, t, n) {
      return l.call(w(e), n);
    })), t)) for (; s < u; s++) t(e[s], n, a ? r : r.call(e[s], s, t(e[s], n)));

    return i ? e : l ? t.call(e) : u ? t(e[0], n) : o;
  },
      X = /^-ms-/,
      U = /-([a-z])/g;

  function V(e, t) {
    return t.toUpperCase();
  }

  function G(e) {
    return e.replace(X, "ms-").replace(U, V);
  }

  var Y = function (e) {
    return 1 === e.nodeType || 9 === e.nodeType || !+e.nodeType;
  };

  function Q() {
    this.expando = w.expando + Q.uid++;
  }

  Q.uid = 1, Q.prototype = {
    cache: function (e) {
      var t = e[this.expando];
      return t || (t = {}, Y(e) && (e.nodeType ? e[this.expando] = t : Object.defineProperty(e, this.expando, {
        value: t,
        configurable: !0
      }))), t;
    },
    set: function (e, t, n) {
      var r,
          i = this.cache(e);
      if ("string" == typeof t) i[G(t)] = n;else for (r in t) i[G(r)] = t[r];
      return i;
    },
    get: function (e, t) {
      return void 0 === t ? this.cache(e) : e[this.expando] && e[this.expando][G(t)];
    },
    access: function (e, t, n) {
      return void 0 === t || t && "string" == typeof t && void 0 === n ? this.get(e, t) : (this.set(e, t, n), void 0 !== n ? n : t);
    },
    remove: function (e, t) {
      var n,
          r = e[this.expando];

      if (void 0 !== r) {
        if (void 0 !== t) {
          n = (t = Array.isArray(t) ? t.map(G) : (t = G(t)) in r ? [t] : t.match(M) || []).length;

          while (n--) delete r[t[n]];
        }

        (void 0 === t || w.isEmptyObject(r)) && (e.nodeType ? e[this.expando] = void 0 : delete e[this.expando]);
      }
    },
    hasData: function (e) {
      var t = e[this.expando];
      return void 0 !== t && !w.isEmptyObject(t);
    }
  };
  var J = new Q(),
      K = new Q(),
      Z = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      ee = /[A-Z]/g;

  function te(e) {
    return "true" === e || "false" !== e && ("null" === e ? null : e === +e + "" ? +e : Z.test(e) ? JSON.parse(e) : e);
  }

  function ne(e, t, n) {
    var r;
    if (void 0 === n && 1 === e.nodeType) if (r = "data-" + t.replace(ee, "-$&").toLowerCase(), "string" == typeof (n = e.getAttribute(r))) {
      try {
        n = te(n);
      } catch (e) {}

      K.set(e, t, n);
    } else n = void 0;
    return n;
  }

  w.extend({
    hasData: function (e) {
      return K.hasData(e) || J.hasData(e);
    },
    data: function (e, t, n) {
      return K.access(e, t, n);
    },
    removeData: function (e, t) {
      K.remove(e, t);
    },
    _data: function (e, t, n) {
      return J.access(e, t, n);
    },
    _removeData: function (e, t) {
      J.remove(e, t);
    }
  }), w.fn.extend({
    data: function (e, t) {
      var n,
          r,
          i,
          o = this[0],
          a = o && o.attributes;

      if (void 0 === e) {
        if (this.length && (i = K.get(o), 1 === o.nodeType && !J.get(o, "hasDataAttrs"))) {
          n = a.length;

          while (n--) a[n] && 0 === (r = a[n].name).indexOf("data-") && (r = G(r.slice(5)), ne(o, r, i[r]));

          J.set(o, "hasDataAttrs", !0);
        }

        return i;
      }

      return "object" == typeof e ? this.each(function () {
        K.set(this, e);
      }) : z(this, function (t) {
        var n;

        if (o && void 0 === t) {
          if (void 0 !== (n = K.get(o, e))) return n;
          if (void 0 !== (n = ne(o, e))) return n;
        } else this.each(function () {
          K.set(this, e, t);
        });
      }, null, t, arguments.length > 1, null, !0);
    },
    removeData: function (e) {
      return this.each(function () {
        K.remove(this, e);
      });
    }
  }), w.extend({
    queue: function (e, t, n) {
      var r;
      if (e) return t = (t || "fx") + "queue", r = J.get(e, t), n && (!r || Array.isArray(n) ? r = J.access(e, t, w.makeArray(n)) : r.push(n)), r || [];
    },
    dequeue: function (e, t) {
      t = t || "fx";

      var n = w.queue(e, t),
          r = n.length,
          i = n.shift(),
          o = w._queueHooks(e, t),
          a = function () {
        w.dequeue(e, t);
      };

      "inprogress" === i && (i = n.shift(), r--), i && ("fx" === t && n.unshift("inprogress"), delete o.stop, i.call(e, a, o)), !r && o && o.empty.fire();
    },
    _queueHooks: function (e, t) {
      var n = t + "queueHooks";
      return J.get(e, n) || J.access(e, n, {
        empty: w.Callbacks("once memory").add(function () {
          J.remove(e, [t + "queue", n]);
        })
      });
    }
  }), w.fn.extend({
    queue: function (e, t) {
      var n = 2;
      return "string" != typeof e && (t = e, e = "fx", n--), arguments.length < n ? w.queue(this[0], e) : void 0 === t ? this : this.each(function () {
        var n = w.queue(this, e, t);
        w._queueHooks(this, e), "fx" === e && "inprogress" !== n[0] && w.dequeue(this, e);
      });
    },
    dequeue: function (e) {
      return this.each(function () {
        w.dequeue(this, e);
      });
    },
    clearQueue: function (e) {
      return this.queue(e || "fx", []);
    },
    promise: function (e, t) {
      var n,
          r = 1,
          i = w.Deferred(),
          o = this,
          a = this.length,
          s = function () {
        --r || i.resolveWith(o, [o]);
      };

      "string" != typeof e && (t = e, e = void 0), e = e || "fx";

      while (a--) (n = J.get(o[a], e + "queueHooks")) && n.empty && (r++, n.empty.add(s));

      return s(), i.promise(t);
    }
  });

  var re = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
      ie = new RegExp("^(?:([+-])=|)(" + re + ")([a-z%]*)$", "i"),
      oe = ["Top", "Right", "Bottom", "Left"],
      ae = function (e, t) {
    return "none" === (e = t || e).style.display || "" === e.style.display && w.contains(e.ownerDocument, e) && "none" === w.css(e, "display");
  },
      se = function (e, t, n, r) {
    var i,
        o,
        a = {};

    for (o in t) a[o] = e.style[o], e.style[o] = t[o];

    i = n.apply(e, r || []);

    for (o in t) e.style[o] = a[o];

    return i;
  };

  function ue(e, t, n, r) {
    var i,
        o,
        a = 20,
        s = r ? function () {
      return r.cur();
    } : function () {
      return w.css(e, t, "");
    },
        u = s(),
        l = n && n[3] || (w.cssNumber[t] ? "" : "px"),
        c = (w.cssNumber[t] || "px" !== l && +u) && ie.exec(w.css(e, t));

    if (c && c[3] !== l) {
      u /= 2, l = l || c[3], c = +u || 1;

      while (a--) w.style(e, t, c + l), (1 - o) * (1 - (o = s() / u || .5)) <= 0 && (a = 0), c /= o;

      c *= 2, w.style(e, t, c + l), n = n || [];
    }

    return n && (c = +c || +u || 0, i = n[1] ? c + (n[1] + 1) * n[2] : +n[2], r && (r.unit = l, r.start = c, r.end = i)), i;
  }

  var le = {};

  function ce(e) {
    var t,
        n = e.ownerDocument,
        r = e.nodeName,
        i = le[r];
    return i || (t = n.body.appendChild(n.createElement(r)), i = w.css(t, "display"), t.parentNode.removeChild(t), "none" === i && (i = "block"), le[r] = i, i);
  }

  function fe(e, t) {
    for (var n, r, i = [], o = 0, a = e.length; o < a; o++) (r = e[o]).style && (n = r.style.display, t ? ("none" === n && (i[o] = J.get(r, "display") || null, i[o] || (r.style.display = "")), "" === r.style.display && ae(r) && (i[o] = ce(r))) : "none" !== n && (i[o] = "none", J.set(r, "display", n)));

    for (o = 0; o < a; o++) null != i[o] && (e[o].style.display = i[o]);

    return e;
  }

  w.fn.extend({
    show: function () {
      return fe(this, !0);
    },
    hide: function () {
      return fe(this);
    },
    toggle: function (e) {
      return "boolean" == typeof e ? e ? this.show() : this.hide() : this.each(function () {
        ae(this) ? w(this).show() : w(this).hide();
      });
    }
  });
  var pe = /^(?:checkbox|radio)$/i,
      de = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i,
      he = /^$|^module$|\/(?:java|ecma)script/i,
      ge = {
    option: [1, "<select multiple='multiple'>", "</select>"],
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  };
  ge.optgroup = ge.option, ge.tbody = ge.tfoot = ge.colgroup = ge.caption = ge.thead, ge.th = ge.td;

  function ye(e, t) {
    var n;
    return n = "undefined" != typeof e.getElementsByTagName ? e.getElementsByTagName(t || "*") : "undefined" != typeof e.querySelectorAll ? e.querySelectorAll(t || "*") : [], void 0 === t || t && N(e, t) ? w.merge([e], n) : n;
  }

  function ve(e, t) {
    for (var n = 0, r = e.length; n < r; n++) J.set(e[n], "globalEval", !t || J.get(t[n], "globalEval"));
  }

  var me = /<|&#?\w+;/;

  function xe(e, t, n, r, i) {
    for (var o, a, s, u, l, c, f = t.createDocumentFragment(), p = [], d = 0, h = e.length; d < h; d++) if ((o = e[d]) || 0 === o) if ("object" === x(o)) w.merge(p, o.nodeType ? [o] : o);else if (me.test(o)) {
      a = a || f.appendChild(t.createElement("div")), s = (de.exec(o) || ["", ""])[1].toLowerCase(), u = ge[s] || ge._default, a.innerHTML = u[1] + w.htmlPrefilter(o) + u[2], c = u[0];

      while (c--) a = a.lastChild;

      w.merge(p, a.childNodes), (a = f.firstChild).textContent = "";
    } else p.push(t.createTextNode(o));

    f.textContent = "", d = 0;

    while (o = p[d++]) if (r && w.inArray(o, r) > -1) i && i.push(o);else if (l = w.contains(o.ownerDocument, o), a = ye(f.appendChild(o), "script"), l && ve(a), n) {
      c = 0;

      while (o = a[c++]) he.test(o.type || "") && n.push(o);
    }

    return f;
  }

  !function () {
    var e = r.createDocumentFragment().appendChild(r.createElement("div")),
        t = r.createElement("input");
    t.setAttribute("type", "radio"), t.setAttribute("checked", "checked"), t.setAttribute("name", "t"), e.appendChild(t), h.checkClone = e.cloneNode(!0).cloneNode(!0).lastChild.checked, e.innerHTML = "<textarea>x</textarea>", h.noCloneChecked = !!e.cloneNode(!0).lastChild.defaultValue;
  }();
  var be = r.documentElement,
      we = /^key/,
      Te = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      Ce = /^([^.]*)(?:\.(.+)|)/;

  function Ee() {
    return !0;
  }

  function ke() {
    return !1;
  }

  function Se() {
    try {
      return r.activeElement;
    } catch (e) {}
  }

  function De(e, t, n, r, i, o) {
    var a, s;

    if ("object" == typeof t) {
      "string" != typeof n && (r = r || n, n = void 0);

      for (s in t) De(e, s, n, r, t[s], o);

      return e;
    }

    if (null == r && null == i ? (i = n, r = n = void 0) : null == i && ("string" == typeof n ? (i = r, r = void 0) : (i = r, r = n, n = void 0)), !1 === i) i = ke;else if (!i) return e;
    return 1 === o && (a = i, (i = function (e) {
      return w().off(e), a.apply(this, arguments);
    }).guid = a.guid || (a.guid = w.guid++)), e.each(function () {
      w.event.add(this, t, i, r, n);
    });
  }

  w.event = {
    global: {},
    add: function (e, t, n, r, i) {
      var o,
          a,
          s,
          u,
          l,
          c,
          f,
          p,
          d,
          h,
          g,
          y = J.get(e);

      if (y) {
        n.handler && (n = (o = n).handler, i = o.selector), i && w.find.matchesSelector(be, i), n.guid || (n.guid = w.guid++), (u = y.events) || (u = y.events = {}), (a = y.handle) || (a = y.handle = function (t) {
          return "undefined" != typeof w && w.event.triggered !== t.type ? w.event.dispatch.apply(e, arguments) : void 0;
        }), l = (t = (t || "").match(M) || [""]).length;

        while (l--) d = g = (s = Ce.exec(t[l]) || [])[1], h = (s[2] || "").split(".").sort(), d && (f = w.event.special[d] || {}, d = (i ? f.delegateType : f.bindType) || d, f = w.event.special[d] || {}, c = w.extend({
          type: d,
          origType: g,
          data: r,
          handler: n,
          guid: n.guid,
          selector: i,
          needsContext: i && w.expr.match.needsContext.test(i),
          namespace: h.join(".")
        }, o), (p = u[d]) || ((p = u[d] = []).delegateCount = 0, f.setup && !1 !== f.setup.call(e, r, h, a) || e.addEventListener && e.addEventListener(d, a)), f.add && (f.add.call(e, c), c.handler.guid || (c.handler.guid = n.guid)), i ? p.splice(p.delegateCount++, 0, c) : p.push(c), w.event.global[d] = !0);
      }
    },
    remove: function (e, t, n, r, i) {
      var o,
          a,
          s,
          u,
          l,
          c,
          f,
          p,
          d,
          h,
          g,
          y = J.hasData(e) && J.get(e);

      if (y && (u = y.events)) {
        l = (t = (t || "").match(M) || [""]).length;

        while (l--) if (s = Ce.exec(t[l]) || [], d = g = s[1], h = (s[2] || "").split(".").sort(), d) {
          f = w.event.special[d] || {}, p = u[d = (r ? f.delegateType : f.bindType) || d] || [], s = s[2] && new RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)"), a = o = p.length;

          while (o--) c = p[o], !i && g !== c.origType || n && n.guid !== c.guid || s && !s.test(c.namespace) || r && r !== c.selector && ("**" !== r || !c.selector) || (p.splice(o, 1), c.selector && p.delegateCount--, f.remove && f.remove.call(e, c));

          a && !p.length && (f.teardown && !1 !== f.teardown.call(e, h, y.handle) || w.removeEvent(e, d, y.handle), delete u[d]);
        } else for (d in u) w.event.remove(e, d + t[l], n, r, !0);

        w.isEmptyObject(u) && J.remove(e, "handle events");
      }
    },
    dispatch: function (e) {
      var t = w.event.fix(e),
          n,
          r,
          i,
          o,
          a,
          s,
          u = new Array(arguments.length),
          l = (J.get(this, "events") || {})[t.type] || [],
          c = w.event.special[t.type] || {};

      for (u[0] = t, n = 1; n < arguments.length; n++) u[n] = arguments[n];

      if (t.delegateTarget = this, !c.preDispatch || !1 !== c.preDispatch.call(this, t)) {
        s = w.event.handlers.call(this, t, l), n = 0;

        while ((o = s[n++]) && !t.isPropagationStopped()) {
          t.currentTarget = o.elem, r = 0;

          while ((a = o.handlers[r++]) && !t.isImmediatePropagationStopped()) t.rnamespace && !t.rnamespace.test(a.namespace) || (t.handleObj = a, t.data = a.data, void 0 !== (i = ((w.event.special[a.origType] || {}).handle || a.handler).apply(o.elem, u)) && !1 === (t.result = i) && (t.preventDefault(), t.stopPropagation()));
        }

        return c.postDispatch && c.postDispatch.call(this, t), t.result;
      }
    },
    handlers: function (e, t) {
      var n,
          r,
          i,
          o,
          a,
          s = [],
          u = t.delegateCount,
          l = e.target;
      if (u && l.nodeType && !("click" === e.type && e.button >= 1)) for (; l !== this; l = l.parentNode || this) if (1 === l.nodeType && ("click" !== e.type || !0 !== l.disabled)) {
        for (o = [], a = {}, n = 0; n < u; n++) void 0 === a[i = (r = t[n]).selector + " "] && (a[i] = r.needsContext ? w(i, this).index(l) > -1 : w.find(i, this, null, [l]).length), a[i] && o.push(r);

        o.length && s.push({
          elem: l,
          handlers: o
        });
      }
      return l = this, u < t.length && s.push({
        elem: l,
        handlers: t.slice(u)
      }), s;
    },
    addProp: function (e, t) {
      Object.defineProperty(w.Event.prototype, e, {
        enumerable: !0,
        configurable: !0,
        get: g(t) ? function () {
          if (this.originalEvent) return t(this.originalEvent);
        } : function () {
          if (this.originalEvent) return this.originalEvent[e];
        },
        set: function (t) {
          Object.defineProperty(this, e, {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: t
          });
        }
      });
    },
    fix: function (e) {
      return e[w.expando] ? e : new w.Event(e);
    },
    special: {
      load: {
        noBubble: !0
      },
      focus: {
        trigger: function () {
          if (this !== Se() && this.focus) return this.focus(), !1;
        },
        delegateType: "focusin"
      },
      blur: {
        trigger: function () {
          if (this === Se() && this.blur) return this.blur(), !1;
        },
        delegateType: "focusout"
      },
      click: {
        trigger: function () {
          if ("checkbox" === this.type && this.click && N(this, "input")) return this.click(), !1;
        },
        _default: function (e) {
          return N(e.target, "a");
        }
      },
      beforeunload: {
        postDispatch: function (e) {
          void 0 !== e.result && e.originalEvent && (e.originalEvent.returnValue = e.result);
        }
      }
    }
  }, w.removeEvent = function (e, t, n) {
    e.removeEventListener && e.removeEventListener(t, n);
  }, w.Event = function (e, t) {
    if (!(this instanceof w.Event)) return new w.Event(e, t);
    e && e.type ? (this.originalEvent = e, this.type = e.type, this.isDefaultPrevented = e.defaultPrevented || void 0 === e.defaultPrevented && !1 === e.returnValue ? Ee : ke, this.target = e.target && 3 === e.target.nodeType ? e.target.parentNode : e.target, this.currentTarget = e.currentTarget, this.relatedTarget = e.relatedTarget) : this.type = e, t && w.extend(this, t), this.timeStamp = e && e.timeStamp || Date.now(), this[w.expando] = !0;
  }, w.Event.prototype = {
    constructor: w.Event,
    isDefaultPrevented: ke,
    isPropagationStopped: ke,
    isImmediatePropagationStopped: ke,
    isSimulated: !1,
    preventDefault: function () {
      var e = this.originalEvent;
      this.isDefaultPrevented = Ee, e && !this.isSimulated && e.preventDefault();
    },
    stopPropagation: function () {
      var e = this.originalEvent;
      this.isPropagationStopped = Ee, e && !this.isSimulated && e.stopPropagation();
    },
    stopImmediatePropagation: function () {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = Ee, e && !this.isSimulated && e.stopImmediatePropagation(), this.stopPropagation();
    }
  }, w.each({
    altKey: !0,
    bubbles: !0,
    cancelable: !0,
    changedTouches: !0,
    ctrlKey: !0,
    detail: !0,
    eventPhase: !0,
    metaKey: !0,
    pageX: !0,
    pageY: !0,
    shiftKey: !0,
    view: !0,
    "char": !0,
    charCode: !0,
    key: !0,
    keyCode: !0,
    button: !0,
    buttons: !0,
    clientX: !0,
    clientY: !0,
    offsetX: !0,
    offsetY: !0,
    pointerId: !0,
    pointerType: !0,
    screenX: !0,
    screenY: !0,
    targetTouches: !0,
    toElement: !0,
    touches: !0,
    which: function (e) {
      var t = e.button;
      return null == e.which && we.test(e.type) ? null != e.charCode ? e.charCode : e.keyCode : !e.which && void 0 !== t && Te.test(e.type) ? 1 & t ? 1 : 2 & t ? 3 : 4 & t ? 2 : 0 : e.which;
    }
  }, w.event.addProp), w.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (e, t) {
    w.event.special[e] = {
      delegateType: t,
      bindType: t,
      handle: function (e) {
        var n,
            r = this,
            i = e.relatedTarget,
            o = e.handleObj;
        return i && (i === r || w.contains(r, i)) || (e.type = o.origType, n = o.handler.apply(this, arguments), e.type = t), n;
      }
    };
  }), w.fn.extend({
    on: function (e, t, n, r) {
      return De(this, e, t, n, r);
    },
    one: function (e, t, n, r) {
      return De(this, e, t, n, r, 1);
    },
    off: function (e, t, n) {
      var r, i;
      if (e && e.preventDefault && e.handleObj) return r = e.handleObj, w(e.delegateTarget).off(r.namespace ? r.origType + "." + r.namespace : r.origType, r.selector, r.handler), this;

      if ("object" == typeof e) {
        for (i in e) this.off(i, t, e[i]);

        return this;
      }

      return !1 !== t && "function" != typeof t || (n = t, t = void 0), !1 === n && (n = ke), this.each(function () {
        w.event.remove(this, e, n, t);
      });
    }
  });
  var Ne = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
      Ae = /<script|<style|<link/i,
      je = /checked\s*(?:[^=]|=\s*.checked.)/i,
      qe = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

  function Le(e, t) {
    return N(e, "table") && N(11 !== t.nodeType ? t : t.firstChild, "tr") ? w(e).children("tbody")[0] || e : e;
  }

  function He(e) {
    return e.type = (null !== e.getAttribute("type")) + "/" + e.type, e;
  }

  function Oe(e) {
    return "true/" === (e.type || "").slice(0, 5) ? e.type = e.type.slice(5) : e.removeAttribute("type"), e;
  }

  function Pe(e, t) {
    var n, r, i, o, a, s, u, l;

    if (1 === t.nodeType) {
      if (J.hasData(e) && (o = J.access(e), a = J.set(t, o), l = o.events)) {
        delete a.handle, a.events = {};

        for (i in l) for (n = 0, r = l[i].length; n < r; n++) w.event.add(t, i, l[i][n]);
      }

      K.hasData(e) && (s = K.access(e), u = w.extend({}, s), K.set(t, u));
    }
  }

  function Me(e, t) {
    var n = t.nodeName.toLowerCase();
    "input" === n && pe.test(e.type) ? t.checked = e.checked : "input" !== n && "textarea" !== n || (t.defaultValue = e.defaultValue);
  }

  function Re(e, t, n, r) {
    t = a.apply([], t);
    var i,
        o,
        s,
        u,
        l,
        c,
        f = 0,
        p = e.length,
        d = p - 1,
        y = t[0],
        v = g(y);
    if (v || p > 1 && "string" == typeof y && !h.checkClone && je.test(y)) return e.each(function (i) {
      var o = e.eq(i);
      v && (t[0] = y.call(this, i, o.html())), Re(o, t, n, r);
    });

    if (p && (i = xe(t, e[0].ownerDocument, !1, e, r), o = i.firstChild, 1 === i.childNodes.length && (i = o), o || r)) {
      for (u = (s = w.map(ye(i, "script"), He)).length; f < p; f++) l = i, f !== d && (l = w.clone(l, !0, !0), u && w.merge(s, ye(l, "script"))), n.call(e[f], l, f);

      if (u) for (c = s[s.length - 1].ownerDocument, w.map(s, Oe), f = 0; f < u; f++) l = s[f], he.test(l.type || "") && !J.access(l, "globalEval") && w.contains(c, l) && (l.src && "module" !== (l.type || "").toLowerCase() ? w._evalUrl && w._evalUrl(l.src) : m(l.textContent.replace(qe, ""), c, l));
    }

    return e;
  }

  function Ie(e, t, n) {
    for (var r, i = t ? w.filter(t, e) : e, o = 0; null != (r = i[o]); o++) n || 1 !== r.nodeType || w.cleanData(ye(r)), r.parentNode && (n && w.contains(r.ownerDocument, r) && ve(ye(r, "script")), r.parentNode.removeChild(r));

    return e;
  }

  w.extend({
    htmlPrefilter: function (e) {
      return e.replace(Ne, "<$1></$2>");
    },
    clone: function (e, t, n) {
      var r,
          i,
          o,
          a,
          s = e.cloneNode(!0),
          u = w.contains(e.ownerDocument, e);
      if (!(h.noCloneChecked || 1 !== e.nodeType && 11 !== e.nodeType || w.isXMLDoc(e))) for (a = ye(s), r = 0, i = (o = ye(e)).length; r < i; r++) Me(o[r], a[r]);
      if (t) if (n) for (o = o || ye(e), a = a || ye(s), r = 0, i = o.length; r < i; r++) Pe(o[r], a[r]);else Pe(e, s);
      return (a = ye(s, "script")).length > 0 && ve(a, !u && ye(e, "script")), s;
    },
    cleanData: function (e) {
      for (var t, n, r, i = w.event.special, o = 0; void 0 !== (n = e[o]); o++) if (Y(n)) {
        if (t = n[J.expando]) {
          if (t.events) for (r in t.events) i[r] ? w.event.remove(n, r) : w.removeEvent(n, r, t.handle);
          n[J.expando] = void 0;
        }

        n[K.expando] && (n[K.expando] = void 0);
      }
    }
  }), w.fn.extend({
    detach: function (e) {
      return Ie(this, e, !0);
    },
    remove: function (e) {
      return Ie(this, e);
    },
    text: function (e) {
      return z(this, function (e) {
        return void 0 === e ? w.text(this) : this.empty().each(function () {
          1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = e);
        });
      }, null, e, arguments.length);
    },
    append: function () {
      return Re(this, arguments, function (e) {
        1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || Le(this, e).appendChild(e);
      });
    },
    prepend: function () {
      return Re(this, arguments, function (e) {
        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
          var t = Le(this, e);
          t.insertBefore(e, t.firstChild);
        }
      });
    },
    before: function () {
      return Re(this, arguments, function (e) {
        this.parentNode && this.parentNode.insertBefore(e, this);
      });
    },
    after: function () {
      return Re(this, arguments, function (e) {
        this.parentNode && this.parentNode.insertBefore(e, this.nextSibling);
      });
    },
    empty: function () {
      for (var e, t = 0; null != (e = this[t]); t++) 1 === e.nodeType && (w.cleanData(ye(e, !1)), e.textContent = "");

      return this;
    },
    clone: function (e, t) {
      return e = null != e && e, t = null == t ? e : t, this.map(function () {
        return w.clone(this, e, t);
      });
    },
    html: function (e) {
      return z(this, function (e) {
        var t = this[0] || {},
            n = 0,
            r = this.length;
        if (void 0 === e && 1 === t.nodeType) return t.innerHTML;

        if ("string" == typeof e && !Ae.test(e) && !ge[(de.exec(e) || ["", ""])[1].toLowerCase()]) {
          e = w.htmlPrefilter(e);

          try {
            for (; n < r; n++) 1 === (t = this[n] || {}).nodeType && (w.cleanData(ye(t, !1)), t.innerHTML = e);

            t = 0;
          } catch (e) {}
        }

        t && this.empty().append(e);
      }, null, e, arguments.length);
    },
    replaceWith: function () {
      var e = [];
      return Re(this, arguments, function (t) {
        var n = this.parentNode;
        w.inArray(this, e) < 0 && (w.cleanData(ye(this)), n && n.replaceChild(t, this));
      }, e);
    }
  }), w.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (e, t) {
    w.fn[e] = function (e) {
      for (var n, r = [], i = w(e), o = i.length - 1, a = 0; a <= o; a++) n = a === o ? this : this.clone(!0), w(i[a])[t](n), s.apply(r, n.get());

      return this.pushStack(r);
    };
  });

  var We = new RegExp("^(" + re + ")(?!px)[a-z%]+$", "i"),
      $e = function (t) {
    var n = t.ownerDocument.defaultView;
    return n && n.opener || (n = e), n.getComputedStyle(t);
  },
      Be = new RegExp(oe.join("|"), "i");

  !function () {
    function t() {
      if (c) {
        l.style.cssText = "position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0", c.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%", be.appendChild(l).appendChild(c);
        var t = e.getComputedStyle(c);
        i = "1%" !== t.top, u = 12 === n(t.marginLeft), c.style.right = "60%", s = 36 === n(t.right), o = 36 === n(t.width), c.style.position = "absolute", a = 36 === c.offsetWidth || "absolute", be.removeChild(l), c = null;
      }
    }

    function n(e) {
      return Math.round(parseFloat(e));
    }

    var i,
        o,
        a,
        s,
        u,
        l = r.createElement("div"),
        c = r.createElement("div");
    c.style && (c.style.backgroundClip = "content-box", c.cloneNode(!0).style.backgroundClip = "", h.clearCloneStyle = "content-box" === c.style.backgroundClip, w.extend(h, {
      boxSizingReliable: function () {
        return t(), o;
      },
      pixelBoxStyles: function () {
        return t(), s;
      },
      pixelPosition: function () {
        return t(), i;
      },
      reliableMarginLeft: function () {
        return t(), u;
      },
      scrollboxSize: function () {
        return t(), a;
      }
    }));
  }();

  function Fe(e, t, n) {
    var r,
        i,
        o,
        a,
        s = e.style;
    return (n = n || $e(e)) && ("" !== (a = n.getPropertyValue(t) || n[t]) || w.contains(e.ownerDocument, e) || (a = w.style(e, t)), !h.pixelBoxStyles() && We.test(a) && Be.test(t) && (r = s.width, i = s.minWidth, o = s.maxWidth, s.minWidth = s.maxWidth = s.width = a, a = n.width, s.width = r, s.minWidth = i, s.maxWidth = o)), void 0 !== a ? a + "" : a;
  }

  function _e(e, t) {
    return {
      get: function () {
        if (!e()) return (this.get = t).apply(this, arguments);
        delete this.get;
      }
    };
  }

  var ze = /^(none|table(?!-c[ea]).+)/,
      Xe = /^--/,
      Ue = {
    position: "absolute",
    visibility: "hidden",
    display: "block"
  },
      Ve = {
    letterSpacing: "0",
    fontWeight: "400"
  },
      Ge = ["Webkit", "Moz", "ms"],
      Ye = r.createElement("div").style;

  function Qe(e) {
    if (e in Ye) return e;
    var t = e[0].toUpperCase() + e.slice(1),
        n = Ge.length;

    while (n--) if ((e = Ge[n] + t) in Ye) return e;
  }

  function Je(e) {
    var t = w.cssProps[e];
    return t || (t = w.cssProps[e] = Qe(e) || e), t;
  }

  function Ke(e, t, n) {
    var r = ie.exec(t);
    return r ? Math.max(0, r[2] - (n || 0)) + (r[3] || "px") : t;
  }

  function Ze(e, t, n, r, i, o) {
    var a = "width" === t ? 1 : 0,
        s = 0,
        u = 0;
    if (n === (r ? "border" : "content")) return 0;

    for (; a < 4; a += 2) "margin" === n && (u += w.css(e, n + oe[a], !0, i)), r ? ("content" === n && (u -= w.css(e, "padding" + oe[a], !0, i)), "margin" !== n && (u -= w.css(e, "border" + oe[a] + "Width", !0, i))) : (u += w.css(e, "padding" + oe[a], !0, i), "padding" !== n ? u += w.css(e, "border" + oe[a] + "Width", !0, i) : s += w.css(e, "border" + oe[a] + "Width", !0, i));

    return !r && o >= 0 && (u += Math.max(0, Math.ceil(e["offset" + t[0].toUpperCase() + t.slice(1)] - o - u - s - .5))), u;
  }

  function et(e, t, n) {
    var r = $e(e),
        i = Fe(e, t, r),
        o = "border-box" === w.css(e, "boxSizing", !1, r),
        a = o;

    if (We.test(i)) {
      if (!n) return i;
      i = "auto";
    }

    return a = a && (h.boxSizingReliable() || i === e.style[t]), ("auto" === i || !parseFloat(i) && "inline" === w.css(e, "display", !1, r)) && (i = e["offset" + t[0].toUpperCase() + t.slice(1)], a = !0), (i = parseFloat(i) || 0) + Ze(e, t, n || (o ? "border" : "content"), a, r, i) + "px";
  }

  w.extend({
    cssHooks: {
      opacity: {
        get: function (e, t) {
          if (t) {
            var n = Fe(e, "opacity");
            return "" === n ? "1" : n;
          }
        }
      }
    },
    cssNumber: {
      animationIterationCount: !0,
      columnCount: !0,
      fillOpacity: !0,
      flexGrow: !0,
      flexShrink: !0,
      fontWeight: !0,
      lineHeight: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0
    },
    cssProps: {},
    style: function (e, t, n, r) {
      if (e && 3 !== e.nodeType && 8 !== e.nodeType && e.style) {
        var i,
            o,
            a,
            s = G(t),
            u = Xe.test(t),
            l = e.style;
        if (u || (t = Je(s)), a = w.cssHooks[t] || w.cssHooks[s], void 0 === n) return a && "get" in a && void 0 !== (i = a.get(e, !1, r)) ? i : l[t];
        "string" == (o = typeof n) && (i = ie.exec(n)) && i[1] && (n = ue(e, t, i), o = "number"), null != n && n === n && ("number" === o && (n += i && i[3] || (w.cssNumber[s] ? "" : "px")), h.clearCloneStyle || "" !== n || 0 !== t.indexOf("background") || (l[t] = "inherit"), a && "set" in a && void 0 === (n = a.set(e, n, r)) || (u ? l.setProperty(t, n) : l[t] = n));
      }
    },
    css: function (e, t, n, r) {
      var i,
          o,
          a,
          s = G(t);
      return Xe.test(t) || (t = Je(s)), (a = w.cssHooks[t] || w.cssHooks[s]) && "get" in a && (i = a.get(e, !0, n)), void 0 === i && (i = Fe(e, t, r)), "normal" === i && t in Ve && (i = Ve[t]), "" === n || n ? (o = parseFloat(i), !0 === n || isFinite(o) ? o || 0 : i) : i;
    }
  }), w.each(["height", "width"], function (e, t) {
    w.cssHooks[t] = {
      get: function (e, n, r) {
        if (n) return !ze.test(w.css(e, "display")) || e.getClientRects().length && e.getBoundingClientRect().width ? et(e, t, r) : se(e, Ue, function () {
          return et(e, t, r);
        });
      },
      set: function (e, n, r) {
        var i,
            o = $e(e),
            a = "border-box" === w.css(e, "boxSizing", !1, o),
            s = r && Ze(e, t, r, a, o);
        return a && h.scrollboxSize() === o.position && (s -= Math.ceil(e["offset" + t[0].toUpperCase() + t.slice(1)] - parseFloat(o[t]) - Ze(e, t, "border", !1, o) - .5)), s && (i = ie.exec(n)) && "px" !== (i[3] || "px") && (e.style[t] = n, n = w.css(e, t)), Ke(e, n, s);
      }
    };
  }), w.cssHooks.marginLeft = _e(h.reliableMarginLeft, function (e, t) {
    if (t) return (parseFloat(Fe(e, "marginLeft")) || e.getBoundingClientRect().left - se(e, {
      marginLeft: 0
    }, function () {
      return e.getBoundingClientRect().left;
    })) + "px";
  }), w.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (e, t) {
    w.cssHooks[e + t] = {
      expand: function (n) {
        for (var r = 0, i = {}, o = "string" == typeof n ? n.split(" ") : [n]; r < 4; r++) i[e + oe[r] + t] = o[r] || o[r - 2] || o[0];

        return i;
      }
    }, "margin" !== e && (w.cssHooks[e + t].set = Ke);
  }), w.fn.extend({
    css: function (e, t) {
      return z(this, function (e, t, n) {
        var r,
            i,
            o = {},
            a = 0;

        if (Array.isArray(t)) {
          for (r = $e(e), i = t.length; a < i; a++) o[t[a]] = w.css(e, t[a], !1, r);

          return o;
        }

        return void 0 !== n ? w.style(e, t, n) : w.css(e, t);
      }, e, t, arguments.length > 1);
    }
  });

  function tt(e, t, n, r, i) {
    return new tt.prototype.init(e, t, n, r, i);
  }

  w.Tween = tt, tt.prototype = {
    constructor: tt,
    init: function (e, t, n, r, i, o) {
      this.elem = e, this.prop = n, this.easing = i || w.easing._default, this.options = t, this.start = this.now = this.cur(), this.end = r, this.unit = o || (w.cssNumber[n] ? "" : "px");
    },
    cur: function () {
      var e = tt.propHooks[this.prop];
      return e && e.get ? e.get(this) : tt.propHooks._default.get(this);
    },
    run: function (e) {
      var t,
          n = tt.propHooks[this.prop];
      return this.options.duration ? this.pos = t = w.easing[this.easing](e, this.options.duration * e, 0, 1, this.options.duration) : this.pos = t = e, this.now = (this.end - this.start) * t + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), n && n.set ? n.set(this) : tt.propHooks._default.set(this), this;
    }
  }, tt.prototype.init.prototype = tt.prototype, tt.propHooks = {
    _default: {
      get: function (e) {
        var t;
        return 1 !== e.elem.nodeType || null != e.elem[e.prop] && null == e.elem.style[e.prop] ? e.elem[e.prop] : (t = w.css(e.elem, e.prop, "")) && "auto" !== t ? t : 0;
      },
      set: function (e) {
        w.fx.step[e.prop] ? w.fx.step[e.prop](e) : 1 !== e.elem.nodeType || null == e.elem.style[w.cssProps[e.prop]] && !w.cssHooks[e.prop] ? e.elem[e.prop] = e.now : w.style(e.elem, e.prop, e.now + e.unit);
      }
    }
  }, tt.propHooks.scrollTop = tt.propHooks.scrollLeft = {
    set: function (e) {
      e.elem.nodeType && e.elem.parentNode && (e.elem[e.prop] = e.now);
    }
  }, w.easing = {
    linear: function (e) {
      return e;
    },
    swing: function (e) {
      return .5 - Math.cos(e * Math.PI) / 2;
    },
    _default: "swing"
  }, w.fx = tt.prototype.init, w.fx.step = {};
  var nt,
      rt,
      it = /^(?:toggle|show|hide)$/,
      ot = /queueHooks$/;

  function at() {
    rt && (!1 === r.hidden && e.requestAnimationFrame ? e.requestAnimationFrame(at) : e.setTimeout(at, w.fx.interval), w.fx.tick());
  }

  function st() {
    return e.setTimeout(function () {
      nt = void 0;
    }), nt = Date.now();
  }

  function ut(e, t) {
    var n,
        r = 0,
        i = {
      height: e
    };

    for (t = t ? 1 : 0; r < 4; r += 2 - t) i["margin" + (n = oe[r])] = i["padding" + n] = e;

    return t && (i.opacity = i.width = e), i;
  }

  function lt(e, t, n) {
    for (var r, i = (pt.tweeners[t] || []).concat(pt.tweeners["*"]), o = 0, a = i.length; o < a; o++) if (r = i[o].call(n, t, e)) return r;
  }

  function ct(e, t, n) {
    var r,
        i,
        o,
        a,
        s,
        u,
        l,
        c,
        f = "width" in t || "height" in t,
        p = this,
        d = {},
        h = e.style,
        g = e.nodeType && ae(e),
        y = J.get(e, "fxshow");
    n.queue || (null == (a = w._queueHooks(e, "fx")).unqueued && (a.unqueued = 0, s = a.empty.fire, a.empty.fire = function () {
      a.unqueued || s();
    }), a.unqueued++, p.always(function () {
      p.always(function () {
        a.unqueued--, w.queue(e, "fx").length || a.empty.fire();
      });
    }));

    for (r in t) if (i = t[r], it.test(i)) {
      if (delete t[r], o = o || "toggle" === i, i === (g ? "hide" : "show")) {
        if ("show" !== i || !y || void 0 === y[r]) continue;
        g = !0;
      }

      d[r] = y && y[r] || w.style(e, r);
    }

    if ((u = !w.isEmptyObject(t)) || !w.isEmptyObject(d)) {
      f && 1 === e.nodeType && (n.overflow = [h.overflow, h.overflowX, h.overflowY], null == (l = y && y.display) && (l = J.get(e, "display")), "none" === (c = w.css(e, "display")) && (l ? c = l : (fe([e], !0), l = e.style.display || l, c = w.css(e, "display"), fe([e]))), ("inline" === c || "inline-block" === c && null != l) && "none" === w.css(e, "float") && (u || (p.done(function () {
        h.display = l;
      }), null == l && (c = h.display, l = "none" === c ? "" : c)), h.display = "inline-block")), n.overflow && (h.overflow = "hidden", p.always(function () {
        h.overflow = n.overflow[0], h.overflowX = n.overflow[1], h.overflowY = n.overflow[2];
      })), u = !1;

      for (r in d) u || (y ? "hidden" in y && (g = y.hidden) : y = J.access(e, "fxshow", {
        display: l
      }), o && (y.hidden = !g), g && fe([e], !0), p.done(function () {
        g || fe([e]), J.remove(e, "fxshow");

        for (r in d) w.style(e, r, d[r]);
      })), u = lt(g ? y[r] : 0, r, p), r in y || (y[r] = u.start, g && (u.end = u.start, u.start = 0));
    }
  }

  function ft(e, t) {
    var n, r, i, o, a;

    for (n in e) if (r = G(n), i = t[r], o = e[n], Array.isArray(o) && (i = o[1], o = e[n] = o[0]), n !== r && (e[r] = o, delete e[n]), (a = w.cssHooks[r]) && "expand" in a) {
      o = a.expand(o), delete e[r];

      for (n in o) n in e || (e[n] = o[n], t[n] = i);
    } else t[r] = i;
  }

  function pt(e, t, n) {
    var r,
        i,
        o = 0,
        a = pt.prefilters.length,
        s = w.Deferred().always(function () {
      delete u.elem;
    }),
        u = function () {
      if (i) return !1;

      for (var t = nt || st(), n = Math.max(0, l.startTime + l.duration - t), r = 1 - (n / l.duration || 0), o = 0, a = l.tweens.length; o < a; o++) l.tweens[o].run(r);

      return s.notifyWith(e, [l, r, n]), r < 1 && a ? n : (a || s.notifyWith(e, [l, 1, 0]), s.resolveWith(e, [l]), !1);
    },
        l = s.promise({
      elem: e,
      props: w.extend({}, t),
      opts: w.extend(!0, {
        specialEasing: {},
        easing: w.easing._default
      }, n),
      originalProperties: t,
      originalOptions: n,
      startTime: nt || st(),
      duration: n.duration,
      tweens: [],
      createTween: function (t, n) {
        var r = w.Tween(e, l.opts, t, n, l.opts.specialEasing[t] || l.opts.easing);
        return l.tweens.push(r), r;
      },
      stop: function (t) {
        var n = 0,
            r = t ? l.tweens.length : 0;
        if (i) return this;

        for (i = !0; n < r; n++) l.tweens[n].run(1);

        return t ? (s.notifyWith(e, [l, 1, 0]), s.resolveWith(e, [l, t])) : s.rejectWith(e, [l, t]), this;
      }
    }),
        c = l.props;

    for (ft(c, l.opts.specialEasing); o < a; o++) if (r = pt.prefilters[o].call(l, e, c, l.opts)) return g(r.stop) && (w._queueHooks(l.elem, l.opts.queue).stop = r.stop.bind(r)), r;

    return w.map(c, lt, l), g(l.opts.start) && l.opts.start.call(e, l), l.progress(l.opts.progress).done(l.opts.done, l.opts.complete).fail(l.opts.fail).always(l.opts.always), w.fx.timer(w.extend(u, {
      elem: e,
      anim: l,
      queue: l.opts.queue
    })), l;
  }

  w.Animation = w.extend(pt, {
    tweeners: {
      "*": [function (e, t) {
        var n = this.createTween(e, t);
        return ue(n.elem, e, ie.exec(t), n), n;
      }]
    },
    tweener: function (e, t) {
      g(e) ? (t = e, e = ["*"]) : e = e.match(M);

      for (var n, r = 0, i = e.length; r < i; r++) n = e[r], pt.tweeners[n] = pt.tweeners[n] || [], pt.tweeners[n].unshift(t);
    },
    prefilters: [ct],
    prefilter: function (e, t) {
      t ? pt.prefilters.unshift(e) : pt.prefilters.push(e);
    }
  }), w.speed = function (e, t, n) {
    var r = e && "object" == typeof e ? w.extend({}, e) : {
      complete: n || !n && t || g(e) && e,
      duration: e,
      easing: n && t || t && !g(t) && t
    };
    return w.fx.off ? r.duration = 0 : "number" != typeof r.duration && (r.duration in w.fx.speeds ? r.duration = w.fx.speeds[r.duration] : r.duration = w.fx.speeds._default), null != r.queue && !0 !== r.queue || (r.queue = "fx"), r.old = r.complete, r.complete = function () {
      g(r.old) && r.old.call(this), r.queue && w.dequeue(this, r.queue);
    }, r;
  }, w.fn.extend({
    fadeTo: function (e, t, n, r) {
      return this.filter(ae).css("opacity", 0).show().end().animate({
        opacity: t
      }, e, n, r);
    },
    animate: function (e, t, n, r) {
      var i = w.isEmptyObject(e),
          o = w.speed(t, n, r),
          a = function () {
        var t = pt(this, w.extend({}, e), o);
        (i || J.get(this, "finish")) && t.stop(!0);
      };

      return a.finish = a, i || !1 === o.queue ? this.each(a) : this.queue(o.queue, a);
    },
    stop: function (e, t, n) {
      var r = function (e) {
        var t = e.stop;
        delete e.stop, t(n);
      };

      return "string" != typeof e && (n = t, t = e, e = void 0), t && !1 !== e && this.queue(e || "fx", []), this.each(function () {
        var t = !0,
            i = null != e && e + "queueHooks",
            o = w.timers,
            a = J.get(this);
        if (i) a[i] && a[i].stop && r(a[i]);else for (i in a) a[i] && a[i].stop && ot.test(i) && r(a[i]);

        for (i = o.length; i--;) o[i].elem !== this || null != e && o[i].queue !== e || (o[i].anim.stop(n), t = !1, o.splice(i, 1));

        !t && n || w.dequeue(this, e);
      });
    },
    finish: function (e) {
      return !1 !== e && (e = e || "fx"), this.each(function () {
        var t,
            n = J.get(this),
            r = n[e + "queue"],
            i = n[e + "queueHooks"],
            o = w.timers,
            a = r ? r.length : 0;

        for (n.finish = !0, w.queue(this, e, []), i && i.stop && i.stop.call(this, !0), t = o.length; t--;) o[t].elem === this && o[t].queue === e && (o[t].anim.stop(!0), o.splice(t, 1));

        for (t = 0; t < a; t++) r[t] && r[t].finish && r[t].finish.call(this);

        delete n.finish;
      });
    }
  }), w.each(["toggle", "show", "hide"], function (e, t) {
    var n = w.fn[t];

    w.fn[t] = function (e, r, i) {
      return null == e || "boolean" == typeof e ? n.apply(this, arguments) : this.animate(ut(t, !0), e, r, i);
    };
  }), w.each({
    slideDown: ut("show"),
    slideUp: ut("hide"),
    slideToggle: ut("toggle"),
    fadeIn: {
      opacity: "show"
    },
    fadeOut: {
      opacity: "hide"
    },
    fadeToggle: {
      opacity: "toggle"
    }
  }, function (e, t) {
    w.fn[e] = function (e, n, r) {
      return this.animate(t, e, n, r);
    };
  }), w.timers = [], w.fx.tick = function () {
    var e,
        t = 0,
        n = w.timers;

    for (nt = Date.now(); t < n.length; t++) (e = n[t])() || n[t] !== e || n.splice(t--, 1);

    n.length || w.fx.stop(), nt = void 0;
  }, w.fx.timer = function (e) {
    w.timers.push(e), w.fx.start();
  }, w.fx.interval = 13, w.fx.start = function () {
    rt || (rt = !0, at());
  }, w.fx.stop = function () {
    rt = null;
  }, w.fx.speeds = {
    slow: 600,
    fast: 200,
    _default: 400
  }, w.fn.delay = function (t, n) {
    return t = w.fx ? w.fx.speeds[t] || t : t, n = n || "fx", this.queue(n, function (n, r) {
      var i = e.setTimeout(n, t);

      r.stop = function () {
        e.clearTimeout(i);
      };
    });
  }, function () {
    var e = r.createElement("input"),
        t = r.createElement("select").appendChild(r.createElement("option"));
    e.type = "checkbox", h.checkOn = "" !== e.value, h.optSelected = t.selected, (e = r.createElement("input")).value = "t", e.type = "radio", h.radioValue = "t" === e.value;
  }();
  var dt,
      ht = w.expr.attrHandle;
  w.fn.extend({
    attr: function (e, t) {
      return z(this, w.attr, e, t, arguments.length > 1);
    },
    removeAttr: function (e) {
      return this.each(function () {
        w.removeAttr(this, e);
      });
    }
  }), w.extend({
    attr: function (e, t, n) {
      var r,
          i,
          o = e.nodeType;
      if (3 !== o && 8 !== o && 2 !== o) return "undefined" == typeof e.getAttribute ? w.prop(e, t, n) : (1 === o && w.isXMLDoc(e) || (i = w.attrHooks[t.toLowerCase()] || (w.expr.match.bool.test(t) ? dt : void 0)), void 0 !== n ? null === n ? void w.removeAttr(e, t) : i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : (e.setAttribute(t, n + ""), n) : i && "get" in i && null !== (r = i.get(e, t)) ? r : null == (r = w.find.attr(e, t)) ? void 0 : r);
    },
    attrHooks: {
      type: {
        set: function (e, t) {
          if (!h.radioValue && "radio" === t && N(e, "input")) {
            var n = e.value;
            return e.setAttribute("type", t), n && (e.value = n), t;
          }
        }
      }
    },
    removeAttr: function (e, t) {
      var n,
          r = 0,
          i = t && t.match(M);
      if (i && 1 === e.nodeType) while (n = i[r++]) e.removeAttribute(n);
    }
  }), dt = {
    set: function (e, t, n) {
      return !1 === t ? w.removeAttr(e, n) : e.setAttribute(n, n), n;
    }
  }, w.each(w.expr.match.bool.source.match(/\w+/g), function (e, t) {
    var n = ht[t] || w.find.attr;

    ht[t] = function (e, t, r) {
      var i,
          o,
          a = t.toLowerCase();
      return r || (o = ht[a], ht[a] = i, i = null != n(e, t, r) ? a : null, ht[a] = o), i;
    };
  });
  var gt = /^(?:input|select|textarea|button)$/i,
      yt = /^(?:a|area)$/i;
  w.fn.extend({
    prop: function (e, t) {
      return z(this, w.prop, e, t, arguments.length > 1);
    },
    removeProp: function (e) {
      return this.each(function () {
        delete this[w.propFix[e] || e];
      });
    }
  }), w.extend({
    prop: function (e, t, n) {
      var r,
          i,
          o = e.nodeType;
      if (3 !== o && 8 !== o && 2 !== o) return 1 === o && w.isXMLDoc(e) || (t = w.propFix[t] || t, i = w.propHooks[t]), void 0 !== n ? i && "set" in i && void 0 !== (r = i.set(e, n, t)) ? r : e[t] = n : i && "get" in i && null !== (r = i.get(e, t)) ? r : e[t];
    },
    propHooks: {
      tabIndex: {
        get: function (e) {
          var t = w.find.attr(e, "tabindex");
          return t ? parseInt(t, 10) : gt.test(e.nodeName) || yt.test(e.nodeName) && e.href ? 0 : -1;
        }
      }
    },
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  }), h.optSelected || (w.propHooks.selected = {
    get: function (e) {
      var t = e.parentNode;
      return t && t.parentNode && t.parentNode.selectedIndex, null;
    },
    set: function (e) {
      var t = e.parentNode;
      t && (t.selectedIndex, t.parentNode && t.parentNode.selectedIndex);
    }
  }), w.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    w.propFix[this.toLowerCase()] = this;
  });

  function vt(e) {
    return (e.match(M) || []).join(" ");
  }

  function mt(e) {
    return e.getAttribute && e.getAttribute("class") || "";
  }

  function xt(e) {
    return Array.isArray(e) ? e : "string" == typeof e ? e.match(M) || [] : [];
  }

  w.fn.extend({
    addClass: function (e) {
      var t,
          n,
          r,
          i,
          o,
          a,
          s,
          u = 0;
      if (g(e)) return this.each(function (t) {
        w(this).addClass(e.call(this, t, mt(this)));
      });
      if ((t = xt(e)).length) while (n = this[u++]) if (i = mt(n), r = 1 === n.nodeType && " " + vt(i) + " ") {
        a = 0;

        while (o = t[a++]) r.indexOf(" " + o + " ") < 0 && (r += o + " ");

        i !== (s = vt(r)) && n.setAttribute("class", s);
      }
      return this;
    },
    removeClass: function (e) {
      var t,
          n,
          r,
          i,
          o,
          a,
          s,
          u = 0;
      if (g(e)) return this.each(function (t) {
        w(this).removeClass(e.call(this, t, mt(this)));
      });
      if (!arguments.length) return this.attr("class", "");
      if ((t = xt(e)).length) while (n = this[u++]) if (i = mt(n), r = 1 === n.nodeType && " " + vt(i) + " ") {
        a = 0;

        while (o = t[a++]) while (r.indexOf(" " + o + " ") > -1) r = r.replace(" " + o + " ", " ");

        i !== (s = vt(r)) && n.setAttribute("class", s);
      }
      return this;
    },
    toggleClass: function (e, t) {
      var n = typeof e,
          r = "string" === n || Array.isArray(e);
      return "boolean" == typeof t && r ? t ? this.addClass(e) : this.removeClass(e) : g(e) ? this.each(function (n) {
        w(this).toggleClass(e.call(this, n, mt(this), t), t);
      }) : this.each(function () {
        var t, i, o, a;

        if (r) {
          i = 0, o = w(this), a = xt(e);

          while (t = a[i++]) o.hasClass(t) ? o.removeClass(t) : o.addClass(t);
        } else void 0 !== e && "boolean" !== n || ((t = mt(this)) && J.set(this, "__className__", t), this.setAttribute && this.setAttribute("class", t || !1 === e ? "" : J.get(this, "__className__") || ""));
      });
    },
    hasClass: function (e) {
      var t,
          n,
          r = 0;
      t = " " + e + " ";

      while (n = this[r++]) if (1 === n.nodeType && (" " + vt(mt(n)) + " ").indexOf(t) > -1) return !0;

      return !1;
    }
  });
  var bt = /\r/g;
  w.fn.extend({
    val: function (e) {
      var t,
          n,
          r,
          i = this[0];
      {
        if (arguments.length) return r = g(e), this.each(function (n) {
          var i;
          1 === this.nodeType && (null == (i = r ? e.call(this, n, w(this).val()) : e) ? i = "" : "number" == typeof i ? i += "" : Array.isArray(i) && (i = w.map(i, function (e) {
            return null == e ? "" : e + "";
          })), (t = w.valHooks[this.type] || w.valHooks[this.nodeName.toLowerCase()]) && "set" in t && void 0 !== t.set(this, i, "value") || (this.value = i));
        });
        if (i) return (t = w.valHooks[i.type] || w.valHooks[i.nodeName.toLowerCase()]) && "get" in t && void 0 !== (n = t.get(i, "value")) ? n : "string" == typeof (n = i.value) ? n.replace(bt, "") : null == n ? "" : n;
      }
    }
  }), w.extend({
    valHooks: {
      option: {
        get: function (e) {
          var t = w.find.attr(e, "value");
          return null != t ? t : vt(w.text(e));
        }
      },
      select: {
        get: function (e) {
          var t,
              n,
              r,
              i = e.options,
              o = e.selectedIndex,
              a = "select-one" === e.type,
              s = a ? null : [],
              u = a ? o + 1 : i.length;

          for (r = o < 0 ? u : a ? o : 0; r < u; r++) if (((n = i[r]).selected || r === o) && !n.disabled && (!n.parentNode.disabled || !N(n.parentNode, "optgroup"))) {
            if (t = w(n).val(), a) return t;
            s.push(t);
          }

          return s;
        },
        set: function (e, t) {
          var n,
              r,
              i = e.options,
              o = w.makeArray(t),
              a = i.length;

          while (a--) ((r = i[a]).selected = w.inArray(w.valHooks.option.get(r), o) > -1) && (n = !0);

          return n || (e.selectedIndex = -1), o;
        }
      }
    }
  }), w.each(["radio", "checkbox"], function () {
    w.valHooks[this] = {
      set: function (e, t) {
        if (Array.isArray(t)) return e.checked = w.inArray(w(e).val(), t) > -1;
      }
    }, h.checkOn || (w.valHooks[this].get = function (e) {
      return null === e.getAttribute("value") ? "on" : e.value;
    });
  }), h.focusin = "onfocusin" in e;

  var wt = /^(?:focusinfocus|focusoutblur)$/,
      Tt = function (e) {
    e.stopPropagation();
  };

  w.extend(w.event, {
    trigger: function (t, n, i, o) {
      var a,
          s,
          u,
          l,
          c,
          p,
          d,
          h,
          v = [i || r],
          m = f.call(t, "type") ? t.type : t,
          x = f.call(t, "namespace") ? t.namespace.split(".") : [];

      if (s = h = u = i = i || r, 3 !== i.nodeType && 8 !== i.nodeType && !wt.test(m + w.event.triggered) && (m.indexOf(".") > -1 && (m = (x = m.split(".")).shift(), x.sort()), c = m.indexOf(":") < 0 && "on" + m, t = t[w.expando] ? t : new w.Event(m, "object" == typeof t && t), t.isTrigger = o ? 2 : 3, t.namespace = x.join("."), t.rnamespace = t.namespace ? new RegExp("(^|\\.)" + x.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, t.result = void 0, t.target || (t.target = i), n = null == n ? [t] : w.makeArray(n, [t]), d = w.event.special[m] || {}, o || !d.trigger || !1 !== d.trigger.apply(i, n))) {
        if (!o && !d.noBubble && !y(i)) {
          for (l = d.delegateType || m, wt.test(l + m) || (s = s.parentNode); s; s = s.parentNode) v.push(s), u = s;

          u === (i.ownerDocument || r) && v.push(u.defaultView || u.parentWindow || e);
        }

        a = 0;

        while ((s = v[a++]) && !t.isPropagationStopped()) h = s, t.type = a > 1 ? l : d.bindType || m, (p = (J.get(s, "events") || {})[t.type] && J.get(s, "handle")) && p.apply(s, n), (p = c && s[c]) && p.apply && Y(s) && (t.result = p.apply(s, n), !1 === t.result && t.preventDefault());

        return t.type = m, o || t.isDefaultPrevented() || d._default && !1 !== d._default.apply(v.pop(), n) || !Y(i) || c && g(i[m]) && !y(i) && ((u = i[c]) && (i[c] = null), w.event.triggered = m, t.isPropagationStopped() && h.addEventListener(m, Tt), i[m](), t.isPropagationStopped() && h.removeEventListener(m, Tt), w.event.triggered = void 0, u && (i[c] = u)), t.result;
      }
    },
    simulate: function (e, t, n) {
      var r = w.extend(new w.Event(), n, {
        type: e,
        isSimulated: !0
      });
      w.event.trigger(r, null, t);
    }
  }), w.fn.extend({
    trigger: function (e, t) {
      return this.each(function () {
        w.event.trigger(e, t, this);
      });
    },
    triggerHandler: function (e, t) {
      var n = this[0];
      if (n) return w.event.trigger(e, t, n, !0);
    }
  }), h.focusin || w.each({
    focus: "focusin",
    blur: "focusout"
  }, function (e, t) {
    var n = function (e) {
      w.event.simulate(t, e.target, w.event.fix(e));
    };

    w.event.special[t] = {
      setup: function () {
        var r = this.ownerDocument || this,
            i = J.access(r, t);
        i || r.addEventListener(e, n, !0), J.access(r, t, (i || 0) + 1);
      },
      teardown: function () {
        var r = this.ownerDocument || this,
            i = J.access(r, t) - 1;
        i ? J.access(r, t, i) : (r.removeEventListener(e, n, !0), J.remove(r, t));
      }
    };
  });
  var Ct = e.location,
      Et = Date.now(),
      kt = /\?/;

  w.parseXML = function (t) {
    var n;
    if (!t || "string" != typeof t) return null;

    try {
      n = new e.DOMParser().parseFromString(t, "text/xml");
    } catch (e) {
      n = void 0;
    }

    return n && !n.getElementsByTagName("parsererror").length || w.error("Invalid XML: " + t), n;
  };

  var St = /\[\]$/,
      Dt = /\r?\n/g,
      Nt = /^(?:submit|button|image|reset|file)$/i,
      At = /^(?:input|select|textarea|keygen)/i;

  function jt(e, t, n, r) {
    var i;
    if (Array.isArray(t)) w.each(t, function (t, i) {
      n || St.test(e) ? r(e, i) : jt(e + "[" + ("object" == typeof i && null != i ? t : "") + "]", i, n, r);
    });else if (n || "object" !== x(t)) r(e, t);else for (i in t) jt(e + "[" + i + "]", t[i], n, r);
  }

  w.param = function (e, t) {
    var n,
        r = [],
        i = function (e, t) {
      var n = g(t) ? t() : t;
      r[r.length] = encodeURIComponent(e) + "=" + encodeURIComponent(null == n ? "" : n);
    };

    if (Array.isArray(e) || e.jquery && !w.isPlainObject(e)) w.each(e, function () {
      i(this.name, this.value);
    });else for (n in e) jt(n, e[n], t, i);
    return r.join("&");
  }, w.fn.extend({
    serialize: function () {
      return w.param(this.serializeArray());
    },
    serializeArray: function () {
      return this.map(function () {
        var e = w.prop(this, "elements");
        return e ? w.makeArray(e) : this;
      }).filter(function () {
        var e = this.type;
        return this.name && !w(this).is(":disabled") && At.test(this.nodeName) && !Nt.test(e) && (this.checked || !pe.test(e));
      }).map(function (e, t) {
        var n = w(this).val();
        return null == n ? null : Array.isArray(n) ? w.map(n, function (e) {
          return {
            name: t.name,
            value: e.replace(Dt, "\r\n")
          };
        }) : {
          name: t.name,
          value: n.replace(Dt, "\r\n")
        };
      }).get();
    }
  });
  var qt = /%20/g,
      Lt = /#.*$/,
      Ht = /([?&])_=[^&]*/,
      Ot = /^(.*?):[ \t]*([^\r\n]*)$/gm,
      Pt = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
      Mt = /^(?:GET|HEAD)$/,
      Rt = /^\/\//,
      It = {},
      Wt = {},
      $t = "*/".concat("*"),
      Bt = r.createElement("a");
  Bt.href = Ct.href;

  function Ft(e) {
    return function (t, n) {
      "string" != typeof t && (n = t, t = "*");
      var r,
          i = 0,
          o = t.toLowerCase().match(M) || [];
      if (g(n)) while (r = o[i++]) "+" === r[0] ? (r = r.slice(1) || "*", (e[r] = e[r] || []).unshift(n)) : (e[r] = e[r] || []).push(n);
    };
  }

  function _t(e, t, n, r) {
    var i = {},
        o = e === Wt;

    function a(s) {
      var u;
      return i[s] = !0, w.each(e[s] || [], function (e, s) {
        var l = s(t, n, r);
        return "string" != typeof l || o || i[l] ? o ? !(u = l) : void 0 : (t.dataTypes.unshift(l), a(l), !1);
      }), u;
    }

    return a(t.dataTypes[0]) || !i["*"] && a("*");
  }

  function zt(e, t) {
    var n,
        r,
        i = w.ajaxSettings.flatOptions || {};

    for (n in t) void 0 !== t[n] && ((i[n] ? e : r || (r = {}))[n] = t[n]);

    return r && w.extend(!0, e, r), e;
  }

  function Xt(e, t, n) {
    var r,
        i,
        o,
        a,
        s = e.contents,
        u = e.dataTypes;

    while ("*" === u[0]) u.shift(), void 0 === r && (r = e.mimeType || t.getResponseHeader("Content-Type"));

    if (r) for (i in s) if (s[i] && s[i].test(r)) {
      u.unshift(i);
      break;
    }
    if (u[0] in n) o = u[0];else {
      for (i in n) {
        if (!u[0] || e.converters[i + " " + u[0]]) {
          o = i;
          break;
        }

        a || (a = i);
      }

      o = o || a;
    }
    if (o) return o !== u[0] && u.unshift(o), n[o];
  }

  function Ut(e, t, n, r) {
    var i,
        o,
        a,
        s,
        u,
        l = {},
        c = e.dataTypes.slice();
    if (c[1]) for (a in e.converters) l[a.toLowerCase()] = e.converters[a];
    o = c.shift();

    while (o) if (e.responseFields[o] && (n[e.responseFields[o]] = t), !u && r && e.dataFilter && (t = e.dataFilter(t, e.dataType)), u = o, o = c.shift()) if ("*" === o) o = u;else if ("*" !== u && u !== o) {
      if (!(a = l[u + " " + o] || l["* " + o])) for (i in l) if ((s = i.split(" "))[1] === o && (a = l[u + " " + s[0]] || l["* " + s[0]])) {
        !0 === a ? a = l[i] : !0 !== l[i] && (o = s[0], c.unshift(s[1]));
        break;
      }
      if (!0 !== a) if (a && e["throws"]) t = a(t);else try {
        t = a(t);
      } catch (e) {
        return {
          state: "parsererror",
          error: a ? e : "No conversion from " + u + " to " + o
        };
      }
    }

    return {
      state: "success",
      data: t
    };
  }

  w.extend({
    active: 0,
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: Ct.href,
      type: "GET",
      isLocal: Pt.test(Ct.protocol),
      global: !0,
      processData: !0,
      async: !0,
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      accepts: {
        "*": $t,
        text: "text/plain",
        html: "text/html",
        xml: "application/xml, text/xml",
        json: "application/json, text/javascript"
      },
      contents: {
        xml: /\bxml\b/,
        html: /\bhtml/,
        json: /\bjson\b/
      },
      responseFields: {
        xml: "responseXML",
        text: "responseText",
        json: "responseJSON"
      },
      converters: {
        "* text": String,
        "text html": !0,
        "text json": JSON.parse,
        "text xml": w.parseXML
      },
      flatOptions: {
        url: !0,
        context: !0
      }
    },
    ajaxSetup: function (e, t) {
      return t ? zt(zt(e, w.ajaxSettings), t) : zt(w.ajaxSettings, e);
    },
    ajaxPrefilter: Ft(It),
    ajaxTransport: Ft(Wt),
    ajax: function (t, n) {
      "object" == typeof t && (n = t, t = void 0), n = n || {};
      var i,
          o,
          a,
          s,
          u,
          l,
          c,
          f,
          p,
          d,
          h = w.ajaxSetup({}, n),
          g = h.context || h,
          y = h.context && (g.nodeType || g.jquery) ? w(g) : w.event,
          v = w.Deferred(),
          m = w.Callbacks("once memory"),
          x = h.statusCode || {},
          b = {},
          T = {},
          C = "canceled",
          E = {
        readyState: 0,
        getResponseHeader: function (e) {
          var t;

          if (c) {
            if (!s) {
              s = {};

              while (t = Ot.exec(a)) s[t[1].toLowerCase()] = t[2];
            }

            t = s[e.toLowerCase()];
          }

          return null == t ? null : t;
        },
        getAllResponseHeaders: function () {
          return c ? a : null;
        },
        setRequestHeader: function (e, t) {
          return null == c && (e = T[e.toLowerCase()] = T[e.toLowerCase()] || e, b[e] = t), this;
        },
        overrideMimeType: function (e) {
          return null == c && (h.mimeType = e), this;
        },
        statusCode: function (e) {
          var t;
          if (e) if (c) E.always(e[E.status]);else for (t in e) x[t] = [x[t], e[t]];
          return this;
        },
        abort: function (e) {
          var t = e || C;
          return i && i.abort(t), k(0, t), this;
        }
      };

      if (v.promise(E), h.url = ((t || h.url || Ct.href) + "").replace(Rt, Ct.protocol + "//"), h.type = n.method || n.type || h.method || h.type, h.dataTypes = (h.dataType || "*").toLowerCase().match(M) || [""], null == h.crossDomain) {
        l = r.createElement("a");

        try {
          l.href = h.url, l.href = l.href, h.crossDomain = Bt.protocol + "//" + Bt.host != l.protocol + "//" + l.host;
        } catch (e) {
          h.crossDomain = !0;
        }
      }

      if (h.data && h.processData && "string" != typeof h.data && (h.data = w.param(h.data, h.traditional)), _t(It, h, n, E), c) return E;
      (f = w.event && h.global) && 0 == w.active++ && w.event.trigger("ajaxStart"), h.type = h.type.toUpperCase(), h.hasContent = !Mt.test(h.type), o = h.url.replace(Lt, ""), h.hasContent ? h.data && h.processData && 0 === (h.contentType || "").indexOf("application/x-www-form-urlencoded") && (h.data = h.data.replace(qt, "+")) : (d = h.url.slice(o.length), h.data && (h.processData || "string" == typeof h.data) && (o += (kt.test(o) ? "&" : "?") + h.data, delete h.data), !1 === h.cache && (o = o.replace(Ht, "$1"), d = (kt.test(o) ? "&" : "?") + "_=" + Et++ + d), h.url = o + d), h.ifModified && (w.lastModified[o] && E.setRequestHeader("If-Modified-Since", w.lastModified[o]), w.etag[o] && E.setRequestHeader("If-None-Match", w.etag[o])), (h.data && h.hasContent && !1 !== h.contentType || n.contentType) && E.setRequestHeader("Content-Type", h.contentType), E.setRequestHeader("Accept", h.dataTypes[0] && h.accepts[h.dataTypes[0]] ? h.accepts[h.dataTypes[0]] + ("*" !== h.dataTypes[0] ? ", " + $t + "; q=0.01" : "") : h.accepts["*"]);

      for (p in h.headers) E.setRequestHeader(p, h.headers[p]);

      if (h.beforeSend && (!1 === h.beforeSend.call(g, E, h) || c)) return E.abort();

      if (C = "abort", m.add(h.complete), E.done(h.success), E.fail(h.error), i = _t(Wt, h, n, E)) {
        if (E.readyState = 1, f && y.trigger("ajaxSend", [E, h]), c) return E;
        h.async && h.timeout > 0 && (u = e.setTimeout(function () {
          E.abort("timeout");
        }, h.timeout));

        try {
          c = !1, i.send(b, k);
        } catch (e) {
          if (c) throw e;
          k(-1, e);
        }
      } else k(-1, "No Transport");

      function k(t, n, r, s) {
        var l,
            p,
            d,
            b,
            T,
            C = n;
        c || (c = !0, u && e.clearTimeout(u), i = void 0, a = s || "", E.readyState = t > 0 ? 4 : 0, l = t >= 200 && t < 300 || 304 === t, r && (b = Xt(h, E, r)), b = Ut(h, b, E, l), l ? (h.ifModified && ((T = E.getResponseHeader("Last-Modified")) && (w.lastModified[o] = T), (T = E.getResponseHeader("etag")) && (w.etag[o] = T)), 204 === t || "HEAD" === h.type ? C = "nocontent" : 304 === t ? C = "notmodified" : (C = b.state, p = b.data, l = !(d = b.error))) : (d = C, !t && C || (C = "error", t < 0 && (t = 0))), E.status = t, E.statusText = (n || C) + "", l ? v.resolveWith(g, [p, C, E]) : v.rejectWith(g, [E, C, d]), E.statusCode(x), x = void 0, f && y.trigger(l ? "ajaxSuccess" : "ajaxError", [E, h, l ? p : d]), m.fireWith(g, [E, C]), f && (y.trigger("ajaxComplete", [E, h]), --w.active || w.event.trigger("ajaxStop")));
      }

      return E;
    },
    getJSON: function (e, t, n) {
      return w.get(e, t, n, "json");
    },
    getScript: function (e, t) {
      return w.get(e, void 0, t, "script");
    }
  }), w.each(["get", "post"], function (e, t) {
    w[t] = function (e, n, r, i) {
      return g(n) && (i = i || r, r = n, n = void 0), w.ajax(w.extend({
        url: e,
        type: t,
        dataType: i,
        data: n,
        success: r
      }, w.isPlainObject(e) && e));
    };
  }), w._evalUrl = function (e) {
    return w.ajax({
      url: e,
      type: "GET",
      dataType: "script",
      cache: !0,
      async: !1,
      global: !1,
      "throws": !0
    });
  }, w.fn.extend({
    wrapAll: function (e) {
      var t;
      return this[0] && (g(e) && (e = e.call(this[0])), t = w(e, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && t.insertBefore(this[0]), t.map(function () {
        var e = this;

        while (e.firstElementChild) e = e.firstElementChild;

        return e;
      }).append(this)), this;
    },
    wrapInner: function (e) {
      return g(e) ? this.each(function (t) {
        w(this).wrapInner(e.call(this, t));
      }) : this.each(function () {
        var t = w(this),
            n = t.contents();
        n.length ? n.wrapAll(e) : t.append(e);
      });
    },
    wrap: function (e) {
      var t = g(e);
      return this.each(function (n) {
        w(this).wrapAll(t ? e.call(this, n) : e);
      });
    },
    unwrap: function (e) {
      return this.parent(e).not("body").each(function () {
        w(this).replaceWith(this.childNodes);
      }), this;
    }
  }), w.expr.pseudos.hidden = function (e) {
    return !w.expr.pseudos.visible(e);
  }, w.expr.pseudos.visible = function (e) {
    return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);
  }, w.ajaxSettings.xhr = function () {
    try {
      return new e.XMLHttpRequest();
    } catch (e) {}
  };
  var Vt = {
    0: 200,
    1223: 204
  },
      Gt = w.ajaxSettings.xhr();
  h.cors = !!Gt && "withCredentials" in Gt, h.ajax = Gt = !!Gt, w.ajaxTransport(function (t) {
    var n, r;
    if (h.cors || Gt && !t.crossDomain) return {
      send: function (i, o) {
        var a,
            s = t.xhr();
        if (s.open(t.type, t.url, t.async, t.username, t.password), t.xhrFields) for (a in t.xhrFields) s[a] = t.xhrFields[a];
        t.mimeType && s.overrideMimeType && s.overrideMimeType(t.mimeType), t.crossDomain || i["X-Requested-With"] || (i["X-Requested-With"] = "XMLHttpRequest");

        for (a in i) s.setRequestHeader(a, i[a]);

        n = function (e) {
          return function () {
            n && (n = r = s.onload = s.onerror = s.onabort = s.ontimeout = s.onreadystatechange = null, "abort" === e ? s.abort() : "error" === e ? "number" != typeof s.status ? o(0, "error") : o(s.status, s.statusText) : o(Vt[s.status] || s.status, s.statusText, "text" !== (s.responseType || "text") || "string" != typeof s.responseText ? {
              binary: s.response
            } : {
              text: s.responseText
            }, s.getAllResponseHeaders()));
          };
        }, s.onload = n(), r = s.onerror = s.ontimeout = n("error"), void 0 !== s.onabort ? s.onabort = r : s.onreadystatechange = function () {
          4 === s.readyState && e.setTimeout(function () {
            n && r();
          });
        }, n = n("abort");

        try {
          s.send(t.hasContent && t.data || null);
        } catch (e) {
          if (n) throw e;
        }
      },
      abort: function () {
        n && n();
      }
    };
  }), w.ajaxPrefilter(function (e) {
    e.crossDomain && (e.contents.script = !1);
  }), w.ajaxSetup({
    accepts: {
      script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
    },
    contents: {
      script: /\b(?:java|ecma)script\b/
    },
    converters: {
      "text script": function (e) {
        return w.globalEval(e), e;
      }
    }
  }), w.ajaxPrefilter("script", function (e) {
    void 0 === e.cache && (e.cache = !1), e.crossDomain && (e.type = "GET");
  }), w.ajaxTransport("script", function (e) {
    if (e.crossDomain) {
      var t, n;
      return {
        send: function (i, o) {
          t = w("<script>").prop({
            charset: e.scriptCharset,
            src: e.url
          }).on("load error", n = function (e) {
            t.remove(), n = null, e && o("error" === e.type ? 404 : 200, e.type);
          }), r.head.appendChild(t[0]);
        },
        abort: function () {
          n && n();
        }
      };
    }
  });
  var Yt = [],
      Qt = /(=)\?(?=&|$)|\?\?/;
  w.ajaxSetup({
    jsonp: "callback",
    jsonpCallback: function () {
      var e = Yt.pop() || w.expando + "_" + Et++;
      return this[e] = !0, e;
    }
  }), w.ajaxPrefilter("json jsonp", function (t, n, r) {
    var i,
        o,
        a,
        s = !1 !== t.jsonp && (Qt.test(t.url) ? "url" : "string" == typeof t.data && 0 === (t.contentType || "").indexOf("application/x-www-form-urlencoded") && Qt.test(t.data) && "data");
    if (s || "jsonp" === t.dataTypes[0]) return i = t.jsonpCallback = g(t.jsonpCallback) ? t.jsonpCallback() : t.jsonpCallback, s ? t[s] = t[s].replace(Qt, "$1" + i) : !1 !== t.jsonp && (t.url += (kt.test(t.url) ? "&" : "?") + t.jsonp + "=" + i), t.converters["script json"] = function () {
      return a || w.error(i + " was not called"), a[0];
    }, t.dataTypes[0] = "json", o = e[i], e[i] = function () {
      a = arguments;
    }, r.always(function () {
      void 0 === o ? w(e).removeProp(i) : e[i] = o, t[i] && (t.jsonpCallback = n.jsonpCallback, Yt.push(i)), a && g(o) && o(a[0]), a = o = void 0;
    }), "script";
  }), h.createHTMLDocument = function () {
    var e = r.implementation.createHTMLDocument("").body;
    return e.innerHTML = "<form></form><form></form>", 2 === e.childNodes.length;
  }(), w.parseHTML = function (e, t, n) {
    if ("string" != typeof e) return [];
    "boolean" == typeof t && (n = t, t = !1);
    var i, o, a;
    return t || (h.createHTMLDocument ? ((i = (t = r.implementation.createHTMLDocument("")).createElement("base")).href = r.location.href, t.head.appendChild(i)) : t = r), o = A.exec(e), a = !n && [], o ? [t.createElement(o[1])] : (o = xe([e], t, a), a && a.length && w(a).remove(), w.merge([], o.childNodes));
  }, w.fn.load = function (e, t, n) {
    var r,
        i,
        o,
        a = this,
        s = e.indexOf(" ");
    return s > -1 && (r = vt(e.slice(s)), e = e.slice(0, s)), g(t) ? (n = t, t = void 0) : t && "object" == typeof t && (i = "POST"), a.length > 0 && w.ajax({
      url: e,
      type: i || "GET",
      dataType: "html",
      data: t
    }).done(function (e) {
      o = arguments, a.html(r ? w("<div>").append(w.parseHTML(e)).find(r) : e);
    }).always(n && function (e, t) {
      a.each(function () {
        n.apply(this, o || [e.responseText, t, e]);
      });
    }), this;
  }, w.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (e, t) {
    w.fn[t] = function (e) {
      return this.on(t, e);
    };
  }), w.expr.pseudos.animated = function (e) {
    return w.grep(w.timers, function (t) {
      return e === t.elem;
    }).length;
  }, w.offset = {
    setOffset: function (e, t, n) {
      var r,
          i,
          o,
          a,
          s,
          u,
          l,
          c = w.css(e, "position"),
          f = w(e),
          p = {};
      "static" === c && (e.style.position = "relative"), s = f.offset(), o = w.css(e, "top"), u = w.css(e, "left"), (l = ("absolute" === c || "fixed" === c) && (o + u).indexOf("auto") > -1) ? (a = (r = f.position()).top, i = r.left) : (a = parseFloat(o) || 0, i = parseFloat(u) || 0), g(t) && (t = t.call(e, n, w.extend({}, s))), null != t.top && (p.top = t.top - s.top + a), null != t.left && (p.left = t.left - s.left + i), "using" in t ? t.using.call(e, p) : f.css(p);
    }
  }, w.fn.extend({
    offset: function (e) {
      if (arguments.length) return void 0 === e ? this : this.each(function (t) {
        w.offset.setOffset(this, e, t);
      });
      var t,
          n,
          r = this[0];
      if (r) return r.getClientRects().length ? (t = r.getBoundingClientRect(), n = r.ownerDocument.defaultView, {
        top: t.top + n.pageYOffset,
        left: t.left + n.pageXOffset
      }) : {
        top: 0,
        left: 0
      };
    },
    position: function () {
      if (this[0]) {
        var e,
            t,
            n,
            r = this[0],
            i = {
          top: 0,
          left: 0
        };
        if ("fixed" === w.css(r, "position")) t = r.getBoundingClientRect();else {
          t = this.offset(), n = r.ownerDocument, e = r.offsetParent || n.documentElement;

          while (e && (e === n.body || e === n.documentElement) && "static" === w.css(e, "position")) e = e.parentNode;

          e && e !== r && 1 === e.nodeType && ((i = w(e).offset()).top += w.css(e, "borderTopWidth", !0), i.left += w.css(e, "borderLeftWidth", !0));
        }
        return {
          top: t.top - i.top - w.css(r, "marginTop", !0),
          left: t.left - i.left - w.css(r, "marginLeft", !0)
        };
      }
    },
    offsetParent: function () {
      return this.map(function () {
        var e = this.offsetParent;

        while (e && "static" === w.css(e, "position")) e = e.offsetParent;

        return e || be;
      });
    }
  }), w.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function (e, t) {
    var n = "pageYOffset" === t;

    w.fn[e] = function (r) {
      return z(this, function (e, r, i) {
        var o;
        if (y(e) ? o = e : 9 === e.nodeType && (o = e.defaultView), void 0 === i) return o ? o[t] : e[r];
        o ? o.scrollTo(n ? o.pageXOffset : i, n ? i : o.pageYOffset) : e[r] = i;
      }, e, r, arguments.length);
    };
  }), w.each(["top", "left"], function (e, t) {
    w.cssHooks[t] = _e(h.pixelPosition, function (e, n) {
      if (n) return n = Fe(e, t), We.test(n) ? w(e).position()[t] + "px" : n;
    });
  }), w.each({
    Height: "height",
    Width: "width"
  }, function (e, t) {
    w.each({
      padding: "inner" + e,
      content: t,
      "": "outer" + e
    }, function (n, r) {
      w.fn[r] = function (i, o) {
        var a = arguments.length && (n || "boolean" != typeof i),
            s = n || (!0 === i || !0 === o ? "margin" : "border");
        return z(this, function (t, n, i) {
          var o;
          return y(t) ? 0 === r.indexOf("outer") ? t["inner" + e] : t.document.documentElement["client" + e] : 9 === t.nodeType ? (o = t.documentElement, Math.max(t.body["scroll" + e], o["scroll" + e], t.body["offset" + e], o["offset" + e], o["client" + e])) : void 0 === i ? w.css(t, n, s) : w.style(t, n, i, s);
        }, t, a ? i : void 0, a);
      };
    });
  }), w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "), function (e, t) {
    w.fn[t] = function (e, n) {
      return arguments.length > 0 ? this.on(t, null, e, n) : this.trigger(t);
    };
  }), w.fn.extend({
    hover: function (e, t) {
      return this.mouseenter(e).mouseleave(t || e);
    }
  }), w.fn.extend({
    bind: function (e, t, n) {
      return this.on(e, null, t, n);
    },
    unbind: function (e, t) {
      return this.off(e, null, t);
    },
    delegate: function (e, t, n, r) {
      return this.on(t, e, n, r);
    },
    undelegate: function (e, t, n) {
      return 1 === arguments.length ? this.off(e, "**") : this.off(t, e || "**", n);
    }
  }), w.proxy = function (e, t) {
    var n, r, i;
    if ("string" == typeof t && (n = e[t], t = e, e = n), g(e)) return r = o.call(arguments, 2), i = function () {
      return e.apply(t || this, r.concat(o.call(arguments)));
    }, i.guid = e.guid = e.guid || w.guid++, i;
  }, w.holdReady = function (e) {
    e ? w.readyWait++ : w.ready(!0);
  }, w.isArray = Array.isArray, w.parseJSON = JSON.parse, w.nodeName = N, w.isFunction = g, w.isWindow = y, w.camelCase = G, w.type = x, w.now = Date.now, w.isNumeric = function (e) {
    var t = w.type(e);
    return ("number" === t || "string" === t) && !isNaN(e - parseFloat(e));
  },  true && !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    return w;
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  var Jt = e.jQuery,
      Kt = e.$;
  return w.noConflict = function (t) {
    return e.$ === w && (e.$ = Kt), t && e.jQuery === w && (e.jQuery = Jt), w;
  }, t || (e.jQuery = e.$ = w), w;
});

/***/ }),

/***/ "./src/limitless-2.0.1/global_assets/js/plugins/forms/styling/uniform.min.js":
/*!***********************************************************************************!*\
  !*** ./src/limitless-2.0.1/global_assets/js/plugins/forms/styling/uniform.min.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {!function (e, t, n) {
  "use strict";

  function s(e) {
    var t = Array.prototype.slice.call(arguments, 1);
    return e.prop ? e.prop.apply(e, t) : e.attr.apply(e, t);
  }

  function a(e, t, n) {
    var s, a;

    for (s in n) n.hasOwnProperty(s) && (a = s.replace(/ |$/g, t.eventNamespace), e.bind(a, n[s]));
  }

  function i(e, t, n) {
    a(e, n, {
      focus: function () {
        t.addClass(n.focusClass);
      },
      blur: function () {
        t.removeClass(n.focusClass), t.removeClass(n.activeClass);
      },
      mouseenter: function () {
        t.addClass(n.hoverClass);
      },
      mouseleave: function () {
        t.removeClass(n.hoverClass), t.removeClass(n.activeClass);
      },
      "mousedown touchbegin": function () {
        e.is(":disabled") || t.addClass(n.activeClass);
      },
      "mouseup touchend": function () {
        t.removeClass(n.activeClass);
      }
    });
  }

  function r(e, t) {
    e.removeClass(t.hoverClass + " " + t.focusClass + " " + t.activeClass);
  }

  function l(e, t, n) {
    n ? e.addClass(t) : e.removeClass(t);
  }

  function u(e, t, n) {
    setTimeout(function () {
      var s = "checked",
          a = t.is(":" + s);
      t.prop ? t.prop(s, a) : a ? t.attr(s, s) : t.removeAttr(s), l(e, n.checkedClass, a);
    }, 1);
  }

  function o(e, t, n) {
    l(e, n.disabledClass, t.is(":disabled"));
  }

  function c(e, t, n) {
    switch (n) {
      case "after":
        return e.after(t), e.next();

      case "before":
        return e.before(t), e.prev();

      case "wrap":
        return e.wrap(t), e.parent();
    }

    return null;
  }

  function d(e, n, a) {
    var i, r, l;
    return a || (a = {}), a = t.extend({
      bind: {},
      divClass: null,
      divWrap: "wrap",
      spanClass: null,
      spanHtml: null,
      spanWrap: "wrap"
    }, a), i = t("<div />"), r = t("<span />"), n.autoHide && e.is(":hidden") && "none" === e.css("display") && i.hide(), a.divClass && i.addClass(a.divClass), n.wrapperClass && i.addClass(n.wrapperClass), a.spanClass && r.addClass(a.spanClass), l = s(e, "id"), n.useID && l && s(i, "id", n.idPrefix + "-" + l), a.spanHtml && r.html(a.spanHtml), i = c(e, i, a.divWrap), r = c(e, r, a.spanWrap), o(i, e, n), {
      div: i,
      span: r
    };
  }

  function f(e, n) {
    var s;
    return n.wrapperClass ? (s = t("<span />").addClass(n.wrapperClass), s = c(e, s, "wrap")) : null;
  }

  function p() {
    var n, s, a, i;
    return i = "rgb(120,2,153)", s = t('<div style="width:0;height:0;color:' + i + '">'), t("body").append(s), a = s.get(0), n = e.getComputedStyle ? e.getComputedStyle(a, "").color : (a.currentStyle || a.style || {}).color, s.remove(), n.replace(/ /g, "") !== i;
  }

  function m(e) {
    return e ? t("<span />").text(e).html() : "";
  }

  function v() {
    return navigator.cpuClass && !navigator.product;
  }

  function h() {
    return void 0 !== e.XMLHttpRequest;
  }

  function C(e) {
    var t;
    return !!e[0].multiple || (t = s(e, "size"), !(!t || t <= 1));
  }

  function b() {
    return !1;
  }

  function y(e, t) {
    var n = "none";
    a(e, t, {
      "selectstart dragstart mousedown": b
    }), e.css({
      MozUserSelect: n,
      msUserSelect: n,
      webkitUserSelect: n,
      userSelect: n
    });
  }

  function w(e, t, n) {
    var s = e.val();
    "" === s ? s = n.fileDefaultHtml : (s = s.split(/[\/\\]+/), s = s[s.length - 1]), t.text(s);
  }

  function g(e, t, n) {
    var s, a;

    for (s = [], e.each(function () {
      var e;

      for (e in t) Object.prototype.hasOwnProperty.call(t, e) && (s.push({
        el: this,
        name: e,
        old: this.style[e]
      }), this.style[e] = t[e]);
    }), n(); s.length;) a = s.pop(), a.el.style[a.name] = a.old;
  }

  function k(e, t) {
    var n;
    n = e.parents(), n.push(e[0]), n = n.not(":visible"), g(n, {
      visibility: "hidden",
      display: "block",
      position: "absolute"
    }, t);
  }

  function H(e, t) {
    return function () {
      e.unwrap().unwrap().unbind(t.eventNamespace);
    };
  }

  var x = !0,
      A = !1,
      W = [{
    match: function (e) {
      return e.is("a, button, :submit, :reset, input[type='button']");
    },
    apply: function (t, n) {
      var l, u, c, f, p;
      return u = n.submitDefaultHtml, t.is(":reset") && (u = n.resetDefaultHtml), f = t.is("a, button") ? function () {
        return t.html() || u;
      } : function () {
        return m(s(t, "value")) || u;
      }, c = d(t, n, {
        divClass: n.buttonClass,
        spanHtml: f()
      }), l = c.div, i(t, l, n), p = !1, a(l, n, {
        "click touchend": function () {
          var n, a, i, r;
          return !p && !t.is(":disabled") && (p = !0, t[0].dispatchEvent ? (n = document.createEvent("MouseEvents"), n.initEvent("click", !0, !0), a = t[0].dispatchEvent(n), t.is("a") && a && (i = s(t, "target"), r = s(t, "href"), i && "_self" !== i ? e.open(r, i) : document.location.href = r)) : t.click(), void (p = !1));
        }
      }), y(l, n), {
        remove: function () {
          return l.after(t), l.remove(), t.unbind(n.eventNamespace), t;
        },
        update: function () {
          r(l, n), o(l, t, n), t.detach(), c.span.html(f()).append(t);
        }
      };
    }
  }, {
    match: function (e) {
      return e.is(":checkbox");
    },
    apply: function (e, t) {
      var n, s, l;
      return n = d(e, t, {
        divClass: t.checkboxClass
      }), s = n.div, l = n.span, i(e, s, t), a(e, t, {
        "click touchend": function () {
          u(l, e, t);
        }
      }), u(l, e, t), {
        remove: H(e, t),
        update: function () {
          r(s, t), l.removeClass(t.checkedClass), u(l, e, t), o(s, e, t);
        }
      };
    }
  }, {
    match: function (e) {
      return e.is(":file");
    },
    apply: function (e, n) {
      function l() {
        w(e, p, n);
      }

      var u,
          f,
          p,
          m,
          h = "undefined" != typeof e.attr("multiple");
      return u = d(e, n, {
        divClass: n.fileClass,
        spanClass: n.fileButtonClass,
        spanHtml: h ? n.filesButtonHtml : n.fileButtonHtml,
        spanWrap: "after"
      }), f = u.div, m = u.span, p = t("<span />").html(n.fileDefaultHtml), p.addClass(n.filenameClass), p = c(e, p, "after"), s(e, "size") || s(e, "size", f.width() / 10), i(e, f, n), l(), v() ? a(e, n, {
        click: function () {
          e.trigger("change"), setTimeout(l, 0);
        }
      }) : a(e, n, {
        change: l
      }), y(p, n), y(m, n), {
        remove: function () {
          return p.remove(), m.remove(), e.unwrap().unbind(n.eventNamespace);
        },
        update: function () {
          r(f, n), w(e, p, n), o(f, e, n);
        }
      };
    }
  }, {
    match: function (e) {
      if (e.is("input")) {
        var t = (" " + s(e, "type") + " ").toLowerCase(),
            n = " color date datetime datetime-local email month number password search tel text time url week ";
        return n.indexOf(t) >= 0;
      }

      return !1;
    },
    apply: function (e, t) {
      var n, a;
      return n = s(e, "type"), e.addClass(t.inputClass), a = f(e, t), i(e, e, t), t.inputAddTypeAsClass && e.addClass(n), {
        remove: function () {
          e.removeClass(t.inputClass), t.inputAddTypeAsClass && e.removeClass(n), a && e.unwrap();
        },
        update: b
      };
    }
  }, {
    match: function (e) {
      return e.is(":radio");
    },
    apply: function (e, n) {
      var l, c, f;
      return l = d(e, n, {
        divClass: n.radioClass
      }), c = l.div, f = l.span, i(e, c, n), a(e, n, {
        "click touchend": function () {
          void 0 !== e.attr("name") ? t.uniform.update(t(':radio[name="' + s(e, "name") + '"]')) : t.uniform.update(e);
        }
      }), u(f, e, n), {
        remove: H(e, n),
        update: function () {
          r(c, n), u(f, e, n), o(c, e, n);
        }
      };
    }
  }, {
    match: function (e) {
      return !(!e.is("select") || C(e));
    },
    apply: function (e, n) {
      var s, l, u, c;
      return n.selectAutoWidth && k(e, function () {
        c = e.width();
      }), s = d(e, n, {
        divClass: n.selectClass,
        spanHtml: (e.find(":selected:first") || e.find("option:first")).html(),
        spanWrap: "before"
      }), l = s.div, u = s.span, n.selectAutoWidth ? k(e, function () {
        g(t([u[0], l[0]]), {
          display: "block"
        }, function () {
          var e;
          e = u.outerWidth() - u.width(), l.width(c + e), u.width(c);
        });
      }) : l.addClass("fixedWidth"), i(e, l, n), a(e, n, {
        change: function () {
          u.html(e.find(":selected").html()), l.removeClass(n.activeClass);
        },
        "click touchend": function () {
          var t = e.find(":selected").html();
          u.html() !== t && e.trigger("change");
        },
        keyup: function () {
          u.html(e.find(":selected").html());
        }
      }), y(u, n), {
        remove: function () {
          return u.remove(), e.unwrap().unbind(n.eventNamespace), e;
        },
        update: function () {
          n.selectAutoWidth ? (t.uniform.restore(e), e.uniform(n)) : (r(l, n), e[0].selectedIndex = e[0].selectedIndex, u.html(e.find(":selected").html()), o(l, e, n));
        }
      };
    }
  }, {
    match: function (e) {
      return !(!e.is("select") || !C(e));
    },
    apply: function (e, t) {
      var n;
      return e.addClass(t.selectMultiClass), n = f(e, t), i(e, e, t), {
        remove: function () {
          e.removeClass(t.selectMultiClass), n && e.unwrap();
        },
        update: b
      };
    }
  }, {
    match: function (e) {
      return e.is("textarea");
    },
    apply: function (e, t) {
      var n;
      return e.addClass(t.textareaClass), n = f(e, t), i(e, e, t), {
        remove: function () {
          e.removeClass(t.textareaClass), n && e.unwrap();
        },
        update: b
      };
    }
  }];
  v() && !h() && (x = !1), t.uniform = {
    defaults: {
      activeClass: "active",
      autoHide: !0,
      buttonClass: "button",
      checkboxClass: "uniform-checker",
      checkedClass: "checked",
      disabledClass: "disabled",
      eventNamespace: ".uniform",
      fileButtonClass: "action btn btn-light",
      fileButtonHtml: "Choose File",
      filesButtonHtml: "Choose Files",
      fileClass: "uniform-uploader",
      fileDefaultHtml: "No file selected",
      filenameClass: "filename",
      focusClass: "focus",
      hoverClass: "hover",
      idPrefix: "uniform",
      inputAddTypeAsClass: !0,
      inputClass: "uniform-input",
      radioClass: "uniform-choice",
      resetDefaultHtml: "Reset",
      resetSelector: !1,
      selectAutoWidth: !1,
      selectClass: "uniform-select",
      selectMultiClass: "uniform-multiselect",
      submitDefaultHtml: "Submit",
      textareaClass: "uniform",
      useID: !0,
      wrapperClass: null
    },
    elements: []
  }, t.fn.uniform = function (n) {
    var s = this;
    return n = t.extend({}, t.uniform.defaults, n), A || (A = !0, p() && (x = !1)), x ? (n.resetSelector && t(n.resetSelector).mouseup(function () {
      e.setTimeout(function () {
        t.uniform.update(s);
      }, 10);
    }), this.each(function () {
      var e,
          s,
          a,
          i = t(this);
      if (i.data("uniformed")) return void t.uniform.update(i);

      for (e = 0; e < W.length; e += 1) if (s = W[e], s.match(i, n)) return a = s.apply(i, n), i.data("uniformed", a), void t.uniform.elements.push(i.get(0));
    })) : this;
  }, t.uniform.restore = t.fn.uniform.restore = function (e) {
    e === n && (e = t.uniform.elements), t(e).each(function () {
      var e,
          n,
          s = t(this);
      n = s.data("uniformed"), n && (n.remove(), e = t.inArray(this, t.uniform.elements), e >= 0 && t.uniform.elements.splice(e, 1), s.removeData("uniformed"));
    });
  }, t.uniform.update = t.fn.uniform.update = function (e) {
    e === n && (e = t.uniform.elements), t(e).each(function () {
      var e,
          n = t(this);
      e = n.data("uniformed"), e && e.update(n, e.options);
    });
  };
}(this, jQuery);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/limitless-2.0.1/global_assets/js/plugins/loaders/blockui.min.js":
/*!*****************************************************************************!*\
  !*** ./src/limitless-2.0.1/global_assets/js/plugins/loaders/blockui.min.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function () {
  "use strict";

  function e(e) {
    function t(t, n) {
      var s,
          h,
          k = t == window,
          y = n && void 0 !== n.message ? n.message : void 0;

      if (n = e.extend({}, e.blockUI.defaults, n || {}), !n.ignoreIfBlocked || !e(t).data("blockUI.isBlocked")) {
        if (n.overlayCSS = e.extend({}, e.blockUI.defaults.overlayCSS, n.overlayCSS || {}), s = e.extend({}, e.blockUI.defaults.css, n.css || {}), n.onOverlayClick && (n.overlayCSS.cursor = "pointer"), h = e.extend({}, e.blockUI.defaults.themedCSS, n.themedCSS || {}), y = void 0 === y ? n.message : y, k && p && o(window, {
          fadeOut: 0
        }), y && "string" != typeof y && (y.parentNode || y.jquery)) {
          var m = y.jquery ? y[0] : y,
              v = {};
          e(t).data("blockUI.history", v), v.el = m, v.parent = m.parentNode, v.display = m.style.display, v.position = m.style.position, v.parent && v.parent.removeChild(m);
        }

        e(t).data("blockUI.onUnblock", n.onUnblock);
        var g,
            I,
            w,
            U,
            x = n.baseZ;
        g = e(r || n.forceIframe ? '<iframe class="blockUI" style="z-index:' + x++ + ';display:none;border:none;margin:0;padding:0;position:absolute;width:100%;height:100%;top:0;left:0" src="' + n.iframeSrc + '"></iframe>' : '<div class="blockUI" style="display:none"></div>'), I = e(n.theme ? '<div class="blockUI blockOverlay ui-widget-overlay" style="z-index:' + x++ + ';display:none"></div>' : '<div class="blockUI blockOverlay" style="z-index:' + x++ + ';display:none;border:none;margin:0;padding:0;width:100%;height:100%;top:0;left:0"></div>'), n.theme && k ? (U = '<div class="blockUI ' + n.blockMsgClass + ' blockPage ui-dialog ui-widget ui-corner-all" style="z-index:' + (x + 10) + ';display:none;position:fixed">', n.title && (U += '<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">' + (n.title || "&nbsp;") + "</div>"), U += '<div class="ui-widget-content ui-dialog-content"></div>', U += "</div>") : n.theme ? (U = '<div class="blockUI ' + n.blockMsgClass + ' blockElement ui-dialog ui-widget ui-corner-all" style="z-index:' + (x + 10) + ';display:none;position:absolute">', n.title && (U += '<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">' + (n.title || "&nbsp;") + "</div>"), U += '<div class="ui-widget-content ui-dialog-content"></div>', U += "</div>") : U = k ? '<div class="blockUI ' + n.blockMsgClass + ' blockPage" style="z-index:' + (x + 10) + ';display:none;position:fixed"></div>' : '<div class="blockUI ' + n.blockMsgClass + ' blockElement" style="z-index:' + (x + 10) + ';display:none;position:absolute"></div>', w = e(U), y && (n.theme ? (w.css(h), w.addClass("ui-widget-content")) : w.css(s)), n.theme || I.css(n.overlayCSS), I.css("position", k ? "fixed" : "absolute"), (r || n.forceIframe) && g.css("opacity", 0);
        var C = [g, I, w],
            S = e(k ? "body" : t);
        e.each(C, function () {
          this.appendTo(S);
        }), n.theme && n.draggable && e.fn.draggable && w.draggable({
          handle: ".ui-dialog-titlebar",
          cancel: "li"
        });
        var O = f && (!e.support.boxModel || e("object,embed", k ? null : t).length > 0);

        if (u || O) {
          if (k && n.allowBodyStretch && e.support.boxModel && e("html,body").css("height", "100%"), (u || !e.support.boxModel) && !k) var E = d(t, "borderTopWidth"),
              T = d(t, "borderLeftWidth"),
              M = E ? "(0 - " + E + ")" : 0,
              B = T ? "(0 - " + T + ")" : 0;
          e.each(C, function (e, t) {
            var o = t[0].style;
            if (o.position = "absolute", 2 > e) k ? o.setExpression("height", "Math.max(document.body.scrollHeight, document.body.offsetHeight) - (jQuery.support.boxModel?0:" + n.quirksmodeOffsetHack + ') + "px"') : o.setExpression("height", 'this.parentNode.offsetHeight + "px"'), k ? o.setExpression("width", 'jQuery.support.boxModel && document.documentElement.clientWidth || document.body.clientWidth + "px"') : o.setExpression("width", 'this.parentNode.offsetWidth + "px"'), B && o.setExpression("left", B), M && o.setExpression("top", M);else if (n.centerY) k && o.setExpression("top", '(document.documentElement.clientHeight || document.body.clientHeight) / 2 - (this.offsetHeight / 2) + (blah = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + "px"'), o.marginTop = 0;else if (!n.centerY && k) {
              var i = n.css && n.css.top ? parseInt(n.css.top, 10) : 0,
                  s = "((document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + " + i + ') + "px"';
              o.setExpression("top", s);
            }
          });
        }

        if (y && (n.theme ? w.find(".ui-widget-content").append(y) : w.append(y), (y.jquery || y.nodeType) && e(y).show()), (r || n.forceIframe) && n.showOverlay && g.show(), n.fadeIn) {
          var j = n.onBlock ? n.onBlock : c,
              H = n.showOverlay && !y ? j : c,
              z = y ? j : c;
          n.showOverlay && I._fadeIn(n.fadeIn, H), y && w._fadeIn(n.fadeIn, z);
        } else n.showOverlay && I.show(), y && w.show(), n.onBlock && n.onBlock.bind(w)();

        if (i(1, t, n), k ? (p = w[0], b = e(n.focusableElements, p), n.focusInput && setTimeout(l, 20)) : a(w[0], n.centerX, n.centerY), n.timeout) {
          var W = setTimeout(function () {
            k ? e.unblockUI(n) : e(t).unblock(n);
          }, n.timeout);
          e(t).data("blockUI.timeout", W);
        }
      }
    }

    function o(t, o) {
      var s,
          l = t == window,
          a = e(t),
          d = a.data("blockUI.history"),
          c = a.data("blockUI.timeout");
      c && (clearTimeout(c), a.removeData("blockUI.timeout")), o = e.extend({}, e.blockUI.defaults, o || {}), i(0, t, o), null === o.onUnblock && (o.onUnblock = a.data("blockUI.onUnblock"), a.removeData("blockUI.onUnblock"));
      var r;
      r = l ? e("body").children().filter(".blockUI").add("body > .blockUI") : a.find(">.blockUI"), o.cursorReset && (r.length > 1 && (r[1].style.cursor = o.cursorReset), r.length > 2 && (r[2].style.cursor = o.cursorReset)), l && (p = b = null), o.fadeOut ? (s = r.length, r.stop().fadeOut(o.fadeOut, function () {
        0 === --s && n(r, d, o, t);
      })) : n(r, d, o, t);
    }

    function n(t, o, n, i) {
      var s = e(i);

      if (!s.data("blockUI.isBlocked")) {
        t.each(function (e, t) {
          this.parentNode && this.parentNode.removeChild(this);
        }), o && o.el && (o.el.style.display = o.display, o.el.style.position = o.position, o.el.style.cursor = "default", o.parent && o.parent.appendChild(o.el), s.removeData("blockUI.history")), s.data("blockUI.static") && s.css("position", "static"), "function" == typeof n.onUnblock && n.onUnblock(i, n);
        var l = e(document.body),
            a = l.width(),
            d = l[0].style.width;
        l.width(a - 1).width(a), l[0].style.width = d;
      }
    }

    function i(t, o, n) {
      var i = o == window,
          l = e(o);

      if ((t || (!i || p) && (i || l.data("blockUI.isBlocked"))) && (l.data("blockUI.isBlocked", t), i && n.bindEvents && (!t || n.showOverlay))) {
        var a = "mousedown mouseup keydown keypress keyup touchstart touchend touchmove";
        t ? e(document).bind(a, n, s) : e(document).unbind(a, s);
      }
    }

    function s(t) {
      if ("keydown" === t.type && t.keyCode && 9 == t.keyCode && p && t.data.constrainTabKey) {
        var o = b,
            n = !t.shiftKey && t.target === o[o.length - 1],
            i = t.shiftKey && t.target === o[0];
        if (n || i) return setTimeout(function () {
          l(i);
        }, 10), !1;
      }

      var s = t.data,
          a = e(t.target);
      return a.hasClass("blockOverlay") && s.onOverlayClick && s.onOverlayClick(t), a.parents("div." + s.blockMsgClass).length > 0 ? !0 : 0 === a.parents().children().filter("div.blockUI").length;
    }

    function l(e) {
      if (b) {
        var t = b[e === !0 ? b.length - 1 : 0];
        t && t.focus();
      }
    }

    function a(e, t, o) {
      var n = e.parentNode,
          i = e.style,
          s = (n.offsetWidth - e.offsetWidth) / 2 - d(n, "borderLeftWidth"),
          l = (n.offsetHeight - e.offsetHeight) / 2 - d(n, "borderTopWidth");
      t && (i.left = s > 0 ? s + "px" : "0"), o && (i.top = l > 0 ? l + "px" : "0");
    }

    function d(t, o) {
      return parseInt(e.css(t, o), 10) || 0;
    }

    e.fn._fadeIn = e.fn.fadeIn;

    var c = e.noop || function () {},
        r = /MSIE/.test(navigator.userAgent),
        u = /MSIE 6.0/.test(navigator.userAgent) && !/MSIE 8.0/.test(navigator.userAgent),
        f = (document.documentMode || 0, e.isFunction(document.createElement("div").style.setExpression));

    e.blockUI = function (e) {
      t(window, e);
    }, e.unblockUI = function (e) {
      o(window, e);
    }, e.growlUI = function (t, o, n, i) {
      var s = e('<div class="growlUI"></div>');
      t && s.append("<h1>" + t + "</h1>"), o && s.append("<h2>" + o + "</h2>"), void 0 === n && (n = 3e3);

      var l = function (t) {
        t = t || {}, e.blockUI({
          message: s,
          fadeIn: "undefined" != typeof t.fadeIn ? t.fadeIn : 700,
          fadeOut: "undefined" != typeof t.fadeOut ? t.fadeOut : 1e3,
          timeout: "undefined" != typeof t.timeout ? t.timeout : n,
          centerY: !1,
          showOverlay: !1,
          onUnblock: i,
          css: e.blockUI.defaults.growlCSS
        });
      };

      l();
      s.css("opacity");
      s.mouseover(function () {
        l({
          fadeIn: 0,
          timeout: 3e4
        });
        var t = e(".blockMsg");
        t.stop(), t.fadeTo(300, 1);
      }).mouseout(function () {
        e(".blockMsg").fadeOut(1e3);
      });
    }, e.fn.block = function (o) {
      if (this[0] === window) return e.blockUI(o), this;
      var n = e.extend({}, e.blockUI.defaults, o || {});
      return this.each(function () {
        var t = e(this);
        n.ignoreIfBlocked && t.data("blockUI.isBlocked") || t.unblock({
          fadeOut: 0
        });
      }), this.each(function () {
        "static" == e.css(this, "position") && (this.style.position = "relative", e(this).data("blockUI.static", !0)), this.style.zoom = 1, t(this, o);
      });
    }, e.fn.unblock = function (t) {
      return this[0] === window ? (e.unblockUI(t), this) : this.each(function () {
        o(this, t);
      });
    }, e.blockUI.version = 2.7, e.blockUI.defaults = {
      message: "<h1>Please wait...</h1>",
      title: null,
      draggable: !0,
      theme: !1,
      css: {
        padding: 0,
        margin: 0,
        width: "30%",
        top: "40%",
        left: "35%",
        textAlign: "center",
        color: "#000",
        border: "3px solid #aaa",
        backgroundColor: "#fff",
        cursor: "wait"
      },
      themedCSS: {
        width: "30%",
        top: "40%",
        left: "35%"
      },
      overlayCSS: {
        backgroundColor: "#000",
        opacity: .6,
        cursor: "wait"
      },
      cursorReset: "default",
      growlCSS: {
        width: "350px",
        top: "10px",
        left: "",
        right: "10px",
        border: "none",
        padding: "5px",
        opacity: .6,
        cursor: "default",
        color: "#fff",
        backgroundColor: "#000",
        "-webkit-border-radius": "10px",
        "-moz-border-radius": "10px",
        "border-radius": "10px"
      },
      iframeSrc: /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank",
      forceIframe: !1,
      baseZ: 1e3,
      centerX: !0,
      centerY: !0,
      allowBodyStretch: !0,
      bindEvents: !0,
      constrainTabKey: !0,
      fadeIn: 200,
      fadeOut: 400,
      timeout: 0,
      showOverlay: !0,
      focusInput: !0,
      focusableElements: ":input:enabled:visible",
      onBlock: null,
      onUnblock: null,
      onOverlayClick: null,
      quirksmodeOffsetHack: 4,
      blockMsgClass: "blockMsg",
      ignoreIfBlocked: !1
    };
    var p = null,
        b = [];
  }

   true && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js").jQuery ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : e(jQuery);
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/limitless-2.0.1/layout_2/default/assets/css/bootstrap.min.css":
/*!***************************************************************************!*\
  !*** ./src/limitless-2.0.1/layout_2/default/assets/css/bootstrap.min.css ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/limitless-2.0.1/layout_2/default/assets/css/bootstrap_limitless.min.css":
/*!*************************************************************************************!*\
  !*** ./src/limitless-2.0.1/layout_2/default/assets/css/bootstrap_limitless.min.css ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/limitless-2.0.1/layout_2/default/assets/css/colors.min.css":
/*!************************************************************************!*\
  !*** ./src/limitless-2.0.1/layout_2/default/assets/css/colors.min.css ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/limitless-2.0.1/layout_2/default/assets/css/components.min.css":
/*!****************************************************************************!*\
  !*** ./src/limitless-2.0.1/layout_2/default/assets/css/components.min.css ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/limitless-2.0.1/layout_2/default/assets/css/layout.min.css":
/*!************************************************************************!*\
  !*** ./src/limitless-2.0.1/layout_2/default/assets/css/layout.min.css ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS5uaWNlZm9ybS9kaXN0L2pxdWVyeS5uaWNlZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5Lm5pY2Vmb3JtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FkbWluL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb250cy9Sb2JvdG8uc2Nzcz8wZGFkIiwid2VicGFjazovLy8uL3NyYy9saW1pdGxlc3MtMi4wLjEvZ2xvYmFsX2Fzc2V0cy9jc3MvaWNvbnMvZm9udGF3ZXNvbWUvc3R5bGVzLm1pbi5jc3M/YjhhNCIsIndlYnBhY2s6Ly8vLi9zcmMvbGltaXRsZXNzLTIuMC4xL2dsb2JhbF9hc3NldHMvY3NzL2ljb25zL2ljb21vb24vc3R5bGVzLmNzcz8yNGM4Iiwid2VicGFjazovLy8uL3NyYy9saW1pdGxlc3MtMi4wLjEvZ2xvYmFsX2Fzc2V0cy9qcy9tYWluL2Jvb3RzdHJhcC5idW5kbGUubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9saW1pdGxlc3MtMi4wLjEvZ2xvYmFsX2Fzc2V0cy9qcy9tYWluL2pxdWVyeS5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpbWl0bGVzcy0yLjAuMS9nbG9iYWxfYXNzZXRzL2pzL3BsdWdpbnMvZm9ybXMvc3R5bGluZy91bmlmb3JtLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGltaXRsZXNzLTIuMC4xL2dsb2JhbF9hc3NldHMvanMvcGx1Z2lucy9sb2FkZXJzL2Jsb2NrdWkubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9saW1pdGxlc3MtMi4wLjEvbGF5b3V0XzIvZGVmYXVsdC9hc3NldHMvY3NzL2Jvb3RzdHJhcC5taW4uY3NzPzliOTciLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpbWl0bGVzcy0yLjAuMS9sYXlvdXRfMi9kZWZhdWx0L2Fzc2V0cy9jc3MvYm9vdHN0cmFwX2xpbWl0bGVzcy5taW4uY3NzPzY0ZjEiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpbWl0bGVzcy0yLjAuMS9sYXlvdXRfMi9kZWZhdWx0L2Fzc2V0cy9jc3MvY29sb3JzLm1pbi5jc3M/MDgzMSIsIndlYnBhY2s6Ly8vLi9zcmMvbGltaXRsZXNzLTIuMC4xL2xheW91dF8yL2RlZmF1bHQvYXNzZXRzL2Nzcy9jb21wb25lbnRzLm1pbi5jc3M/ZTVjMiIsIndlYnBhY2s6Ly8vLi9zcmMvbGltaXRsZXNzLTIuMC4xL2xheW91dF8yL2RlZmF1bHQvYXNzZXRzL2Nzcy9sYXlvdXQubWluLmNzcz81MzJlIl0sIm5hbWVzIjpbInQiLCJlIiwiZXhwb3J0cyIsInJlcXVpcmUiLCJpIiwibiIsImxlbmd0aCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwicyIsInByb3RvdHlwZSIsImMiLCJyIiwiYXJndW1lbnRzIiwibyIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjb25jYXQiLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJmb3JFYWNoIiwidmFsdWUiLCJhIiwibCIsImYiLCJoIiwidSIsImQiLCJwIiwiZyIsIm0iLCJfIiwidiIsIkUiLCJ5IiwiYiIsIlQiLCJDIiwidyIsIkkiLCJEIiwiQSIsIlMiLCJPIiwiTiIsImsiLCJMIiwiUCIsIngiLCJqIiwiTSIsIlIiLCJIIiwiVyIsIkYiLCJVIiwiQiIsIksiLCJWIiwiUSIsIlkiLCJHIiwicSIsInoiLCJYIiwiSiIsIloiLCIkIiwidHQiLCJldCIsIm50IiwiaXQiLCJydCIsIm90Iiwic3QiLCJhdCIsImx0IiwiY3QiLCJmdCIsImh0IiwidXQiLCJkdCIsInB0IiwiZ3QiLCJvbmUiLCJUUkFOU0lUSU9OX0VORCIsInNldFRpbWVvdXQiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsImdldFVJRCIsIk1hdGgiLCJyYW5kb20iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCIsImdldEF0dHJpYnV0ZSIsImZpbmQiLCJnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCIsImNzcyIsInBhcnNlRmxvYXQiLCJzcGxpdCIsInJlZmxvdyIsIm9mZnNldEhlaWdodCIsInRyaWdnZXIiLCJzdXBwb3J0c1RyYW5zaXRpb25FbmQiLCJCb29sZWFuIiwiaXNFbGVtZW50Iiwibm9kZVR5cGUiLCJ0eXBlQ2hlY2tDb25maWciLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ0b1N0cmluZyIsIm1hdGNoIiwidG9Mb3dlckNhc2UiLCJSZWdFeHAiLCJ0ZXN0IiwiRXJyb3IiLCJ0b1VwcGVyQ2FzZSIsImZuIiwiZW11bGF0ZVRyYW5zaXRpb25FbmQiLCJldmVudCIsInNwZWNpYWwiLCJiaW5kVHlwZSIsImRlbGVnYXRlVHlwZSIsImhhbmRsZSIsInRhcmdldCIsImlzIiwiaGFuZGxlT2JqIiwiaGFuZGxlciIsImFwcGx5IiwiZGVmYXVsdCIsIm10IiwiQ0xPU0UiLCJDTE9TRUQiLCJDTElDS19EQVRBX0FQSSIsIl9lbGVtZW50IiwiY2xvc2UiLCJfZ2V0Um9vdEVsZW1lbnQiLCJfdHJpZ2dlckNsb3NlRXZlbnQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJfcmVtb3ZlRWxlbWVudCIsImRpc3Bvc2UiLCJyZW1vdmVEYXRhIiwiY2xvc2VzdCIsIkV2ZW50IiwicmVtb3ZlQ2xhc3MiLCJoYXNDbGFzcyIsIl9kZXN0cm95RWxlbWVudCIsImRldGFjaCIsInJlbW92ZSIsIl9qUXVlcnlJbnRlcmZhY2UiLCJlYWNoIiwiZGF0YSIsIl9oYW5kbGVEaXNtaXNzIiwicHJldmVudERlZmF1bHQiLCJnZXQiLCJvbiIsIkNvbnN0cnVjdG9yIiwibm9Db25mbGljdCIsIl90IiwiRk9DVVNfQkxVUl9EQVRBX0FQSSIsInRvZ2dsZSIsInR5cGUiLCJjaGVja2VkIiwiaGFzQXR0cmlidXRlIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJmb2N1cyIsInNldEF0dHJpYnV0ZSIsInRvZ2dsZUNsYXNzIiwidnQiLCJpbnRlcnZhbCIsImtleWJvYXJkIiwic2xpZGUiLCJwYXVzZSIsIndyYXAiLCJTTElERSIsIlNMSUQiLCJLRVlET1dOIiwiTU9VU0VFTlRFUiIsIk1PVVNFTEVBVkUiLCJUT1VDSEVORCIsIkxPQURfREFUQV9BUEkiLCJBQ1RJVkUiLCJBQ1RJVkVfSVRFTSIsIklURU0iLCJORVhUX1BSRVYiLCJJTkRJQ0FUT1JTIiwiREFUQV9TTElERSIsIkRBVEFfUklERSIsIl9pdGVtcyIsIl9pbnRlcnZhbCIsIl9hY3RpdmVFbGVtZW50IiwiX2lzUGF1c2VkIiwiX2lzU2xpZGluZyIsInRvdWNoVGltZW91dCIsIl9jb25maWciLCJfZ2V0Q29uZmlnIiwiX2luZGljYXRvcnNFbGVtZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwibmV4dCIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsImhpZGRlbiIsInByZXYiLCJjeWNsZSIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInZpc2liaWxpdHlTdGF0ZSIsImJpbmQiLCJ0byIsIl9nZXRJdGVtSW5kZXgiLCJvZmYiLCJfa2V5ZG93biIsImRvY3VtZW50RWxlbWVudCIsImNsZWFyVGltZW91dCIsInRhZ05hbWUiLCJ3aGljaCIsIm1ha2VBcnJheSIsInBhcmVudCIsImluZGV4T2YiLCJfZ2V0SXRlbUJ5RGlyZWN0aW9uIiwiX3RyaWdnZXJTbGlkZUV2ZW50IiwicmVsYXRlZFRhcmdldCIsImRpcmVjdGlvbiIsImZyb20iLCJfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCIsImNoaWxkcmVuIiwiYWRkQ2xhc3MiLCJUeXBlRXJyb3IiLCJfZGF0YUFwaUNsaWNrSGFuZGxlciIsIndpbmRvdyIsIkV0IiwiU0hPVyIsIlNIT1dOIiwiSElERSIsIkhJRERFTiIsIkFDVElWRVMiLCJEQVRBX1RPR0dMRSIsIl9pc1RyYW5zaXRpb25pbmciLCJfdHJpZ2dlckFycmF5IiwiaWQiLCJfc2VsZWN0b3IiLCJwdXNoIiwiX3BhcmVudCIsIl9nZXRQYXJlbnQiLCJfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiaGlkZSIsInNob3ciLCJub3QiLCJfZ2V0RGltZW5zaW9uIiwic3R5bGUiLCJhdHRyIiwic2V0VHJhbnNpdGlvbmluZyIsInNsaWNlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwianF1ZXJ5IiwiX2dldFRhcmdldEZyb21FbGVtZW50IiwiY3VycmVudFRhcmdldCIsInl0IiwiYnQiLCJUdCIsIkN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwid3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJJdCIsIkR0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIkF0Iiwibm9kZU5hbWUiLCJwYXJlbnROb2RlIiwiaG9zdCIsIlN0IiwiYm9keSIsIm93bmVyRG9jdW1lbnQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsIk90IiwiTVNJbnB1dE1ldGhvZENvbnRleHQiLCJkb2N1bWVudE1vZGUiLCJOdCIsImt0IiwiTHQiLCJvZmZzZXRQYXJlbnQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJQdCIsInh0IiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOb2RlIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInNldEVuZCIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJqdCIsInNjcm9sbGluZ0VsZW1lbnQiLCJNdCIsIlJ0IiwibWF4IiwiSHQiLCJoZWlnaHQiLCJ3aWR0aCIsIld0IiwiRnQiLCJVdCIsIkJ0IiwiYXNzaWduIiwiS3QiLCJyaWdodCIsImxlZnQiLCJib3R0b20iLCJ0b3AiLCJWdCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0Iiwib2Zmc2V0V2lkdGgiLCJRdCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyTGVmdFdpZHRoIiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsIll0IiwicGFyZW50RWxlbWVudCIsIkd0IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwicXQiLCJtYXAiLCJhcmVhIiwic29ydCIsInp0IiwiWHQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5SaWdodCIsIkp0IiwicmVwbGFjZSIsIlp0IiwiJHQiLCJBcnJheSIsInRlIiwiZmluZEluZGV4IiwiZnVuY3Rpb24iLCJjb25zb2xlIiwid2FybiIsImVuYWJsZWQiLCJvZmZzZXRzIiwicG9wcGVyIiwicmVmZXJlbmNlIiwiZWUiLCJzb21lIiwibmFtZSIsIm5lIiwiY2hhckF0IiwiaWUiLCJkZWZhdWx0VmlldyIsInJlIiwidXBkYXRlQm91bmQiLCJhZGRFdmVudExpc3RlbmVyIiwicGFzc2l2ZSIsInNjcm9sbFBhcmVudHMiLCJzY3JvbGxFbGVtZW50IiwiZXZlbnRzRW5hYmxlZCIsIm9lIiwic3RhdGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInNjaGVkdWxlVXBkYXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNlIiwiaXNOYU4iLCJpc0Zpbml0ZSIsImFlIiwibGUiLCJvcmRlciIsImNlIiwiZmUiLCJoZSIsInJldmVyc2UiLCJ1ZSIsIkZMSVAiLCJDTE9DS1dJU0UiLCJDT1VOVEVSQ0xPQ0tXSVNFIiwiZGUiLCJ0cmltIiwic2VhcmNoIiwicmVkdWNlIiwicGUiLCJwbGFjZW1lbnQiLCJwb3NpdGlvbkZpeGVkIiwicmVtb3ZlT25EZXN0cm95Iiwib25DcmVhdGUiLCJvblVwZGF0ZSIsIm1vZGlmaWVycyIsInNoaWZ0Iiwic3RhcnQiLCJlbmQiLCJvZmZzZXQiLCJwcmV2ZW50T3ZlcmZsb3ciLCJib3VuZGFyaWVzRWxlbWVudCIsImluc3RhbmNlIiwicGFkZGluZyIsImJvdW5kYXJpZXMiLCJwcmlvcml0eSIsInByaW1hcnkiLCJlc2NhcGVXaXRoUmVmZXJlbmNlIiwic2Vjb25kYXJ5IiwibWluIiwia2VlcFRvZ2V0aGVyIiwiZmxvb3IiLCJhcnJvdyIsImVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYXJyb3dFbGVtZW50Iiwicm91bmQiLCJmbGlwIiwiZmxpcHBlZCIsIm9yaWdpbmFsUGxhY2VtZW50IiwiYmVoYXZpb3IiLCJmbGlwVmFyaWF0aW9ucyIsImlubmVyIiwiYXR0cmlidXRlcyIsImNvbXB1dGVTdHlsZSIsImdwdUFjY2VsZXJhdGlvbiIsInBvc2l0aW9uIiwid2lsbENoYW5nZSIsInN0eWxlcyIsImFycm93U3R5bGVzIiwiYXBwbHlTdHlsZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm9uTG9hZCIsImdlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidXBkYXRlIiwib3B0aW9ucyIsIkRlZmF1bHRzIiwiaXNEZXN0cm95ZWQiLCJpc0NyZWF0ZWQiLCJlbmFibGVFdmVudExpc3RlbmVycyIsImRpc2FibGVFdmVudExpc3RlbmVycyIsInJlbW92ZUNoaWxkIiwiVXRpbHMiLCJnbG9iYWwiLCJQb3BwZXJVdGlscyIsInBsYWNlbWVudHMiLCJtZSIsIl9lIiwidmUiLCJFZSIsInllIiwiYmUiLCJUZSIsIkNlIiwid2UiLCJJZSIsIkRlIiwiQWUiLCJTZSIsIk9lIiwiTmUiLCJrZSIsIkxlIiwiUGUiLCJ4ZSIsImplIiwiTWUiLCJSZSIsIkhlIiwiV2UiLCJGZSIsIlVlIiwiQmUiLCJLZSIsIlZlIiwiUWUiLCJZZSIsIkdlIiwicWUiLCJ6ZSIsIlhlIiwiSmUiLCJaZSIsIiRlIiwidG4iLCJlbiIsIm5uIiwicm4iLCJzbiIsImFuIiwibG4iLCJjbiIsImhuIiwidW4iLCJkbiIsInBuIiwiZ24iLCJtbiIsIl9uIiwidm4iLCJFbiIsInluIiwiYm4iLCJUbiIsIkNuIiwid24iLCJJbiIsIkRuIiwiQW4iLCJTbiIsIk9uIiwiTm4iLCJrbiIsIkxuIiwiUG4iLCJ4biIsImpuIiwiTW4iLCJSbiIsIkhuIiwiV24iLCJGbiIsIlVuIiwiQm4iLCJLbiIsIlZuIiwiUW4iLCJZbiIsIkduIiwicW4iLCJ6biIsIlhuIiwiSm4iLCJabiIsIiRuIiwidGkiLCJlaSIsIm5pIiwiaWkiLCJyaSIsIm9pIiwic2kiLCJhaSIsImxpIiwiY2kiLCJmaSIsImhpIiwidWkiLCJkaSIsInBpIiwiZ2kiLCJtaSIsIl9pIiwidmkiLCJFaSIsInlpIiwiYmkiLCJUaSIsIkNMSUNLIiwiS0VZRE9XTl9EQVRBX0FQSSIsIktFWVVQX0RBVEFfQVBJIiwiYm91bmRhcnkiLCJkaXNwbGF5IiwiX3BvcHBlciIsIl9tZW51IiwiX2dldE1lbnVFbGVtZW50IiwiX2luTmF2YmFyIiwiX2RldGVjdE5hdmJhciIsImRpc2FibGVkIiwiX2dldFBhcmVudEZyb21FbGVtZW50IiwiX2NsZWFyTWVudXMiLCJfZ2V0UG9wcGVyQ29uZmlnIiwibm9vcCIsImRlc3Ryb3kiLCJzdG9wUHJvcGFnYXRpb24iLCJjb25zdHJ1Y3RvciIsIkRlZmF1bHQiLCJEZWZhdWx0VHlwZSIsIl9nZXRQbGFjZW1lbnQiLCJfZGF0YUFwaUtleWRvd25IYW5kbGVyIiwiQ2kiLCJiYWNrZHJvcCIsIkZPQ1VTSU4iLCJSRVNJWkUiLCJDTElDS19ESVNNSVNTIiwiS0VZRE9XTl9ESVNNSVNTIiwiTU9VU0VVUF9ESVNNSVNTIiwiTU9VU0VET1dOX0RJU01JU1MiLCJESUFMT0ciLCJEQVRBX0RJU01JU1MiLCJGSVhFRF9DT05URU5UIiwiU1RJQ0tZX0NPTlRFTlQiLCJOQVZCQVJfVE9HR0xFUiIsIl9kaWFsb2ciLCJfYmFja2Ryb3AiLCJfaXNTaG93biIsIl9pc0JvZHlPdmVyZmxvd2luZyIsIl9pZ25vcmVCYWNrZHJvcENsaWNrIiwiX3Njcm9sbGJhcldpZHRoIiwiX2NoZWNrU2Nyb2xsYmFyIiwiX3NldFNjcm9sbGJhciIsIl9hZGp1c3REaWFsb2ciLCJfc2V0RXNjYXBlRXZlbnQiLCJfc2V0UmVzaXplRXZlbnQiLCJfc2hvd0JhY2tkcm9wIiwiX3Nob3dFbGVtZW50IiwiX2hpZGVNb2RhbCIsImhhbmRsZVVwZGF0ZSIsIkVMRU1FTlRfTk9ERSIsImFwcGVuZENoaWxkIiwic2Nyb2xsVG9wIiwiX2VuZm9yY2VGb2N1cyIsImhhcyIsIl9yZXNldEFkanVzdG1lbnRzIiwiX3Jlc2V0U2Nyb2xsYmFyIiwiX3JlbW92ZUJhY2tkcm9wIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImFwcGVuZFRvIiwic2Nyb2xsSGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJfZ2V0U2Nyb2xsYmFyV2lkdGgiLCJ3aSIsImFuaW1hdGlvbiIsInRlbXBsYXRlIiwidGl0bGUiLCJkZWxheSIsImh0bWwiLCJBVVRPIiwiVE9QIiwiUklHSFQiLCJCT1RUT00iLCJMRUZUIiwic2VsZWN0b3IiLCJjb250YWluZXIiLCJmYWxsYmFja1BsYWNlbWVudCIsIklOU0VSVEVEIiwiRk9DVVNPVVQiLCJfaXNFbmFibGVkIiwiX3RpbWVvdXQiLCJfaG92ZXJTdGF0ZSIsIl9hY3RpdmVUcmlnZ2VyIiwiY29uZmlnIiwidGlwIiwiX3NldExpc3RlbmVycyIsImVuYWJsZSIsImRpc2FibGUiLCJ0b2dnbGVFbmFibGVkIiwiREFUQV9LRVkiLCJfZ2V0RGVsZWdhdGVDb25maWciLCJjbGljayIsIl9pc1dpdGhBY3RpdmVUcmlnZ2VyIiwiX2VudGVyIiwiX2xlYXZlIiwiZ2V0VGlwRWxlbWVudCIsIkVWRU5UX0tFWSIsImlzV2l0aENvbnRlbnQiLCJOQU1FIiwic2V0Q29udGVudCIsIl9nZXRBdHRhY2htZW50IiwiYWRkQXR0YWNobWVudENsYXNzIiwiX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSIsIl9maXhUcmFuc2l0aW9uIiwiX2NsZWFuVGlwQ2xhc3MiLCJnZXRUaXRsZSIsInNldEVsZW1lbnRDb250ZW50IiwiZW1wdHkiLCJhcHBlbmQiLCJ0ZXh0IiwiX2ZpeFRpdGxlIiwiY29udGVudCIsImpvaW4iLCJJaSIsImNyZWF0ZSIsIl9fcHJvdG9fXyIsIl9nZXRDb250ZW50IiwiRGkiLCJtZXRob2QiLCJBQ1RJVkFURSIsIlNDUk9MTCIsIkRBVEFfU1BZIiwiTkFWX0xJU1RfR1JPVVAiLCJOQVZfTElOS1MiLCJOQVZfSVRFTVMiLCJMSVNUX0lURU1TIiwiRFJPUERPV04iLCJEUk9QRE9XTl9JVEVNUyIsIkRST1BET1dOX1RPR0dMRSIsIl9zY3JvbGxFbGVtZW50IiwiX29mZnNldHMiLCJfdGFyZ2V0cyIsIl9hY3RpdmVUYXJnZXQiLCJfc2Nyb2xsSGVpZ2h0IiwiX3Byb2Nlc3MiLCJyZWZyZXNoIiwiX2dldFNjcm9sbFRvcCIsIl9nZXRTY3JvbGxIZWlnaHQiLCJwYWdlWU9mZnNldCIsIl9nZXRPZmZzZXRIZWlnaHQiLCJfYWN0aXZhdGUiLCJfY2xlYXIiLCJwYXJlbnRzIiwiQWkiLCJ0YWIiLCJfdHJhbnNpdGlvbkNvbXBsZXRlIiwiVXRpbCIsIkFsZXJ0IiwiQnV0dG9uIiwiQ2Fyb3VzZWwiLCJDb2xsYXBzZSIsIkRyb3Bkb3duIiwiTW9kYWwiLCJQb3BvdmVyIiwiU2Nyb2xsc3B5IiwiVGFiIiwiVG9vbHRpcCIsIm1vZHVsZSIsImdldFByb3RvdHlwZU9mIiwic3JjIiwibm9Nb2R1bGUiLCJoZWFkIiwiaW5pdCIsInRvQXJyYXkiLCJwdXNoU3RhY2siLCJtZXJnZSIsInByZXZPYmplY3QiLCJmaXJzdCIsImVxIiwibGFzdCIsInNwbGljZSIsImV4dGVuZCIsImlzUGxhaW5PYmplY3QiLCJpc0FycmF5IiwiZXhwYW5kbyIsImlzUmVhZHkiLCJlcnJvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwiaW5BcnJheSIsImdyZXAiLCJndWlkIiwic3VwcG9ydCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiRGF0ZSIsInBvcCIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2hhckNvZGVBdCIsImRpciIsImNoaWxkTm9kZXMiLCJleGVjIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwicXVlcnlTZWxlY3RvckFsbCIsImNhY2hlTGVuZ3RoIiwiYXR0ckhhbmRsZSIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJpc0Rpc2FibGVkIiwiaXNYTUwiLCJzZXREb2N1bWVudCIsImF0dGFjaEV2ZW50IiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImdldEF0dHJpYnV0ZU5vZGUiLCJpbm5lckhUTUwiLCJtYXRjaGVzU2VsZWN0b3IiLCJtYXRjaGVzIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJzb3J0RGV0YWNoZWQiLCJ1bnNoaWZ0Iiwic3BlY2lmaWVkIiwiZXNjYXBlIiwidW5pcXVlU29ydCIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwiZ2V0VGV4dCIsInRleHRDb250ZW50IiwiZmlyc3RDaGlsZCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwicHJlRmlsdGVyIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG9zIiwic2V0RmlsdGVycyIsImlubmVyVGV4dCIsImxhbmciLCJsb2NhdGlvbiIsImhhc2giLCJyb290IiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4Iiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiaGVhZGVyIiwiaW5wdXQiLCJidXR0b24iLCJldmVuIiwib2RkIiwibnRoIiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJmaWx0ZXJzIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0IiwiZGVmYXVsdFZhbHVlIiwiZXhwciIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJwYXJzZUhUTUwiLCJyZWFkeSIsImNvbnRlbnRzIiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJzaWJsaW5ncyIsImNvbnRlbnREb2N1bWVudCIsIkNhbGxiYWNrcyIsIm9uY2UiLCJzdG9wT25GYWxzZSIsIm1lbW9yeSIsImxvY2siLCJsb2NrZWQiLCJmaXJlV2l0aCIsImZpcmUiLCJmaXJlZCIsInByb21pc2UiLCJkb25lIiwiZmFpbCIsIkRlZmVycmVkIiwiYWx3YXlzIiwicGlwZSIsInByb2dyZXNzIiwibm90aWZ5IiwicmVqZWN0Iiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwid2hlbiIsIm1lc3NhZ2UiLCJzdGFjayIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlXYWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwidWlkIiwiY2FjaGUiLCJzZXQiLCJhY2Nlc3MiLCJoYXNEYXRhIiwiSlNPTiIsInBhcnNlIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsInF1ZXVlIiwiZGVxdWV1ZSIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsImNsZWFyUXVldWUiLCJzb3VyY2UiLCJjdXIiLCJjc3NOdW1iZXIiLCJ1bml0Iiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ciIsInRkIiwiX2RlZmF1bHQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJodG1sUHJlZmlsdGVyIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGVja0Nsb25lIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJldmVudHMiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsIm9yaWdUeXBlIiwibmFtZXNwYWNlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJoYW5kbGVycyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiZWxlbSIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInJlc3VsdCIsInBvc3REaXNwYXRjaCIsImFkZFByb3AiLCJvcmlnaW5hbEV2ZW50IiwibG9hZCIsIm5vQnViYmxlIiwiYmx1ciIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwiZGVmYXVsdFByZXZlbnRlZCIsInRpbWVTdGFtcCIsIm5vdyIsImlzU2ltdWxhdGVkIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyQ29kZSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwiY2xvbmUiLCJfZXZhbFVybCIsImNsZWFuRGF0YSIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3BlbmVyIiwiY3NzVGV4dCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbEJveFN0eWxlcyIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJ2aXNpYmlsaXR5IiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJjc3NQcm9wcyIsImNlaWwiLCJjc3NIb29rcyIsIm9wYWNpdHkiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJsaW5lSGVpZ2h0Iiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJzZXRQcm9wZXJ0eSIsImdldENsaWVudFJlY3RzIiwibWFyZ2luIiwiYm9yZGVyIiwiZXhwYW5kIiwiVHdlZW4iLCJwcm9wIiwiZWFzaW5nIiwicHJvcEhvb2tzIiwicnVuIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsInRpY2siLCJ0d2VlbmVycyIsInVucXVldWVkIiwicHJlZmlsdGVycyIsInN0YXJ0VGltZSIsInR3ZWVucyIsInByb3BzIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJjcmVhdGVUd2VlbiIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwiQW5pbWF0aW9uIiwidHdlZW5lciIsInByZWZpbHRlciIsInNwZWVkIiwic3BlZWRzIiwib2xkIiwiZmFkZVRvIiwiYW5pbWF0ZSIsImZpbmlzaCIsInRpbWVycyIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwicmVtb3ZlQXR0ciIsImF0dHJIb29rcyIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwicGFyc2VJbnQiLCJ2YWwiLCJ2YWxIb29rcyIsImZvY3VzaW4iLCJpc1RyaWdnZXIiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJwYXJhbSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwiZGF0YVR5cGVzIiwiYWpheFNldHRpbmdzIiwiZmxhdE9wdGlvbnMiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsInJlc3BvbnNlRmllbGRzIiwiZGF0YUZpbHRlciIsImRhdGFUeXBlIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJ4bWwiLCJqc29uIiwiY29udGV4dCIsImFqYXhTZXR1cCIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInN0YXR1c0NvZGUiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsInN0YXR1cyIsImFib3J0IiwiY3Jvc3NEb21haW4iLCJ0cmFkaXRpb25hbCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwidGltZW91dCIsInNlbmQiLCJzdGF0dXNUZXh0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJ3cmFwSW5uZXIiLCJ1bndyYXAiLCJ2aXNpYmxlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJjb3JzIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJyZXNwb25zZSIsInNjcmlwdCIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJhbmltYXRlZCIsInNldE9mZnNldCIsInVzaW5nIiwicGFnZVhPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiaG92ZXIiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJwcm94eSIsImhvbGRSZWFkeSIsInBhcnNlSlNPTiIsImlzRnVuY3Rpb24iLCJpc1dpbmRvdyIsImNhbWVsQ2FzZSIsImlzTnVtZXJpYyIsImRlZmluZSIsImpRdWVyeSIsImV2ZW50TmFtZXNwYWNlIiwiZm9jdXNDbGFzcyIsImFjdGl2ZUNsYXNzIiwiaG92ZXJDbGFzcyIsImNoZWNrZWRDbGFzcyIsImRpc2FibGVkQ2xhc3MiLCJkaXZDbGFzcyIsImRpdldyYXAiLCJzcGFuQ2xhc3MiLCJzcGFuSHRtbCIsInNwYW5XcmFwIiwiYXV0b0hpZGUiLCJ3cmFwcGVyQ2xhc3MiLCJ1c2VJRCIsImlkUHJlZml4IiwiZGl2Iiwic3BhbiIsImNvbG9yIiwiY3VycmVudFN0eWxlIiwiY3B1Q2xhc3MiLCJwcm9kdWN0IiwibXVsdGlwbGUiLCJNb3pVc2VyU2VsZWN0IiwibXNVc2VyU2VsZWN0Iiwid2Via2l0VXNlclNlbGVjdCIsInVzZXJTZWxlY3QiLCJmaWxlRGVmYXVsdEh0bWwiLCJlbCIsInN1Ym1pdERlZmF1bHRIdG1sIiwicmVzZXREZWZhdWx0SHRtbCIsImJ1dHRvbkNsYXNzIiwiZGlzcGF0Y2hFdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiY2hlY2tib3hDbGFzcyIsImZpbGVDbGFzcyIsImZpbGVCdXR0b25DbGFzcyIsImZpbGVzQnV0dG9uSHRtbCIsImZpbGVCdXR0b25IdG1sIiwiZmlsZW5hbWVDbGFzcyIsImNoYW5nZSIsImlucHV0Q2xhc3MiLCJpbnB1dEFkZFR5cGVBc0NsYXNzIiwicmFkaW9DbGFzcyIsInVuaWZvcm0iLCJzZWxlY3RBdXRvV2lkdGgiLCJzZWxlY3RDbGFzcyIsIm91dGVyV2lkdGgiLCJrZXl1cCIsInJlc3RvcmUiLCJzZWxlY3RNdWx0aUNsYXNzIiwidGV4dGFyZWFDbGFzcyIsImRlZmF1bHRzIiwicmVzZXRTZWxlY3RvciIsImVsZW1lbnRzIiwibW91c2V1cCIsImJsb2NrVUkiLCJpZ25vcmVJZkJsb2NrZWQiLCJvdmVybGF5Q1NTIiwib25PdmVybGF5Q2xpY2siLCJjdXJzb3IiLCJ0aGVtZWRDU1MiLCJvblVuYmxvY2siLCJiYXNlWiIsImZvcmNlSWZyYW1lIiwiaWZyYW1lU3JjIiwidGhlbWUiLCJibG9ja01zZ0NsYXNzIiwiZHJhZ2dhYmxlIiwiY2FuY2VsIiwiYm94TW9kZWwiLCJhbGxvd0JvZHlTdHJldGNoIiwic2V0RXhwcmVzc2lvbiIsInF1aXJrc21vZGVPZmZzZXRIYWNrIiwiY2VudGVyWSIsInNob3dPdmVybGF5Iiwib25CbG9jayIsIl9mYWRlSW4iLCJmb2N1c2FibGVFbGVtZW50cyIsImZvY3VzSW5wdXQiLCJjZW50ZXJYIiwidW5ibG9ja1VJIiwidW5ibG9jayIsImN1cnNvclJlc2V0IiwiYmluZEV2ZW50cyIsImNvbnN0cmFpblRhYktleSIsImdyb3dsVUkiLCJncm93bENTUyIsIm1vdXNlb3ZlciIsIm1vdXNlb3V0IiwiYmxvY2siLCJ2ZXJzaW9uIiwidGV4dEFsaWduIiwiYmFja2dyb3VuZENvbG9yIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7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O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsWUFBWTs7QUFFcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGLG9CQUFvQjs7QUFFcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLGtCQUFrQixrQ0FBa0M7QUFDcEQsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVMsU0FBUztBQUNsQjtBQUNBOztBQUVBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVMsWUFBWTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFNBQVM7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLElBQUk7O0FBRXBCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLHdDQUF3QyxJQUFJO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEseUJBQXlCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVEsNkJBQTZCO0FBQ2hEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0IsYUFBYSx1QkFBdUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0NBQWdDLE1BQU07QUFDdEM7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsZUFBZTs7QUFFZixTQUFTOztBQUVUO0FBQ0EsUUFBUSxpQ0FBaUM7QUFDekMsUUFBUSxvQkFBb0I7QUFDNUIsUUFBUSxzQ0FBc0M7QUFDOUMsUUFBUTtBQUNSLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixhQUFhLEVBQUU7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLDREQUE0RDs7QUFFNUQ7QUFDQTtBQUNBO0FBQ0EseUNBQXlDOztBQUV6QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQ7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQzs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnRUFBZ0U7O0FBRWhFO0FBQ0E7QUFDQTtBQUNBLDZDQUE2Qzs7QUFFN0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxRQUFRLFNBQVM7QUFDakI7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGlEQUFpRDtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRCxVQUFVLHdDQUF3QztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLE1BQU07QUFDakIsV0FBVyxNQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBOztBQUVBLENBQUM7Ozs7QUFJRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQSxRQUFRLEdBQUc7QUFDWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTs7OztBQUlBOztBQUVBOztBQUVBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTs7QUFFQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVLE9BQU87QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVUsT0FBTztBQUNqQiwwQkFBMEIsd0JBQXdCOztBQUVsRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSwwQ0FBMEM7QUFDMUMsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1COztBQUVuQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGNBQWM7QUFDeEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFROztBQUVSO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3Q0FBd0Msc0NBQXNDO0FBQzlFLG9DQUFvQyx1Q0FBdUM7QUFDM0Usb0NBQW9DLHNDQUFzQztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLE9BQU87QUFDUDtBQUNBLE1BQU07QUFDTixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVOztBQUVWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTs7QUFFUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0NBQW9DO0FBQ3BDLHFDQUFxQztBQUNyQyxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7Ozs7QUFLQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxVQUFVLFNBQVM7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QixhQUFhO0FBQ3BDLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLFNBQVM7QUFDN0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7OztBQUdBOztBQUVBOzs7O0FBSUE7QUFDQTtBQUNBLEdBQUc7QUFDSCxjQUFjOztBQUVkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUSxnQkFBZ0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQztBQUNEOztBQUVBOztBQUVBOzs7O0FBSUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxFQUFFO0FBQ0Y7O0FBRUEsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsT0FBTztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxzQkFBc0I7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLE9BQU87QUFDZjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSxnQkFBZ0I7QUFDbEI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVc7O0FBRVg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEOztBQUVBO0FBQ0E7O0FBRUEsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsK0RBQStEO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVSxjQUFjOztBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFtQjtBQUNwQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLHVDQUF1QztBQUNqRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsdURBQXVEO0FBQzlFOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSywrQ0FBK0M7QUFDcEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUNBQXFDLGNBQWM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVELGNBQWMscUNBQXFDO0FBQ25EOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7OztBQUdEOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTs7QUFF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O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksK0RBQStEO0FBQzNFO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsT0FBTzs7QUFFZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FB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Q0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixpREFBaUQsMEJBQTBCO0FBQzNFOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVSxnQkFBZ0I7QUFDMUI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7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Q0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLGlDQUFpQztBQUNqQztBQUNBOztBQUVBLElBQUk7QUFDSjs7QUFFQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFNBQVM7QUFDcEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7OztBQUdBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBOztBQUVBOztBQUVBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJDQUEyQztBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsS0FBSztBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUscUNBQXFDOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBOztBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUgsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYixLQUFLO0FBQ0w7O0FBRUEsV0FBVztBQUNYLEdBQUc7QUFDSDtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCOztBQUVoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCOztBQUVoQixnREFBZ0Q7QUFDaEQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUI7QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjtBQUNqQixTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEOztBQUVsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQjs7QUFFM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQzs7QUFFbEM7QUFDQSxzQkFBc0I7QUFDdEIsMkJBQTJCOztBQUUzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7O0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQyxXQUFXLHlCQUF5QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixhQUFhLHVDQUF1QztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHFEQUFxRDtBQUNyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUI7O0FBRW5CO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0EsY0FBYyxzREFBc0Q7QUFDcEU7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQSxjQUFjLG1DQUFtQztBQUNqRCxlQUFlLDZEQUE2RDtBQUM1RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsRUFBRTtBQUNGLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSyxJQUEwQztBQUMvQyxDQUFDLGlDQUFrQixFQUFFLG1DQUFFO0FBQ3ZCO0FBQ0EsRUFBRTtBQUFBLG9HQUFFO0FBQ0o7Ozs7O0FBS0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBLENBQUM7Ozs7Ozs7Ozs7OztBQzMxVUQ7QUFDQTs7Ozs7Ozs7Ozs7OztBQ0RBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtB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NUJjLDBCQUFvQixFQUFDLENBQXg2QjtBQUEwNkJOLG1CQUFhLEVBQUMsVUFBeDdCO0FBQW04QlYscUJBQWUsRUFBQyxDQUFDO0FBQXA5QixLQUFqcUM7QUFBd25FLFFBQUk5ckMsQ0FBQyxHQUFDLElBQU47QUFBQSxRQUFXTyxDQUFDLEdBQUMsRUFBYjtBQUFnQjs7QUFBQSxXQUF1QzRuQyxnR0FBQSxDQUFXQyxNQUFsRCxHQUF5REQsaUNBQU8sQ0FBQyx5RUFBRCxDQUFELG9DQUFZbHFDLENBQVo7QUFBQTtBQUFBO0FBQUEsb0dBQS9ELEdBQThFQSxDQUFDLENBQUNtcUMsTUFBRCxDQUEvRTtBQUF3RixDQUF4OFIsRUFBRCxDOzs7Ozs7Ozs7Ozs7QUNBQSx1Qzs7Ozs7Ozs7Ozs7QUNBQSx1Qzs7Ozs7Ozs7Ozs7QUNBQSx1Qzs7Ozs7Ozs7Ozs7QUNBQSx1Qzs7Ozs7Ozs7Ozs7QUNBQSx1QyIsImZpbGUiOiJhZG1pbi9hZG1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2FkbWluL2luZGV4LmpzXCIpO1xuIiwiLyohIE5pY2VGb3JtIHYxLjAuNCB8IENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50IER1YyBEb2FuIChkdWNkaG1AZ21haWwuY29tKSAqL1xuIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dChyZXF1aXJlKFwianF1ZXJ5XCIpKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiTmljZUZvcm1cIixbXCJqcXVlcnlcIl0sdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5OaWNlRm9ybT10KHJlcXVpcmUoXCJqcXVlcnlcIikpOmUuTmljZUZvcm09dChlLiQpfShcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciB0PXt9O2Z1bmN0aW9uIHIoYSl7aWYodFthXSlyZXR1cm4gdFthXS5leHBvcnRzO3ZhciBuPXRbYV09e2k6YSxsOiExLGV4cG9ydHM6e319O3JldHVybiBlW2FdLmNhbGwobi5leHBvcnRzLG4sbi5leHBvcnRzLHIpLG4ubD0hMCxuLmV4cG9ydHN9cmV0dXJuIHIubT1lLHIuYz10LHIuZD1mdW5jdGlvbihlLHQsYSl7ci5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2VudW1lcmFibGU6ITAsZ2V0OmF9KX0sci5yPWZ1bmN0aW9uKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LHIudD1mdW5jdGlvbihlLHQpe2lmKDEmdCYmKGU9cihlKSksOCZ0KXJldHVybiBlO2lmKDQmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgYT1PYmplY3QuY3JlYXRlKG51bGwpO2lmKHIucihhKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSksMiZ0JiZcInN0cmluZ1wiIT10eXBlb2YgZSlmb3IodmFyIG4gaW4gZSlyLmQoYSxuLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfS5iaW5kKG51bGwsbikpO3JldHVybiBhfSxyLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIHIuZCh0LFwiYVwiLHQpLHR9LHIubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sci5wPVwiXCIscihyLnM9Nyl9KFtmdW5jdGlvbih0LHIpe3QuZXhwb3J0cz1lfSxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dC5hPXtkYXRlOlwiREQvTU0vWVlZWVwiLHRpbWU6XCJISDptbVwiLGRhdGV0aW1lOlwiREQvTU0vWVlZWSBISDptbVwiLHN1Y2Nlc3NUaXRsZTpcIlN1Y2Nlc3MhXCIsc3VjY2Vzc01lc3NhZ2U6XCJUaGUgZm9ybSBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgc3VibWl0dGVkXCIsZXJyb3JUaXRsZTpcIkVycm9yIVwiLGludmFsaWRFcnJvck1lc3NhZ2U6XCJQbGVhc2UgY29ycmVjdCB5b3VyIGludmFsaWQgZmllbGRzIVwiLHJlcXVpcmVkRXJyb3JNZXNzYWdlOlwiVGhpcyBmaWVsZCBpcyByZXF1aXJlZFwiLGRhdGVFcnJvck1lc3NhZ2U6XCJQbGVhc2UgY2hlY2sgdGhlIGZvcm1hdCBvZiB5b3VyIGRhdGUsIGl0IHNob3VsZCBiZSBsaWtlIDE0LzAyLzIwMDBcIix0aW1lRXJyb3JNZXNzYWdlOlwiUGxlYXNlIGNoZWNrIHRoZSBmb3JtYXQgb2YgeW91ciB0aW1lLCBpdCBzaG91bGQgYmUgbGlrZSAxNDowMlwiLGRhdGV0aW1lRXJyb3JNZXNzYWdlOlwiUGxlYXNlIGNoZWNrIHRoZSBmb3JtYXQgb2YgeW91ciBkYXRlIHRpbWUsIGl0IHNob3VsZCBiZSBsaWtlIDE0LzAyLzIwMDAgMTQ6MDJcIixlbWFpbEVycm9yTWVzc2FnZTpcIlBsZWFzZSBjaGVjayB0aGUgZm9ybWF0IG9mIHlvdXIgZW1haWwgYWRkcmVzcywgaXQgc2hvdWxkIHJlYWQgbGlrZSBzb21lb25lQHNvbWV3aGVyZS5jb21cIixudW1iZXJFcnJvck1lc3NhZ2U6XCJQbGVhc2UgZW50ZXIgb25seSBudW1iZXJzXCIsdXJsRXJyb3JNZXNzYWdlOlwiUGxlYXNlIGVudGVyIHZhbGlkIHdlYnNpdGUgYWRkcmVzc1wiLHBhc3N3b3JkRXJyb3JNZXNzYWdlOlwiWW91ciBwYXNzd29yZCBtdXN0IGJlIGF0IGxlYXN0IDYgY2hhcmFjdGVycyBhbmQgaXQgbXVzdCBjb250YWluIG51bWJlcnMsIGxldHRlcnMgKGxvd2VyY2FzZSBhbmQgdXBwZXJjYXNlKSBhbmQgYXQgbGVhc3QgMSBzcGVjaWFsIGNoYXJhY3RlclwiLHJlcGFzc3dvcmRFcnJvck1lc3NhZ2U6XCJQbGVhc2UgY29uZmlybSB5b3VyIHBhc3N3b3JkXCIsc2ltcGxlRXJyb3JNZXNzYWdlOlwiUGxlYXNlIGVudGVyIG9ubHkgbGV0dGVycywgbnVtYmVycyBhbmQgb25seSAxIHVuZGVyc2NvcmUgb3IgZGFzaCBvciBzcGFjZSBiZXR3ZWVuIGxldHRlcnMgYW5kIG51bWJlcnNcIixyZWFsbHlTaW1wbGVFcnJvck1lc3NhZ2U6XCJQbGVhc2UgZW50ZXIgb25seSBsZXR0ZXJzIGFuZCBudW1iZXJzLCBubyBwdW5jdHVhdGlvbiwgZG90cywgZXRjXCIsdW5rbm93bkVycm9yTWVzc2FnZTpcIlNvcnJ5LCBhbiBlcnJvciBvY2N1cnJlZCBhdHRlbXB0aW5nIHRvIHN1Ym1pdCB0aGUgZm9ybS4gUGxlYXNlIGNvbnRhY3QgdGhlIHNpdGUgYWRtaW5pc3RyYXRvciB0byByZXNvbHZlIVwifX0sLGZ1bmN0aW9uKGUsdCl7IWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoKXt0aGlzLmZha2U9ITAsdGhpcy5ib3VuZGFyeT1cIi0tLS0tLS0tRm9ybURhdGFcIitNYXRoLnJhbmRvbSgpLHRoaXMuX2ZpZWxkcz1bXX1lLkZvcm1EYXRhfHwodC5wcm90b3R5cGUuYXBwZW5kPWZ1bmN0aW9uKGUsdCl7dGhpcy5fZmllbGRzLnB1c2goW2UsdF0pfSx0LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBlPXRoaXMuYm91bmRhcnksdD1cIlwiO3JldHVybiB0aGlzLl9maWVsZHMuZm9yRWFjaChmdW5jdGlvbihyKXtpZih0Kz1cIi0tXCIrZStcIlxcclxcblwiLHJbMV0ubmFtZSl7dmFyIGE9clsxXTt0Kz1cIkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT0nXCIrclswXStcIic7IGZpbGVuYW1lPSdcIithLm5hbWUrXCInXFxyXFxuXCIsdCs9XCJDb250ZW50LVR5cGU6IFwiK2EudHlwZStcIlxcclxcblxcclxcblwiLHQrPWEuZ2V0QXNCaW5hcnkoKStcIlxcclxcblwifWVsc2UgdCs9XCJDb250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9J1wiK3JbMF0rXCInO1xcclxcblxcclxcblwiLHQrPXJbMV0rXCJcXHJcXG5cIn0pLHQrPVwiLS1cIitlK1wiLS1cIn0sZS5Gb3JtRGF0YT10KX0od2luZG93KX0sZnVuY3Rpb24oZSx0KXt2YXIgcjsocj1qUXVlcnkpLmZuLnNlcmlhbGl6ZVdpdGhGaWxlcz1mdW5jdGlvbigpe3ZhciBlPXIodGhpcyksdD1uZXcgRm9ybURhdGE7ZS5maW5kKFwiaW5wdXRbdHlwZT1maWxlXVwiKS5lYWNoKGZ1bmN0aW9uKGUsYSl7ci5lYWNoKGEuZmlsZXMsZnVuY3Rpb24oZSxyKXt0LmFwcGVuZChhLm5hbWUscil9KX0pO3ZhciBhPWUuc2VyaWFsaXplQXJyYXkoKTtyZXR1cm4gci5lYWNoKGEsZnVuY3Rpb24oZSxyKXt0LmFwcGVuZChyLm5hbWUsci52YWx1ZSl9KSx0fX0sLCxmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ci5yKHQpO3ZhciBhLG49cigwKSxvPXIubihuKSxpPWZ1bmN0aW9uKGUsdCxyKXt2YXIgYT10LmNsb3Nlc3QoXCIuZm9ybS1ncm91cFwiKTt0LmFkZENsYXNzKFwiaXMtaW52YWxpZFwiKSxhLmFkZENsYXNzKFwiaGFzLWVycm9yXCIpO3ZhciBuPWEuZmluZChcIi5uZi1lcnJvci1tZXNzYWdlXCIpOzA9PT1uLmxlbmd0aCYmKG49JCgnPGRpdiBjbGFzcz1cIm5mLWVycm9yLW1lc3NhZ2UgdGV4dC1kYW5nZXIgc21hbGxcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCI+PC9kaXY+JyksdC5hZnRlcihuKSksbi5odG1sKHIpLGUubmljZWZvcm0oXCJzaG93RWxlbWVudFwiLG4pfSxzPXIoMSk7d2luZG93Ll9fTklDRUZPUk1fREVCVUdfXz0hMDt2YXIgbD17cG9zdEZvcm1FbmFibGVkOiEwLHBvc3RVcmw6bnVsbCxhamF4Ont0eXBlOlwiUE9TVFwiLGRhdGFUeXBlOlwiSlNPTlwifSxwYXNzd29yZDp7bWluOjYsbWF4OjMyLHNwZWNpYWxMZW5ndGg6MSx1cHBlcmNhc2VMZW5ndGg6MSxudW1iZXJMZW5ndGg6MX0scmVnZXg6e2VtYWlsOi9eKD86W2EtejAtOSEjJCUmJyorXFwvPT9eX2B7fH1+LV0rKD86XFwuW2EtejAtOSEjJCUmJyorXFwvPT9eX2B7fH1+LV0rKSp8XCIoPzpbXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHgyMVxceDIzLVxceDViXFx4NWQtXFx4N2ZdfFxcXFxbXFx4MDEtXFx4MDlcXHgwYlxceDBjXFx4MGUtXFx4N2ZdKSpcIilAKD86KD86W2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1xcLikrW2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP3xcXFsoPzooPzoyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKXszfSg/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldP3xbYS16MC05LV0qW2EtejAtOV06KD86W1xceDAxLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXFx4MjEtXFx4NWFcXHg1My1cXHg3Zl18XFxcXFtcXHgwMS1cXHgwOVxceDBiXFx4MGNcXHgwZS1cXHg3Zl0pKylcXF0pJC8sdXJsOi9eKGh0dHBzPzpcXC9cXC8pPyhbXFxkYS16XFwuLV0rKVxcLihbYS16XFwuXXsyLDZ9KShbXFwvXFx3IFxcLi1dKikqXFwvPyQvLHNpbXBsZTovXlthLXpBLVowLTldKyg/OlstX1xcc11bYS16QS1aMC05XSspKiQvLHJlYWxseVNpbXBsZTovXlthLXpBLVowLTldKyQvfSxhbmltYXRpb25EdXJhdGlvbjoyMDAsbG9jYWxlOnMuYSx2YWxpZGF0ZTpudWxsLHNob3dFcnJvcjpmdW5jdGlvbihlLHQscil7ZS5uaWNlZm9ybShcInNob3dFcnJvck1lc3NhZ2VcIixyLmxvY2FsZS5pbnZhbGlkRXJyb3JNZXNzYWdlKSx0LmZvckVhY2goZnVuY3Rpb24odCl7aShlLHQsdC5hdHRyKFwiZGF0YS1lcnJvci1tZXNzYWdlXCIpKX0pfSxoaWRlRXJyb3I6ZnVuY3Rpb24oZSx0KXtlLmZpbmQoXCIuaGFzLWVycm9yXCIpLnJlbW92ZUNsYXNzKFwiaGFzLWVycm9yXCIpLGUuZmluZChcIi5pcy1pbnZhbGlkXCIpLnJlbW92ZUNsYXNzKFwiaXMtaW52YWxpZFwiKS5hdHRyKFwiZGF0YS1lcnJvci1tZXNzYWdlXCIsXCJcIiksZS5uaWNlZm9ybShcImhpZGVFbGVtZW50XCIsZS5maW5kKFwiLm5mLWVycm9yLW1lc3NhZ2VcIikpLGUubmljZWZvcm0oXCJoaWRlTWVzc2FnZVwiKX0scHJvY2Vzc0FqYXhSZXNwb25zZTpmdW5jdGlvbihlLHQscil7cmV0dXJuIGUmJmUuc3RhdHVzfSxvblZhbGlkOm51bGwsb25JbnZhbGlkOm51bGwsb25CZWZvcmVTZXJpYWxpemVGb3JtOm51bGwsb25CZWZvcmVQb3N0Rm9ybTpudWxsLG9uQWpheFN1Y2Nlc3M6ZnVuY3Rpb24oZSx0LHIpe3QubmljZWZvcm0oXCJzaG93U3VjY2Vzc01lc3NhZ2VcIixlLm1lc3NhZ2V8fHIuc3VjY2Vzc01lc3NhZ2UpLGNsZWFyVGltZW91dChhKSxhPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gdC5uaWNlZm9ybShcImhpZGVNZXNzYWdlXCIpfSw1ZTMpfSxvbkFqYXhFcnJvcjpmdW5jdGlvbihlLHQscil7ZS5yZXNwb25zZUpTT04/KHQubmljZWZvcm0oXCJzaG93RXJyb3JNZXNzYWdlXCIsZS5yZXNwb25zZUpTT04ubWVzc2FnZXx8ci51bmtub3duRXJyb3JNZXNzYWdlKSxlLnJlc3BvbnNlSlNPTi5lcnJvckZpZWxkcyYmZS5yZXNwb25zZUpTT04uZXJyb3JGaWVsZHMuZm9yRWFjaChmdW5jdGlvbihlKXtpKHQsdC5maW5kKCdbbmFtZT1cIicuY29uY2F0KGUubmFtZSwnXCJdJykpLGUubWVzc2FnZSl9KSk6dC5uaWNlZm9ybShcInNob3dFcnJvck1lc3NhZ2VcIixyLnVua25vd25FcnJvck1lc3NhZ2UpfX0sYz1mdW5jdGlvbihlKXtyZXR1cm4hZS5pcygnW2RhdGEtaWdub3JlPVwidmFsaWRhdGVcIl0nKSYmKCFlLmF0dHIoXCJkYXRhLWVycm9yLW1lc3NhZ2VcIikmJighIWUuaGFzQ2xhc3MoXCJyZXF1aXJlZFwiKXx8KGUudmFsKCl8fFwiXCIpLmxlbmd0aD4wKSl9LHU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS50ZXN0KHQpfSxmPWZ1bmN0aW9uKGUsdCl7dmFyIHI9W107cmV0dXJuIGUuZmluZChcIi5udW1iZXJcIikuZWFjaChmdW5jdGlvbigpe3ZhciBlLGE9JCh0aGlzKTtjKGEpJiYoZT10aGlzLnZhbHVlLGlzTmFOKGUpfHxcImJvb2xlYW5cIj09dHlwZW9mIGUpJiYoYS5hdHRyKFwiZGF0YS1lcnJvci1tZXNzYWdlXCIsYS5hdHRyKFwiZGF0YS1udW1iZXItbWVzc2FnZVwiKXx8dCksci5wdXNoKGEpKX0pLHJ9O3ZhciBkPWZ1bmN0aW9uKGUsdCl7dmFyIHI9e2xvd2VyOjAsdXBwZXI6MCxhbHBoYTowLG51bWVyaWM6MCxzcGVjaWFsOjAsbGVuZ3RoOlswLDEvMF0sY3VzdG9tOltdLGJhZFdvcmRzOltdLGJhZFNlcXVlbmNlTGVuZ3RoOjAsbm9Rd2VydHlTZXF1ZW5jZXM6ITEsbm9TZXF1ZW50aWFsOiExfTtmb3IodmFyIGEgaW4gdClyW2FdPXRbYV07dmFyIG4sbyxpPXtsb3dlcjovW2Etel0vZyx1cHBlcjovW0EtWl0vZyxhbHBoYTovW0EtWl0vZ2ksbnVtZXJpYzovWzAtOV0vZyxzcGVjaWFsOi9bXFxXX10vZ307aWYoZS5sZW5ndGg8ci5sZW5ndGhbMF18fGUubGVuZ3RoPnIubGVuZ3RoWzFdKXJldHVybiExO2ZvcihuIGluIGkpaWYoKGUubWF0Y2goaVtuXSl8fFtdKS5sZW5ndGg8cltuXSlyZXR1cm4hMTtmb3Iobz0wO288ci5iYWRXb3Jkcy5sZW5ndGg7bysrKWlmKGUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHIuYmFkV29yZHNbb10udG9Mb3dlckNhc2UoKSk+LTEpcmV0dXJuITE7aWYoci5ub1NlcXVlbnRpYWwmJi8oW1xcU1xcc10pXFwxLy50ZXN0KGUpKXJldHVybiExO2lmKHIuYmFkU2VxdWVuY2VMZW5ndGgpe3ZhciBzPVwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIixsPXMudG9VcHBlckNhc2UoKSxjPXIuYmFkU2VxdWVuY2VMZW5ndGgtMSx1PVwiX1wiK2Uuc2xpY2UoMCxjKTtmb3Iobz1jO288ZS5sZW5ndGg7bysrKWlmKHU9dS5zbGljZSgxKStlLmNoYXJBdChvKSxzLmluZGV4T2YodSk+LTF8fGwuaW5kZXhPZih1KT4tMXx8XCIwMTIzNDU2Nzg5XCIuaW5kZXhPZih1KT4tMXx8ci5ub1F3ZXJ0eVNlcXVlbmNlcyYmXCJxd2VydHl1aW9wYXNkZmdoamtsenhjdmJubVwiLmluZGV4T2YodSk+LTEpcmV0dXJuITF9Zm9yKG89MDtvPHIuY3VzdG9tLmxlbmd0aDtvKyspaWYoKG49ci5jdXN0b21bb10paW5zdGFuY2VvZiBSZWdFeHApe2lmKCFuLnRlc3QoZSkpcmV0dXJuITF9ZWxzZSBpZihuIGluc3RhbmNlb2YgRnVuY3Rpb24mJiFuKGUpKXJldHVybiExO3JldHVybiEwfSxtPWZ1bmN0aW9uKGUsdCxyKXt2YXIgYT1bXTtyZXR1cm4gZS5maW5kKFwiLnBhc3N3b3JkXCIpLmVhY2goZnVuY3Rpb24oKXt2YXIgZSxuPSQodGhpcyk7YyhuKSYmKGU9dGhpcy52YWx1ZSwhZChlLHtsb3dlcjoxLHVwcGVyOnQudXBwZXJjYXNlTGVuZ3RoLGFscGhhOjAsbnVtZXJpYzp0Lm51bWJlckxlbmd0aCxzcGVjaWFsOnQuc3BlY2lhbExlbmd0aCxsZW5ndGg6W3QubWluLHQubWF4XSxiYWRXb3JkczpbXSxiYWRTZXF1ZW5jZUxlbmd0aDowLG5vUXdlcnR5U2VxdWVuY2VzOiExLG5vU2VxdWVudGlhbDohMX0pKSYmKG4uYXR0cihcImRhdGEtZXJyb3ItbWVzc2FnZVwiLG4uYXR0cihcImRhdGEtcGFzc3dvcmQtbWVzc2FnZVwiKXx8ciksYS5wdXNoKG4pKX0pLGF9LGg9ZnVuY3Rpb24oZSx0KXt2YXIgcj1bXSxhPWZ1bmN0aW9uKGUsdCl7dmFyIHI9W10sYT17fTtyZXR1cm4gZS5maW5kKFwiLnJlcXVpcmVkOnJhZGlvLCAucmVxdWlyZWQ6Y2hlY2tib3hcIikubm90KCdbZGF0YS1pZ25vcmU9XCJ2YWxpZGF0ZVwiXScpLmVhY2goZnVuY3Rpb24oKXtpZighdGhpcy5uYW1lIGluIGEpe3ZhciBuPWUuZmluZCgnaW5wdXRbbmFtZT1cIicuY29uY2F0KHRoaXMubmFtZSwnXCJdJykpOzA9PT1uLmZpbHRlcihcIjpjaGVja2VkXCIpLmxlbmd0aCYmKHIuYXR0cihcImRhdGEtZXJyb3ItbWVzc2FnZVwiLG4uYXR0cihcImRhdGEtcmVxdWlyZWQtbWVzc2FnZVwiKXx8dCksci5wdXNoKG4pKSxhW3RoaXMubmFtZV09ITB9fSksZS5maW5kKFwiLnJlcXVpcmVkXCIpLmZpbHRlcihcImlucHV0LCBzZWxlY3QsIHRleHRhcmVhXCIpLm5vdCgnLnR0LWhpbnQsIDpyYWRpbywgOmNoZWNrYm94LCBbZGF0YS1pZ25vcmU9XCJ2YWxpZGF0ZVwiXScpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT0kKHRoaXMpLGE9ZS52YWwoKXx8XCJcIixuPWUuYXR0cihcInBsYWNlaG9sZGVyXCIpOzAhPT1hLmxlbmd0aCYmYSE9PW58fChlLmF0dHIoXCJkYXRhLWVycm9yLW1lc3NhZ2VcIixlLmF0dHIoXCJkYXRhLXJlcXVpcmVkLW1lc3NhZ2VcIil8fHQpLHIucHVzaChlKSl9KSxyfShlLHQubG9jYWxlLnJlcXVpcmVkRXJyb3JNZXNzYWdlKTtpZihhLmxlbmd0aD4wJiYocj1yLmNvbmNhdChhKSksdm9pZCAwPT09d2luZG93Lm1vbWVudCkhZnVuY3Rpb24oKXtpZih3aW5kb3cuX19OSUNFRk9STV9ERUJVR19fJiZjb25zb2xlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBjb25zb2xlLmxvZyl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGgsdD1uZXcgQXJyYXkoZSkscj0wO3I8ZTtyKyspdFtyXT1hcmd1bWVudHNbcl07Y29uc29sZS5sb2cuYXBwbHkoY29uc29sZSxbXCJbIE5pY2VGb3JtIF0gXCJdLmNvbmNhdCh0KSl9fSgnV0FSTiA6OiBDYW4gbm90IGZpbmQgXCJtb21lbnRcIiwgaWdub3JlIFwiLmRhdGVcIiwgXCIuZGF0ZXRpbWVcIiwgXCIudGltZVwiIGZpZWxkcycpO2Vsc2V7dmFyIG49ZnVuY3Rpb24oZSx0LHIpe3ZhciBhPVtdO3JldHVybiBlLmZpbmQoXCIuZGF0ZXRpbWVcIikuZWFjaChmdW5jdGlvbigpe3ZhciBlPSQodGhpcyk7YyhlKSYmIW1vbWVudCh0aGlzLnZhbHVlLHQsITApLmlzVmFsaWQoKSYmKGUuYXR0cihcImRhdGEtZXJyb3ItbWVzc2FnZVwiLGUuYXR0cihcImRhdGEtZGF0ZXRpbWUtbWVzc2FnZVwiKXx8ciksYS5wdXNoKGUpKX0pLGF9KGUsdC5sb2NhbGUuZGF0ZXRpbWUsdC5sb2NhbGUuZGF0ZXRpbWVFcnJvck1lc3NhZ2UpO24ubGVuZ3RoPjAmJihyPXIuY29uY2F0KG4pKTt2YXIgbz1mdW5jdGlvbihlLHQscil7dmFyIGE9W107cmV0dXJuIGUuZmluZChcIi5kYXRlXCIpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT0kKHRoaXMpO2MoZSkmJiFtb21lbnQodGhpcy52YWx1ZSx0LCEwKS5pc1ZhbGlkKCkmJihlLmF0dHIoXCJkYXRhLWVycm9yLW1lc3NhZ2VcIixlLmF0dHIoXCJkYXRhLWRhdGUtbWVzc2FnZVwiKXx8ciksYS5wdXNoKGUpKX0pLGF9KGUsdC5sb2NhbGUuZGF0ZSx0LmxvY2FsZS5kYXRlRXJyb3JNZXNzYWdlKTtvLmxlbmd0aD4wJiYocj1yLmNvbmNhdChvKSk7dmFyIGk9ZnVuY3Rpb24oZSx0LHIpe3ZhciBhPVtdO3JldHVybiBlLmZpbmQoXCIudGltZVwiKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9JCh0aGlzKTtjKGUpJiYhbW9tZW50KHRoaXMudmFsdWUsdCwhMCkuaXNWYWxpZCgpJiYoZS5hdHRyKFwiZGF0YS1lcnJvci1tZXNzYWdlXCIsZS5hdHRyKFwiZGF0YS10aW1lLW1lc3NhZ2VcIil8fHIpLGEucHVzaChlKSl9KSxhfShlLHQubG9jYWxlLnRpbWUsdC5sb2NhbGUudGltZUVycm9yTWVzc2FnZSk7aS5sZW5ndGg+MCYmKHI9ci5jb25jYXQoaSkpfXZhciBzPWZ1bmN0aW9uKGUsdCxyKXt2YXIgYT1bXTtyZXR1cm4gZS5maW5kKFwiLmVtYWlsXCIpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT0kKHRoaXMpO2MoZSkmJiF1KHQsdGhpcy52YWx1ZSkmJihlLmF0dHIoXCJkYXRhLWVycm9yLW1lc3NhZ2VcIixlLmF0dHIoXCJkYXRhLWVtYWlsLW1lc3NhZ2VcIil8fHIpLGEucHVzaChlKSl9KSxhfShlLHQucmVnZXguZW1haWwsdC5sb2NhbGUuZW1haWxFcnJvck1lc3NhZ2UpO3MubGVuZ3RoPjAmJihyPXIuY29uY2F0KHMpKTt2YXIgbD1mKGUsdC5sb2NhbGUubnVtYmVyRXJyb3JNZXNzYWdlKTtsLmxlbmd0aD4wJiYocj1yLmNvbmNhdChsKSk7dmFyIGQ9ZnVuY3Rpb24oZSx0LHIpe3ZhciBhPVtdO3JldHVybiBlLmZpbmQoXCIudXJsXCIpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT0kKHRoaXMpO2MoZSkmJiF1KHQsdGhpcy52YWx1ZSkmJihlLmF0dHIoXCJkYXRhLWVycm9yLW1lc3NhZ2VcIixlLmF0dHIoXCJkYXRhLXVybC1tZXNzYWdlXCIpfHxyKSxhLnB1c2goZSkpfSksYX0oZSx0LnJlZ2V4LnVybCx0LmxvY2FsZS51cmxFcnJvck1lc3NhZ2UpO2QubGVuZ3RoPjAmJihyPXIuY29uY2F0KGQpKTt2YXIgaD1tKGUsdC5wYXNzd29yZCx0LmxvY2FsZS5wYXNzd29yZEVycm9yTWVzc2FnZSk7aC5sZW5ndGg+MCYmKHI9ci5jb25jYXQoaCkpO3ZhciBwPWZ1bmN0aW9uKGUsdCl7dmFyIHI9W10sYT1lLmZpbmQoXCIucGFzc3dvcmRcIik7cmV0dXJuIGUuZmluZChcIi5yZXBhc3N3b3JkXCIpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT0kKHRoaXMpO2UudmFsKCkhPT1hLnZhbCgpJiYoZS5hdHRyKFwiZGF0YS1lcnJvci1tZXNzYWdlXCIsZS5hdHRyKFwiZGF0YS1yZXBhc3N3b3JkLW1lc3NhZ2VcIil8fHQpLHIucHVzaChlKSl9KSxyfShlLHQubG9jYWxlLnJlcGFzc3dvcmRFcnJvck1lc3NhZ2UpO3AubGVuZ3RoPjAmJihyPXIuY29uY2F0KHApKTt2YXIgZz1mdW5jdGlvbihlLHQscil7dmFyIGE9W107cmV0dXJuIGUuZmluZChcIi5zaW1wbGVcIikuZWFjaChmdW5jdGlvbigpe3ZhciBlPSQodGhpcyk7YyhlKSYmIXUodCx0aGlzLnZhbHVlKSYmKGUuYXR0cihcImRhdGEtZXJyb3ItbWVzc2FnZVwiLGUuYXR0cihcImRhdGEtc2ltcGxlLW1lc3NhZ2VcIil8fHIpLGEucHVzaChlKSl9KSxhfShlLHQucmVnZXguc2ltcGxlLHQubG9jYWxlLnNpbXBsZUVycm9yTWVzc2FnZSk7Zy5sZW5ndGg+MCYmKHI9ci5jb25jYXQoZykpO3ZhciB2PWZ1bmN0aW9uKGUsdCxyKXt2YXIgYT1bXTtyZXR1cm4gZS5maW5kKFwiLnJlYWxseS1zaW1wbGVcIikuZWFjaChmdW5jdGlvbigpe3ZhciBlPSQodGhpcyk7YyhlKSYmIXUodCx0aGlzLnZhbHVlKSYmKGUuYXR0cihcImRhdGEtZXJyb3ItbWVzc2FnZVwiLGUuYXR0cihcImRhdGEtcmVhbGx5LXNpbXBsZS1tZXNzYWdlXCIpfHxyKSxhLnB1c2goZSkpfSksYX0oZSx0LnJlZ2V4LnJlYWxseVNpbXBsZSx0LmxvY2FsZS5yZWFsbHlTaW1wbGVFcnJvck1lc3NhZ2UpO3YubGVuZ3RoPjAmJihyPXIuY29uY2F0KHYpKTt2YXIgeT1mdW5jdGlvbihlKXt2YXIgdD1bXTtyZXR1cm4gZS5maW5kKFwiLnJlZ2V4XCIpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT0kKHRoaXMpLHI9ZS5hdHRyKFwiZGF0YS1yZWdleFwiKTtjKGUpJiYhdShuZXcgUmVnRXhwKHIpLHRoaXMudmFsdWUpJiYoZS5hdHRyKFwiZGF0YS1lcnJvci1tZXNzYWdlXCIsZS5hdHRyKFwiZGF0YS1tZXNzYWdlXCIpfHxlLmF0dHIoXCJkYXRhLXJlZ2V4LW1lc3NhZ2VcIikpLHQucHVzaChlKSl9KSx0fShlKTtpZih5Lmxlbmd0aD4wJiYocj1yLmNvbmNhdCh5KSksXCJmdW5jdGlvblwiPT10eXBlb2YgdC52YWxpZGF0ZSl7dmFyIGI9dC52YWxpZGF0ZShlLHQpO2ImJmIubGVuZ3RoPjAmJihyPXIuY29uY2F0KGIpKX1yZXR1cm4hKHIubGVuZ3RoPjApfHwoXCJmdW5jdGlvblwiPT10eXBlb2YgdC5zaG93RXJyb3ImJnQuc2hvd0Vycm9yKGUscix0KSwhMSl9LHA9ZnVuY3Rpb24oZSl7ZS5maW5kKFwic2VsZWN0LCBpbnB1dCwgdGV4dGFyZWFcIikuZWFjaChmdW5jdGlvbigpe3RoaXMucmVhZE9ubHkmJnRoaXMuc2V0QXR0cmlidXRlKFwiZGF0YS1vcmlnaW4tcmVhZG9ubHlcIiwhMCksdGhpcy5yZWFkT25seT0hMH0pLGUuZmluZChcImJ1dHRvblwiKS5lYWNoKGZ1bmN0aW9uKCl7dGhpcy5kaXNhYmxlZCYmdGhpcy5zZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbi1kaXNhYmxlZFwiLCEwKSx0aGlzLmRpc2FibGVkPSEwfSl9LGc9ZnVuY3Rpb24oZSl7ZS5maW5kKFwic2VsZWN0LCBpbnB1dCwgdGV4dGFyZWFcIikuZWFjaChmdW5jdGlvbigpe3RoaXMuZ2V0QXR0cmlidXRlKFwiZGF0YS1vcmlnaW4tcmVhZG9ubHlcIil8fCh0aGlzLnJlYWRPbmx5PSExKX0pLGUuZmluZChcImJ1dHRvblwiKS5lYWNoKGZ1bmN0aW9uKCl7dGhpcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbi1kaXNhYmxlZFwiKXx8KHRoaXMuZGlzYWJsZWQ9ITEpfSl9O2Z1bmN0aW9uIHYoZSx0LHIpe3JldHVybiB0IGluIGU/T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7dmFsdWU6cixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOmVbdF09cixlfXZhciB5PWZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJtdWx0aXBhcnQvZm9ybS1kYXRhXCI9PT1lLmF0dHIoXCJlbmN0eXBlXCIpLGE9dC5wb3N0VXJsfHxlLmF0dHIoXCJhY3Rpb25cIil8fHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm9uQmVmb3JlU2VyaWFsaXplRm9ybSYmdC5vbkJlZm9yZVNlcmlhbGl6ZUZvcm0uY2FsbCh2b2lkIDAsZSx0KTt2YXIgbj1yP2Uuc2VyaWFsaXplV2l0aEZpbGVzKCk6ZS5zZXJpYWxpemUoKTtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm9uQmVmb3JlUG9zdEZvcm0mJihuPXQub25CZWZvcmVQb3N0Rm9ybS5jYWxsKHZvaWQgMCxlLHQsbil8fG4pO3RyeXtwKGUpO3ZhciBvPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciByPW51bGwhPWFyZ3VtZW50c1t0XT9hcmd1bWVudHNbdF06e30sYT1PYmplY3Qua2V5cyhyKTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzJiYoYT1hLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHIpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLGUpLmVudW1lcmFibGV9KSkpLGEuZm9yRWFjaChmdW5jdGlvbih0KXt2KGUsdCxyW3RdKX0pfXJldHVybiBlfSh7fSx0LmFqYXgse3VybDphLGRhdGE6bixzdWNjZXNzOmZ1bmN0aW9uKHIsYSxuKXtnKGUpO3ZhciBvPSExO1wiZnVuY3Rpb25cIj09dHlwZW9mIHQucHJvY2Vzc0FqYXhSZXNwb25zZSYmKG89dC5wcm9jZXNzQWpheFJlc3BvbnNlKHIsZSx0KSksbz9cImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm9uQWpheFN1Y2Nlc3MmJnQub25BamF4U3VjY2Vzcy5jYWxsKHRoaXMscixlLHQpOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQub25BamF4RXJyb3ImJnQub25BamF4RXJyb3IuY2FsbCh0aGlzLG4sZSx0KX0sZXJyb3I6ZnVuY3Rpb24ocil7ZyhlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm9uQWpheEVycm9yJiZ0Lm9uQWpheEVycm9yLmNhbGwodGhpcyxyLGUsdCl9fSk7ciYmKG8ucHJvY2Vzc0RhdGE9ITEsby5jb250ZW50VHlwZT0hMSksby5iZWZvcmVTZW5kPWZ1bmN0aW9uKGUsdCl7dC5kYXRhPW4sbi5mYWtlJiYoZS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsXCJtdWx0aXBhcnQvZm9ybS1kYXRhOyBib3VuZGFyeT1cIituLmJvdW5kYXJ5KSxlLnNlbmQ9ZnVuY3Rpb24odCl7ZS5zZW5kQXNCaW5hcnkodC50b1N0cmluZygpKX0pfSwkLmFqYXgobyl9Y2F0Y2gocil7XCJmdW5jdGlvblwiPT10eXBlb2YgdC5vbkFqYXhFcnJvcj90Lm9uQWpheEVycm9yLmNhbGwodm9pZCAwLG51bGwsZSx0KTphbGVydCh0LnVua25vd25FcnJvck1lc3NhZ2UpfX0sYj1mdW5jdGlvbihlLHQpe2Uuc3RvcCgpLmNzcyhcImhlaWdodFwiLFwiXCIpLmFuaW1hdGUoe29wYWNpdHk6MSxoZWlnaHQ6XCJzaG93XCIsbWFyZ2luVG9wOlwic2hvd1wiLG1hcmdpbkJvdHRvbTpcInNob3dcIixwYWRkaW5nVG9wOlwic2hvd1wiLHBhZGRpbmdCb3R0b206XCJzaG93XCJ9LHQsZnVuY3Rpb24oKXtlLmNzcyhcImhlaWdodFwiLFwiXCIpfSl9LHg9ZnVuY3Rpb24oZSx0LHIsYSxuKXt2YXIgaT1lLmZpbmQoXCIubmYtZm9ybS1tZXNzYWdlXCIpOzA9PT1pLmxlbmd0aCYmKGk9bygpKCc8ZGl2IGNsYXNzPVwibmYtZm9ybS1tZXNzYWdlIGFsZXJ0XCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPjwvZGl2PicpLGUucHJlcGVuZChpKSksaS5yZW1vdmVDbGFzcyhcImFsZXJ0LWRhbmdlciBhbGVydC1pbmZvIGFsZXJ0LXN1Y2Nlc3MgYWxlcnQtd2FybmluZ1wiKTt2YXIgcz0nXFxuPGEgY2xhc3M9XCJjbG9zZVwiIGRhdGEtZGlzbWlzcz1cIm1lc3NhZ2VcIj4mdGltZXM7PC9hPlxcbjxiPicuY29uY2F0KHIsXCI8L2I+PGJyIC8+XFxuXCIpLmNvbmNhdChhLFwiXFxuXCIpO2kuYWRkQ2xhc3MoXCJlcnJvclwiPT09dD9cImFsZXJ0LWRhbmdlclwiOlwiYWxlcnQtXCIuY29uY2F0KHQpKSxpLmh0bWwocyksYihpLG4pfSx3PWZ1bmN0aW9uKGUsdCl7ZS5zdG9wKCkuYW5pbWF0ZSh7b3BhY2l0eTowLGhlaWdodDpcImhpZGVcIixtYXJnaW5Ub3A6XCJoaWRlXCIsbWFyZ2luQm90dG9tOlwiaGlkZVwiLHBhZGRpbmdUb3A6XCJoaWRlXCIscGFkZGluZ0JvdHRvbTpcImhpZGVcIn0sdCl9LEU9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLmZpbmQoXCIubmYtZm9ybS1tZXNzYWdlXCIpOzAhPT1yLmxlbmd0aCYmdyhyLHQpfTtmdW5jdGlvbiBNKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBhPXRbcl07YS5lbnVtZXJhYmxlPWEuZW51bWVyYWJsZXx8ITEsYS5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gYSYmKGEud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLGEua2V5LGEpfX1mdW5jdGlvbiBTKGUsdCxyKXtyZXR1cm4gdCBpbiBlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOnIsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTplW3RdPXIsZX1yKDMpLHIoNCk7dmFyIGo9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQscil7aWYoZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSh0aGlzLGUpLHQuanF1ZXJ5JiYwIT09dC5sZW5ndGgpe3ZhciBhPXRoaXMub3B0aW9ucz1vLmEuZXh0ZW5kKHt9LGUuREVGQVVMVFMscik7dGhpcy5mb3JtPXQsdC5vZmYoXCJzdWJtaXRcIikub24oXCJzdWJtaXRcIixmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksXCJmdW5jdGlvblwiPT10eXBlb2YgYS5oaWRlRXJyb3ImJmEuaGlkZUVycm9yKHQsYSksaCh0LGEpPyhcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLm9uVmFsaWQmJmEub25WYWxpZCh0LGEpLCEwPT09YS5wb3N0Rm9ybUVuYWJsZWQmJnkodCxhKSk6XCJmdW5jdGlvblwiPT10eXBlb2YgYS5vbkludmFsaWQmJmEub25JbnZhbGlkKHQsYSl9KSx0Lm9uKFwiY2xpY2tcIixcIltkYXRhLWRpc21pc3M9bWVzc2FnZV1cIixmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksRSh0LGEuYW5pbWF0aW9uRHVyYXRpb24pfSl9fXZhciB0LHIsYTtyZXR1cm4gdD1lLChyPVt7a2V5OlwiY2xlYXJWYWx1ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpeyFmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCJpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdFwiO2UuZmluZCh0KS5ub3QoJ1tkYXRhLWlnbm9yZT1cImNsZWFyXCJdJykuZWFjaChmdW5jdGlvbigpe3ZhciBlPSQodGhpcyksdD1lLmlzKFwic2VsZWN0XCIpLHI9ZS5pcyhcIjpjaGVja2JveFwiKSxhPWUuaXMoXCI6cmFkaW9cIik7dD90aGlzLnNlbGVjdGVkSW5kZXg9LTE6cnx8YT9lLnByb3AoXCJjaGVja2VkXCIsITEpOmUudmFsKFwiXCIpfSl9KHRoaXMuZm9ybSxlKX19LHtrZXk6XCJlbmFibGVGb3JtXCIsdmFsdWU6ZnVuY3Rpb24oKXtnKHRoaXMuZm9ybSl9fSx7a2V5OlwiZGlzYWJsZUZvcm1cIix2YWx1ZTpmdW5jdGlvbigpe3AodGhpcy5mb3JtKX19LHtrZXk6XCJzaG93TWVzc2FnZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXt4KHRoaXMuZm9ybSxlLHQscix0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24pfX0se2tleTpcInNob3dTdWNjZXNzTWVzc2FnZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3godGhpcy5mb3JtLFwic3VjY2Vzc1wiLHRoaXMub3B0aW9ucy5sb2NhbGUuc3VjY2Vzc1RpdGxlLGUsdGhpcy5vcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uKX19LHtrZXk6XCJzaG93RXJyb3JNZXNzYWdlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7eCh0aGlzLmZvcm0sXCJkYW5nZXJcIix0aGlzLm9wdGlvbnMubG9jYWxlLmVycm9yVGl0bGUsZSx0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24pfX0se2tleTpcImhpZGVNZXNzYWdlXCIsdmFsdWU6ZnVuY3Rpb24oKXtFKHRoaXMuZm9ybSx0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24pfX0se2tleTpcImdldE9wdGlvbnNcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBvLmEuZXh0ZW5kKHt9LHRoaXMub3B0aW9ucyl9fSx7a2V5Olwic2hvd0VsZW1lbnRcIix2YWx1ZTpmdW5jdGlvbihlKXtiKGUsdGhpcy5vcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uKX19LHtrZXk6XCJoaWRlRWxlbWVudFwiLHZhbHVlOmZ1bmN0aW9uKGUpe3coZSx0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24pfX1dKSYmTSh0LnByb3RvdHlwZSxyKSxhJiZNKHQsYSksZX0oKTtTKGosXCJERUZBVUxUU1wiLGwpLFMoaixcInZlcnNpb25cIixcIjEuMC40XCIpLG8uYS5mbi5uaWNlZm9ybT1mdW5jdGlvbihlKXt2YXIgdD1vKCkodGhpcykscj10LmRhdGEoXCJuaWNlZm9ybVwiKTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSl7aWYociYmZSBpbiBqLnByb3RvdHlwZSl7Zm9yKHZhciBhPWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkoYT4xP2EtMTowKSxpPTE7aTxhO2krKyluW2ktMV09YXJndW1lbnRzW2ldO3JldHVybiByW2VdLmFwcGx5KHIsbil9fWVsc2UgaWYoIXIpcmV0dXJuIHQuZGF0YShcIm5pY2Vmb3JtXCIscj1uZXcgaih0LGUpKSxyfTt0LmRlZmF1bHQ9an1dKS5kZWZhdWx0fSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qcXVlcnkubmljZWZvcm0uanMubWFwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvanF1ZXJ5Lm5pY2Vmb3JtJyk7XHJcbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My40LjBcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE5LTA0LTEwVDE5OjQ4WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGNvbmNhdCA9IGFyci5jb25jYXQ7XG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9uY2U6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBub2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksIHZhbCxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNjQrLCBFZGdlIDE4K1xuXHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIFwibm9uY2VcIiBwcm9wZXJ0eSBvbiBzY3JpcHRzLlxuXHRcdFx0XHQvLyBPbiB0aGUgb3RoZXIgaGFuZCwganVzdCB1c2luZyBgZ2V0QXR0cmlidXRlYCBpcyBub3QgZW5vdWdoIGFzXG5cdFx0XHRcdC8vIHRoZSBgbm9uY2VgIGF0dHJpYnV0ZSBpcyByZXNldCB0byBhbiBlbXB0eSBzdHJpbmcgd2hlbmV2ZXIgaXRcblx0XHRcdFx0Ly8gYmVjb21lcyBicm93c2luZy1jb250ZXh0IGNvbm5lY3RlZC5cblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvMjM2OVxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jbm9uY2UtYXR0cmlidXRlc1xuXHRcdFx0XHQvLyBUaGUgYG5vZGUuZ2V0QXR0cmlidXRlYCBjaGVjayB3YXMgYWRkZWQgZm9yIHRoZSBzYWtlIG9mXG5cdFx0XHRcdC8vIGBqUXVlcnkuZ2xvYmFsRXZhbGAgc28gdGhhdCBpdCBjYW4gZmFrZSBhIG5vbmNlLWNvbnRhaW5pbmcgbm9kZVxuXHRcdFx0XHQvLyB2aWEgYW4gb2JqZWN0LlxuXHRcdFx0XHR2YWwgPSBub2RlWyBpIF0gfHwgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoIGkgKTtcblx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSggaSwgdmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjQuMFwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0gKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuNFxuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pzLmZvdW5kYXRpb24vXG4gKlxuICogRGF0ZTogMjAxOS0wNC0wOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArIGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblxuXHRcdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdH1cblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmIChlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOCBvbmx5XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdChub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIpICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiYgcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSApIHtcblxuXHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0aWYgKCAobmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApKSApIHtcblx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsIChuaWQgPSBleHBhbmRvKSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzW2ldID0gXCIjXCIgKyBuaWQgKyBcIiBcIiArIHRvU2VsZWN0b3IoIGdyb3Vwc1tpXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKGN1ciA9IGN1ci5uZXh0U2libGluZykgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRkb2NFbGVtID0gKGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0aWYgKCBkb2MgPT09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOS0xMSwgRWRnZVxuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdGlmICggcHJlZmVycmVkRG9jICE9PSBkb2N1bWVudCAmJlxuXHRcdChzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbXNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApKSApIHtcblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIn49XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIjpkaXNhYmxlZFwiKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggdHlwZW9mIGVsZW0uY29udGVudERvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIGFsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuYXR0YWNoU2hhZG93ICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIGVsLCBcImNsaWNrXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggZWwsIFwiY2xpY2tcIiApID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgZXhwZWN0U3luYyApIHtcblxuXHQvLyBNaXNzaW5nIGV4cGVjdFN5bmMgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFleHBlY3RTeW5jICkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdGlmICggIXNhdmVkICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nIHRoZVxuXHRcdFx0XHQvLyBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQgKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBzYXZlZC5zaGlmdCgpLCBqUXVlcnkuRXZlbnQucHJvdG90eXBlICksXG5cdFx0XHRcdFx0c2F2ZWQsXG5cdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHQpICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlXG5cdC8vIFdlIHVzZSBnZXRDbGllbnRSZWN0cygpIHRvIGNoZWNrIGZvciBoaWRkZW4vZGlzY29ubmVjdGVkLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3hcblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0gRGF0ZS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvKiBnbG9iYWxzIF9fd2VicGFja19hbWRfb3B0aW9uc19fICovXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19hbWRfb3B0aW9uc19fO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLy8gVGhlbWUgc2NyaXB0c1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5pbXBvcnQgJ2xpbWl0bGVzcy0yLjAuMS9nbG9iYWxfYXNzZXRzL2pzL21haW4vanF1ZXJ5Lm1pbic7XHJcbmltcG9ydCAnbGltaXRsZXNzLTIuMC4xL2dsb2JhbF9hc3NldHMvanMvbWFpbi9ib290c3RyYXAuYnVuZGxlLm1pbic7XHJcbmltcG9ydCAnbGltaXRsZXNzLTIuMC4xL2dsb2JhbF9hc3NldHMvanMvcGx1Z2lucy9sb2FkZXJzL2Jsb2NrdWkubWluJztcclxuaW1wb3J0ICdsaW1pdGxlc3MtMi4wLjEvZ2xvYmFsX2Fzc2V0cy9qcy9wbHVnaW5zL2Zvcm1zL3N0eWxpbmcvdW5pZm9ybS5taW4nO1xyXG5pbXBvcnQgJ2pxdWVyeS5uaWNlZm9ybSc7XHIvLyBUaGVtZSBzdHlsZXNcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuaW1wb3J0ICdmb250cy9Sb2JvdG8uc2Nzcyc7XHJcbmltcG9ydCAnbGltaXRsZXNzLTIuMC4xL2dsb2JhbF9hc3NldHMvY3NzL2ljb25zL2ljb21vb24vc3R5bGVzLmNzcyc7XHJcbmltcG9ydCAnbGltaXRsZXNzLTIuMC4xL2dsb2JhbF9hc3NldHMvY3NzL2ljb25zL2ZvbnRhd2Vzb21lL3N0eWxlcy5taW4uY3NzJztcclxuaW1wb3J0ICdsaW1pdGxlc3MtMi4wLjEvbGF5b3V0XzIvZGVmYXVsdC9hc3NldHMvY3NzL2Jvb3RzdHJhcC5taW4uY3NzJztcclxuaW1wb3J0ICdsaW1pdGxlc3MtMi4wLjEvbGF5b3V0XzIvZGVmYXVsdC9hc3NldHMvY3NzL2Jvb3RzdHJhcF9saW1pdGxlc3MubWluLmNzcyc7XHJcbmltcG9ydCAnbGltaXRsZXNzLTIuMC4xL2xheW91dF8yL2RlZmF1bHQvYXNzZXRzL2Nzcy9sYXlvdXQubWluLmNzcyc7XHJcbmltcG9ydCAnbGltaXRsZXNzLTIuMC4xL2xheW91dF8yL2RlZmF1bHQvYXNzZXRzL2Nzcy9jb21wb25lbnRzLm1pbi5jc3MnO1xyXG5pbXBvcnQgJ2xpbWl0bGVzcy0yLjAuMS9sYXlvdXRfMi9kZWZhdWx0L2Fzc2V0cy9jc3MvY29sb3JzLm1pbi5jc3MnO1xyXG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iLCIvKiFcciogQm9vdHN0cmFwIHY0LjEuMSAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tLylcciogQ29weXJpZ2h0IDIwMTEtMjAxOCBUaGUgQm9vdHN0cmFwIEF1dGhvcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ncmFwaHMvY29udHJpYnV0b3JzKVxyKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxyKi9cclxuIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/ZShleHBvcnRzLHJlcXVpcmUoXCJqcXVlcnlcIikpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZXhwb3J0c1wiLFwianF1ZXJ5XCJdLGUpOmUodC5ib290c3RyYXA9e30sdC5qUXVlcnkpfSh0aGlzLGZ1bmN0aW9uKHQsZSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgaT1lW25dO2kuZW51bWVyYWJsZT1pLmVudW1lcmFibGV8fCExLGkuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIGkmJihpLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxpLmtleSxpKX19ZnVuY3Rpb24gcyh0LGUsbil7cmV0dXJuIGUmJmkodC5wcm90b3R5cGUsZSksbiYmaSh0LG4pLHR9ZnVuY3Rpb24gYyhyKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbz1udWxsIT1hcmd1bWVudHNbdF0/YXJndW1lbnRzW3RdOnt9LGU9T2JqZWN0LmtleXMobyk7XCJmdW5jdGlvblwiPT10eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyYmKGU9ZS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvKS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iobyx0KS5lbnVtZXJhYmxlfSkpKSxlLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGUsbixpO2U9cixpPW9bbj10XSxuIGluIGU/T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7dmFsdWU6aSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOmVbbl09aX0pfXJldHVybiByfWZvcih2YXIgcixuLG8sYSxsLGYsaCx1LGQscCxnLG0sXyx2LEUseSxiLFQsQyx3LEksRCxBLFMsTyxOLGssTCxQLHgsaixNLFIsSCxXLEYsVSxCLEssVixRLFksRyxxLHosWCxKLFosJCx0dCxldCxudCxpdCxydCxvdCxzdCxhdCxsdCxjdCxmdCxodCx1dCxkdCxwdCxndD1mdW5jdGlvbihpKXt2YXIgZT1cInRyYW5zaXRpb25lbmRcIjtmdW5jdGlvbiB0KHQpe3ZhciBlPXRoaXMsbj0hMTtyZXR1cm4gaSh0aGlzKS5vbmUobC5UUkFOU0lUSU9OX0VORCxmdW5jdGlvbigpe249ITB9KSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bnx8bC50cmlnZ2VyVHJhbnNpdGlvbkVuZChlKX0sdCksdGhpc312YXIgbD17VFJBTlNJVElPTl9FTkQ6XCJic1RyYW5zaXRpb25FbmRcIixnZXRVSUQ6ZnVuY3Rpb24odCl7Zm9yKDt0Kz1+figxZTYqTWF0aC5yYW5kb20oKSksZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodCk7KTtyZXR1cm4gdH0sZ2V0U2VsZWN0b3JGcm9tRWxlbWVudDpmdW5jdGlvbih0KXt2YXIgZT10LmdldEF0dHJpYnV0ZShcImRhdGEtdGFyZ2V0XCIpO2UmJlwiI1wiIT09ZXx8KGU9dC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpfHxcIlwiKTt0cnl7cmV0dXJuIDA8aShkb2N1bWVudCkuZmluZChlKS5sZW5ndGg/ZTpudWxsfWNhdGNoKHQpe3JldHVybiBudWxsfX0sZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQ6ZnVuY3Rpb24odCl7aWYoIXQpcmV0dXJuIDA7dmFyIGU9aSh0KS5jc3MoXCJ0cmFuc2l0aW9uLWR1cmF0aW9uXCIpO3JldHVybiBwYXJzZUZsb2F0KGUpPyhlPWUuc3BsaXQoXCIsXCIpWzBdLDFlMypwYXJzZUZsb2F0KGUpKTowfSxyZWZsb3c6ZnVuY3Rpb24odCl7cmV0dXJuIHQub2Zmc2V0SGVpZ2h0fSx0cmlnZ2VyVHJhbnNpdGlvbkVuZDpmdW5jdGlvbih0KXtpKHQpLnRyaWdnZXIoZSl9LHN1cHBvcnRzVHJhbnNpdGlvbkVuZDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKGUpfSxpc0VsZW1lbnQ6ZnVuY3Rpb24odCl7cmV0dXJuKHRbMF18fHQpLm5vZGVUeXBlfSx0eXBlQ2hlY2tDb25maWc6ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgaSBpbiBuKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLGkpKXt2YXIgcj1uW2ldLG89ZVtpXSxzPW8mJmwuaXNFbGVtZW50KG8pP1wiZWxlbWVudFwiOihhPW8se30udG9TdHJpbmcuY2FsbChhKS5tYXRjaCgvXFxzKFthLXpdKykvaSlbMV0udG9Mb3dlckNhc2UoKSk7aWYoIW5ldyBSZWdFeHAocikudGVzdChzKSl0aHJvdyBuZXcgRXJyb3IodC50b1VwcGVyQ2FzZSgpKyc6IE9wdGlvbiBcIicraSsnXCIgcHJvdmlkZWQgdHlwZSBcIicrcysnXCIgYnV0IGV4cGVjdGVkIHR5cGUgXCInK3IrJ1wiLicpfXZhciBhfX07cmV0dXJuIGkuZm4uZW11bGF0ZVRyYW5zaXRpb25FbmQ9dCxpLmV2ZW50LnNwZWNpYWxbbC5UUkFOU0lUSU9OX0VORF09e2JpbmRUeXBlOmUsZGVsZWdhdGVUeXBlOmUsaGFuZGxlOmZ1bmN0aW9uKHQpe2lmKGkodC50YXJnZXQpLmlzKHRoaXMpKXJldHVybiB0LmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19LGx9KGU9ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRcIik/ZS5kZWZhdWx0OmUpLG10PShuPVwiYWxlcnRcIixhPVwiLlwiKyhvPVwiYnMuYWxlcnRcIiksbD0ocj1lKS5mbltuXSxmPXtDTE9TRTpcImNsb3NlXCIrYSxDTE9TRUQ6XCJjbG9zZWRcIithLENMSUNLX0RBVEFfQVBJOlwiY2xpY2tcIithK1wiLmRhdGEtYXBpXCJ9LGg9XCJhbGVydFwiLHU9XCJmYWRlXCIsZD1cInNob3dcIixwPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gaSh0KXt0aGlzLl9lbGVtZW50PXR9dmFyIHQ9aS5wcm90b3R5cGU7cmV0dXJuIHQuY2xvc2U9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fZWxlbWVudDt0JiYoZT10aGlzLl9nZXRSb290RWxlbWVudCh0KSksdGhpcy5fdHJpZ2dlckNsb3NlRXZlbnQoZSkuaXNEZWZhdWx0UHJldmVudGVkKCl8fHRoaXMuX3JlbW92ZUVsZW1lbnQoZSl9LHQuZGlzcG9zZT1mdW5jdGlvbigpe3IucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LG8pLHRoaXMuX2VsZW1lbnQ9bnVsbH0sdC5fZ2V0Um9vdEVsZW1lbnQ9ZnVuY3Rpb24odCl7dmFyIGU9Z3QuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0KSxuPSExO3JldHVybiBlJiYobj1yKGUpWzBdKSxufHwobj1yKHQpLmNsb3Nlc3QoXCIuXCIraClbMF0pLG59LHQuX3RyaWdnZXJDbG9zZUV2ZW50PWZ1bmN0aW9uKHQpe3ZhciBlPXIuRXZlbnQoZi5DTE9TRSk7cmV0dXJuIHIodCkudHJpZ2dlcihlKSxlfSx0Ll9yZW1vdmVFbGVtZW50PWZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7aWYocihlKS5yZW1vdmVDbGFzcyhkKSxyKGUpLmhhc0NsYXNzKHUpKXt2YXIgdD1ndC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChlKTtyKGUpLm9uZShndC5UUkFOU0lUSU9OX0VORCxmdW5jdGlvbih0KXtyZXR1cm4gbi5fZGVzdHJveUVsZW1lbnQoZSx0KX0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHQpfWVsc2UgdGhpcy5fZGVzdHJveUVsZW1lbnQoZSl9LHQuX2Rlc3Ryb3lFbGVtZW50PWZ1bmN0aW9uKHQpe3IodCkuZGV0YWNoKCkudHJpZ2dlcihmLkNMT1NFRCkucmVtb3ZlKCl9LGkuX2pRdWVyeUludGVyZmFjZT1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9cih0aGlzKSxlPXQuZGF0YShvKTtlfHwoZT1uZXcgaSh0aGlzKSx0LmRhdGEobyxlKSksXCJjbG9zZVwiPT09biYmZVtuXSh0aGlzKX0pfSxpLl9oYW5kbGVEaXNtaXNzPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXt0JiZ0LnByZXZlbnREZWZhdWx0KCksZS5jbG9zZSh0aGlzKX19LHMoaSxudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNC4xLjFcIn19XSksaX0oKSxyKGRvY3VtZW50KS5vbihmLkNMSUNLX0RBVEFfQVBJLCdbZGF0YS1kaXNtaXNzPVwiYWxlcnRcIl0nLHAuX2hhbmRsZURpc21pc3MobmV3IHApKSxyLmZuW25dPXAuX2pRdWVyeUludGVyZmFjZSxyLmZuW25dLkNvbnN0cnVjdG9yPXAsci5mbltuXS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIHIuZm5bbl09bCxwLl9qUXVlcnlJbnRlcmZhY2V9LHApLF90PShtPVwiYnV0dG9uXCIsdj1cIi5cIisoXz1cImJzLmJ1dHRvblwiKSxFPVwiLmRhdGEtYXBpXCIseT0oZz1lKS5mblttXSxiPVwiYWN0aXZlXCIsVD1cImJ0blwiLHc9J1tkYXRhLXRvZ2dsZV49XCJidXR0b25cIl0nLEk9J1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nLEQ9XCJpbnB1dFwiLEE9XCIuYWN0aXZlXCIsUz1cIi5idG5cIixPPXtDTElDS19EQVRBX0FQSTpcImNsaWNrXCIrditFLEZPQ1VTX0JMVVJfREFUQV9BUEk6KEM9XCJmb2N1c1wiKSt2K0UrXCIgYmx1clwiK3YrRX0sTj1mdW5jdGlvbigpe2Z1bmN0aW9uIG4odCl7dGhpcy5fZWxlbWVudD10fXZhciB0PW4ucHJvdG90eXBlO3JldHVybiB0LnRvZ2dsZT1mdW5jdGlvbigpe3ZhciB0PSEwLGU9ITAsbj1nKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoSSlbMF07aWYobil7dmFyIGk9Zyh0aGlzLl9lbGVtZW50KS5maW5kKEQpWzBdO2lmKGkpe2lmKFwicmFkaW9cIj09PWkudHlwZSlpZihpLmNoZWNrZWQmJmcodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoYikpdD0hMTtlbHNle3ZhciByPWcobikuZmluZChBKVswXTtyJiZnKHIpLnJlbW92ZUNsYXNzKGIpfWlmKHQpe2lmKGkuaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIil8fG4uaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIil8fGkuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGlzYWJsZWRcIil8fG4uY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGlzYWJsZWRcIikpcmV0dXJuO2kuY2hlY2tlZD0hZyh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhiKSxnKGkpLnRyaWdnZXIoXCJjaGFuZ2VcIil9aS5mb2N1cygpLGU9ITF9fWUmJnRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1wcmVzc2VkXCIsIWcodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoYikpLHQmJmcodGhpcy5fZWxlbWVudCkudG9nZ2xlQ2xhc3MoYil9LHQuZGlzcG9zZT1mdW5jdGlvbigpe2cucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LF8pLHRoaXMuX2VsZW1lbnQ9bnVsbH0sbi5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1nKHRoaXMpLmRhdGEoXyk7dHx8KHQ9bmV3IG4odGhpcyksZyh0aGlzKS5kYXRhKF8sdCkpLFwidG9nZ2xlXCI9PT1lJiZ0W2VdKCl9KX0scyhuLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjEuMVwifX1dKSxufSgpLGcoZG9jdW1lbnQpLm9uKE8uQ0xJQ0tfREFUQV9BUEksdyxmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCk7dmFyIGU9dC50YXJnZXQ7ZyhlKS5oYXNDbGFzcyhUKXx8KGU9ZyhlKS5jbG9zZXN0KFMpKSxOLl9qUXVlcnlJbnRlcmZhY2UuY2FsbChnKGUpLFwidG9nZ2xlXCIpfSkub24oTy5GT0NVU19CTFVSX0RBVEFfQVBJLHcsZnVuY3Rpb24odCl7dmFyIGU9Zyh0LnRhcmdldCkuY2xvc2VzdChTKVswXTtnKGUpLnRvZ2dsZUNsYXNzKEMsL15mb2N1cyhpbik/JC8udGVzdCh0LnR5cGUpKX0pLGcuZm5bbV09Ti5falF1ZXJ5SW50ZXJmYWNlLGcuZm5bbV0uQ29uc3RydWN0b3I9TixnLmZuW21dLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gZy5mblttXT15LE4uX2pRdWVyeUludGVyZmFjZX0sTiksdnQ9KEw9XCJjYXJvdXNlbFwiLHg9XCIuXCIrKFA9XCJicy5jYXJvdXNlbFwiKSxqPVwiLmRhdGEtYXBpXCIsTT0oaz1lKS5mbltMXSxSPXtpbnRlcnZhbDo1ZTMsa2V5Ym9hcmQ6ITAsc2xpZGU6ITEscGF1c2U6XCJob3ZlclwiLHdyYXA6ITB9LEg9e2ludGVydmFsOlwiKG51bWJlcnxib29sZWFuKVwiLGtleWJvYXJkOlwiYm9vbGVhblwiLHNsaWRlOlwiKGJvb2xlYW58c3RyaW5nKVwiLHBhdXNlOlwiKHN0cmluZ3xib29sZWFuKVwiLHdyYXA6XCJib29sZWFuXCJ9LFc9XCJuZXh0XCIsRj1cInByZXZcIixVPVwibGVmdFwiLEI9XCJyaWdodFwiLEs9e1NMSURFOlwic2xpZGVcIit4LFNMSUQ6XCJzbGlkXCIreCxLRVlET1dOOlwia2V5ZG93blwiK3gsTU9VU0VFTlRFUjpcIm1vdXNlZW50ZXJcIit4LE1PVVNFTEVBVkU6XCJtb3VzZWxlYXZlXCIreCxUT1VDSEVORDpcInRvdWNoZW5kXCIreCxMT0FEX0RBVEFfQVBJOlwibG9hZFwiK3graixDTElDS19EQVRBX0FQSTpcImNsaWNrXCIreCtqfSxWPVwiY2Fyb3VzZWxcIixRPVwiYWN0aXZlXCIsWT1cInNsaWRlXCIsRz1cImNhcm91c2VsLWl0ZW0tcmlnaHRcIixxPVwiY2Fyb3VzZWwtaXRlbS1sZWZ0XCIsej1cImNhcm91c2VsLWl0ZW0tbmV4dFwiLFg9XCJjYXJvdXNlbC1pdGVtLXByZXZcIixKPXtBQ1RJVkU6XCIuYWN0aXZlXCIsQUNUSVZFX0lURU06XCIuYWN0aXZlLmNhcm91c2VsLWl0ZW1cIixJVEVNOlwiLmNhcm91c2VsLWl0ZW1cIixORVhUX1BSRVY6XCIuY2Fyb3VzZWwtaXRlbS1uZXh0LCAuY2Fyb3VzZWwtaXRlbS1wcmV2XCIsSU5ESUNBVE9SUzpcIi5jYXJvdXNlbC1pbmRpY2F0b3JzXCIsREFUQV9TTElERTpcIltkYXRhLXNsaWRlXSwgW2RhdGEtc2xpZGUtdG9dXCIsREFUQV9SSURFOidbZGF0YS1yaWRlPVwiY2Fyb3VzZWxcIl0nfSxaPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbyh0LGUpe3RoaXMuX2l0ZW1zPW51bGwsdGhpcy5faW50ZXJ2YWw9bnVsbCx0aGlzLl9hY3RpdmVFbGVtZW50PW51bGwsdGhpcy5faXNQYXVzZWQ9ITEsdGhpcy5faXNTbGlkaW5nPSExLHRoaXMudG91Y2hUaW1lb3V0PW51bGwsdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhlKSx0aGlzLl9lbGVtZW50PWsodClbMF0sdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQ9ayh0aGlzLl9lbGVtZW50KS5maW5kKEouSU5ESUNBVE9SUylbMF0sdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKX12YXIgdD1vLnByb3RvdHlwZTtyZXR1cm4gdC5uZXh0PWZ1bmN0aW9uKCl7dGhpcy5faXNTbGlkaW5nfHx0aGlzLl9zbGlkZShXKX0sdC5uZXh0V2hlblZpc2libGU9ZnVuY3Rpb24oKXshZG9jdW1lbnQuaGlkZGVuJiZrKHRoaXMuX2VsZW1lbnQpLmlzKFwiOnZpc2libGVcIikmJlwiaGlkZGVuXCIhPT1rKHRoaXMuX2VsZW1lbnQpLmNzcyhcInZpc2liaWxpdHlcIikmJnRoaXMubmV4dCgpfSx0LnByZXY9ZnVuY3Rpb24oKXt0aGlzLl9pc1NsaWRpbmd8fHRoaXMuX3NsaWRlKEYpfSx0LnBhdXNlPWZ1bmN0aW9uKHQpe3R8fCh0aGlzLl9pc1BhdXNlZD0hMCksayh0aGlzLl9lbGVtZW50KS5maW5kKEouTkVYVF9QUkVWKVswXSYmKGd0LnRyaWdnZXJUcmFuc2l0aW9uRW5kKHRoaXMuX2VsZW1lbnQpLHRoaXMuY3ljbGUoITApKSxjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKSx0aGlzLl9pbnRlcnZhbD1udWxsfSx0LmN5Y2xlPWZ1bmN0aW9uKHQpe3R8fCh0aGlzLl9pc1BhdXNlZD0hMSksdGhpcy5faW50ZXJ2YWwmJihjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKSx0aGlzLl9pbnRlcnZhbD1udWxsKSx0aGlzLl9jb25maWcuaW50ZXJ2YWwmJiF0aGlzLl9pc1BhdXNlZCYmKHRoaXMuX2ludGVydmFsPXNldEludGVydmFsKChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGU/dGhpcy5uZXh0V2hlblZpc2libGU6dGhpcy5uZXh0KS5iaW5kKHRoaXMpLHRoaXMuX2NvbmZpZy5pbnRlcnZhbCkpfSx0LnRvPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dGhpcy5fYWN0aXZlRWxlbWVudD1rKHRoaXMuX2VsZW1lbnQpLmZpbmQoSi5BQ1RJVkVfSVRFTSlbMF07dmFyIG49dGhpcy5fZ2V0SXRlbUluZGV4KHRoaXMuX2FjdGl2ZUVsZW1lbnQpO2lmKCEodD50aGlzLl9pdGVtcy5sZW5ndGgtMXx8dDwwKSlpZih0aGlzLl9pc1NsaWRpbmcpayh0aGlzLl9lbGVtZW50KS5vbmUoSy5TTElELGZ1bmN0aW9uKCl7cmV0dXJuIGUudG8odCl9KTtlbHNle2lmKG49PT10KXJldHVybiB0aGlzLnBhdXNlKCksdm9pZCB0aGlzLmN5Y2xlKCk7dmFyIGk9bjx0P1c6Rjt0aGlzLl9zbGlkZShpLHRoaXMuX2l0ZW1zW3RdKX19LHQuZGlzcG9zZT1mdW5jdGlvbigpe2sodGhpcy5fZWxlbWVudCkub2ZmKHgpLGsucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LFApLHRoaXMuX2l0ZW1zPW51bGwsdGhpcy5fY29uZmlnPW51bGwsdGhpcy5fZWxlbWVudD1udWxsLHRoaXMuX2ludGVydmFsPW51bGwsdGhpcy5faXNQYXVzZWQ9bnVsbCx0aGlzLl9pc1NsaWRpbmc9bnVsbCx0aGlzLl9hY3RpdmVFbGVtZW50PW51bGwsdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQ9bnVsbH0sdC5fZ2V0Q29uZmlnPWZ1bmN0aW9uKHQpe3JldHVybiB0PWMoe30sUix0KSxndC50eXBlQ2hlY2tDb25maWcoTCx0LEgpLHR9LHQuX2FkZEV2ZW50TGlzdGVuZXJzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLl9jb25maWcua2V5Ym9hcmQmJmsodGhpcy5fZWxlbWVudCkub24oSy5LRVlET1dOLGZ1bmN0aW9uKHQpe3JldHVybiBlLl9rZXlkb3duKHQpfSksXCJob3ZlclwiPT09dGhpcy5fY29uZmlnLnBhdXNlJiYoayh0aGlzLl9lbGVtZW50KS5vbihLLk1PVVNFRU5URVIsZnVuY3Rpb24odCl7cmV0dXJuIGUucGF1c2UodCl9KS5vbihLLk1PVVNFTEVBVkUsZnVuY3Rpb24odCl7cmV0dXJuIGUuY3ljbGUodCl9KSxcIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiZrKHRoaXMuX2VsZW1lbnQpLm9uKEsuVE9VQ0hFTkQsZnVuY3Rpb24oKXtlLnBhdXNlKCksZS50b3VjaFRpbWVvdXQmJmNsZWFyVGltZW91dChlLnRvdWNoVGltZW91dCksZS50b3VjaFRpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbih0KXtyZXR1cm4gZS5jeWNsZSh0KX0sNTAwK2UuX2NvbmZpZy5pbnRlcnZhbCl9KSl9LHQuX2tleWRvd249ZnVuY3Rpb24odCl7aWYoIS9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QodC50YXJnZXQudGFnTmFtZSkpc3dpdGNoKHQud2hpY2gpe2Nhc2UgMzc6dC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMucHJldigpO2JyZWFrO2Nhc2UgMzk6dC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMubmV4dCgpfX0sdC5fZ2V0SXRlbUluZGV4PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9pdGVtcz1rLm1ha2VBcnJheShrKHQpLnBhcmVudCgpLmZpbmQoSi5JVEVNKSksdGhpcy5faXRlbXMuaW5kZXhPZih0KX0sdC5fZ2V0SXRlbUJ5RGlyZWN0aW9uPWZ1bmN0aW9uKHQsZSl7dmFyIG49dD09PVcsaT10PT09RixyPXRoaXMuX2dldEl0ZW1JbmRleChlKSxvPXRoaXMuX2l0ZW1zLmxlbmd0aC0xO2lmKChpJiYwPT09cnx8biYmcj09PW8pJiYhdGhpcy5fY29uZmlnLndyYXApcmV0dXJuIGU7dmFyIHM9KHIrKHQ9PT1GPy0xOjEpKSV0aGlzLl9pdGVtcy5sZW5ndGg7cmV0dXJuLTE9PT1zP3RoaXMuX2l0ZW1zW3RoaXMuX2l0ZW1zLmxlbmd0aC0xXTp0aGlzLl9pdGVtc1tzXX0sdC5fdHJpZ2dlclNsaWRlRXZlbnQ9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLl9nZXRJdGVtSW5kZXgodCksaT10aGlzLl9nZXRJdGVtSW5kZXgoayh0aGlzLl9lbGVtZW50KS5maW5kKEouQUNUSVZFX0lURU0pWzBdKSxyPWsuRXZlbnQoSy5TTElERSx7cmVsYXRlZFRhcmdldDp0LGRpcmVjdGlvbjplLGZyb206aSx0bzpufSk7cmV0dXJuIGsodGhpcy5fZWxlbWVudCkudHJpZ2dlcihyKSxyfSx0Ll9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50PWZ1bmN0aW9uKHQpe2lmKHRoaXMuX2luZGljYXRvcnNFbGVtZW50KXtrKHRoaXMuX2luZGljYXRvcnNFbGVtZW50KS5maW5kKEouQUNUSVZFKS5yZW1vdmVDbGFzcyhRKTt2YXIgZT10aGlzLl9pbmRpY2F0b3JzRWxlbWVudC5jaGlsZHJlblt0aGlzLl9nZXRJdGVtSW5kZXgodCldO2UmJmsoZSkuYWRkQ2xhc3MoUSl9fSx0Ll9zbGlkZT1mdW5jdGlvbih0LGUpe3ZhciBuLGkscixvPXRoaXMscz1rKHRoaXMuX2VsZW1lbnQpLmZpbmQoSi5BQ1RJVkVfSVRFTSlbMF0sYT10aGlzLl9nZXRJdGVtSW5kZXgocyksbD1lfHxzJiZ0aGlzLl9nZXRJdGVtQnlEaXJlY3Rpb24odCxzKSxjPXRoaXMuX2dldEl0ZW1JbmRleChsKSxmPUJvb2xlYW4odGhpcy5faW50ZXJ2YWwpO2lmKHQ9PT1XPyhuPXEsaT16LHI9VSk6KG49RyxpPVgscj1CKSxsJiZrKGwpLmhhc0NsYXNzKFEpKXRoaXMuX2lzU2xpZGluZz0hMTtlbHNlIGlmKCF0aGlzLl90cmlnZ2VyU2xpZGVFdmVudChsLHIpLmlzRGVmYXVsdFByZXZlbnRlZCgpJiZzJiZsKXt0aGlzLl9pc1NsaWRpbmc9ITAsZiYmdGhpcy5wYXVzZSgpLHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobCk7dmFyIGg9ay5FdmVudChLLlNMSUQse3JlbGF0ZWRUYXJnZXQ6bCxkaXJlY3Rpb246cixmcm9tOmEsdG86Y30pO2lmKGsodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoWSkpe2sobCkuYWRkQ2xhc3MoaSksZ3QucmVmbG93KGwpLGsocykuYWRkQ2xhc3MobiksayhsKS5hZGRDbGFzcyhuKTt2YXIgdT1ndC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChzKTtrKHMpLm9uZShndC5UUkFOU0lUSU9OX0VORCxmdW5jdGlvbigpe2sobCkucmVtb3ZlQ2xhc3MobitcIiBcIitpKS5hZGRDbGFzcyhRKSxrKHMpLnJlbW92ZUNsYXNzKFErXCIgXCIraStcIiBcIituKSxvLl9pc1NsaWRpbmc9ITEsc2V0VGltZW91dChmdW5jdGlvbigpe3JldHVybiBrKG8uX2VsZW1lbnQpLnRyaWdnZXIoaCl9LDApfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodSl9ZWxzZSBrKHMpLnJlbW92ZUNsYXNzKFEpLGsobCkuYWRkQ2xhc3MoUSksdGhpcy5faXNTbGlkaW5nPSExLGsodGhpcy5fZWxlbWVudCkudHJpZ2dlcihoKTtmJiZ0aGlzLmN5Y2xlKCl9fSxvLl9qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24oaSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PWsodGhpcykuZGF0YShQKSxlPWMoe30sUixrKHRoaXMpLmRhdGEoKSk7XCJvYmplY3RcIj09dHlwZW9mIGkmJihlPWMoe30sZSxpKSk7dmFyIG49XCJzdHJpbmdcIj09dHlwZW9mIGk/aTplLnNsaWRlO2lmKHR8fCh0PW5ldyBvKHRoaXMsZSksayh0aGlzKS5kYXRhKFAsdCkpLFwibnVtYmVyXCI9PXR5cGVvZiBpKXQudG8oaSk7ZWxzZSBpZihcInN0cmluZ1wiPT10eXBlb2Ygbil7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHRbbl0pdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJytuKydcIicpO3Rbbl0oKX1lbHNlIGUuaW50ZXJ2YWwmJih0LnBhdXNlKCksdC5jeWNsZSgpKX0pfSxvLl9kYXRhQXBpQ2xpY2tIYW5kbGVyPWZ1bmN0aW9uKHQpe3ZhciBlPWd0LmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7aWYoZSl7dmFyIG49ayhlKVswXTtpZihuJiZrKG4pLmhhc0NsYXNzKFYpKXt2YXIgaT1jKHt9LGsobikuZGF0YSgpLGsodGhpcykuZGF0YSgpKSxyPXRoaXMuZ2V0QXR0cmlidXRlKFwiZGF0YS1zbGlkZS10b1wiKTtyJiYoaS5pbnRlcnZhbD0hMSksby5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoayhuKSxpKSxyJiZrKG4pLmRhdGEoUCkudG8ociksdC5wcmV2ZW50RGVmYXVsdCgpfX19LHMobyxudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNC4xLjFcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFJ9fV0pLG99KCksayhkb2N1bWVudCkub24oSy5DTElDS19EQVRBX0FQSSxKLkRBVEFfU0xJREUsWi5fZGF0YUFwaUNsaWNrSGFuZGxlciksayh3aW5kb3cpLm9uKEsuTE9BRF9EQVRBX0FQSSxmdW5jdGlvbigpe2soSi5EQVRBX1JJREUpLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1rKHRoaXMpO1ouX2pRdWVyeUludGVyZmFjZS5jYWxsKHQsdC5kYXRhKCkpfSl9KSxrLmZuW0xdPVouX2pRdWVyeUludGVyZmFjZSxrLmZuW0xdLkNvbnN0cnVjdG9yPVosay5mbltMXS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGsuZm5bTF09TSxaLl9qUXVlcnlJbnRlcmZhY2V9LFopLEV0PSh0dD1cImNvbGxhcHNlXCIsbnQ9XCIuXCIrKGV0PVwiYnMuY29sbGFwc2VcIiksaXQ9KCQ9ZSkuZm5bdHRdLHJ0PXt0b2dnbGU6ITAscGFyZW50OlwiXCJ9LG90PXt0b2dnbGU6XCJib29sZWFuXCIscGFyZW50OlwiKHN0cmluZ3xlbGVtZW50KVwifSxzdD17U0hPVzpcInNob3dcIitudCxTSE9XTjpcInNob3duXCIrbnQsSElERTpcImhpZGVcIitudCxISURERU46XCJoaWRkZW5cIitudCxDTElDS19EQVRBX0FQSTpcImNsaWNrXCIrbnQrXCIuZGF0YS1hcGlcIn0sYXQ9XCJzaG93XCIsbHQ9XCJjb2xsYXBzZVwiLGN0PVwiY29sbGFwc2luZ1wiLGZ0PVwiY29sbGFwc2VkXCIsaHQ9XCJ3aWR0aFwiLHV0PVwiaGVpZ2h0XCIsZHQ9e0FDVElWRVM6XCIuc2hvdywgLmNvbGxhcHNpbmdcIixEQVRBX1RPR0dMRTonW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nfSxwdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGEodCxlKXt0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITEsdGhpcy5fZWxlbWVudD10LHRoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy5fdHJpZ2dlckFycmF5PSQubWFrZUFycmF5KCQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2hyZWY9XCIjJyt0LmlkKydcIl0sW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS10YXJnZXQ9XCIjJyt0LmlkKydcIl0nKSk7Zm9yKHZhciBuPSQoZHQuREFUQV9UT0dHTEUpLGk9MDtpPG4ubGVuZ3RoO2krKyl7dmFyIHI9bltpXSxvPWd0LmdldFNlbGVjdG9yRnJvbUVsZW1lbnQocik7bnVsbCE9PW8mJjA8JChvKS5maWx0ZXIodCkubGVuZ3RoJiYodGhpcy5fc2VsZWN0b3I9byx0aGlzLl90cmlnZ2VyQXJyYXkucHVzaChyKSl9dGhpcy5fcGFyZW50PXRoaXMuX2NvbmZpZy5wYXJlbnQ/dGhpcy5fZ2V0UGFyZW50KCk6bnVsbCx0aGlzLl9jb25maWcucGFyZW50fHx0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy5fZWxlbWVudCx0aGlzLl90cmlnZ2VyQXJyYXkpLHRoaXMuX2NvbmZpZy50b2dnbGUmJnRoaXMudG9nZ2xlKCl9dmFyIHQ9YS5wcm90b3R5cGU7cmV0dXJuIHQudG9nZ2xlPWZ1bmN0aW9uKCl7JCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhhdCk/dGhpcy5oaWRlKCk6dGhpcy5zaG93KCl9LHQuc2hvdz1mdW5jdGlvbigpe3ZhciB0LGUsbj10aGlzO2lmKCF0aGlzLl9pc1RyYW5zaXRpb25pbmcmJiEkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKGF0KSYmKHRoaXMuX3BhcmVudCYmMD09PSh0PSQubWFrZUFycmF5KCQodGhpcy5fcGFyZW50KS5maW5kKGR0LkFDVElWRVMpLmZpbHRlcignW2RhdGEtcGFyZW50PVwiJyt0aGlzLl9jb25maWcucGFyZW50KydcIl0nKSkpLmxlbmd0aCYmKHQ9bnVsbCksISh0JiYoZT0kKHQpLm5vdCh0aGlzLl9zZWxlY3RvcikuZGF0YShldCkpJiZlLl9pc1RyYW5zaXRpb25pbmcpKSl7dmFyIGk9JC5FdmVudChzdC5TSE9XKTtpZigkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoaSksIWkuaXNEZWZhdWx0UHJldmVudGVkKCkpe3QmJihhLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkKHQpLm5vdCh0aGlzLl9zZWxlY3RvciksXCJoaWRlXCIpLGV8fCQodCkuZGF0YShldCxudWxsKSk7dmFyIHI9dGhpcy5fZ2V0RGltZW5zaW9uKCk7JCh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhsdCkuYWRkQ2xhc3MoY3QpLCh0aGlzLl9lbGVtZW50LnN0eWxlW3JdPTApPHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGgmJiQodGhpcy5fdHJpZ2dlckFycmF5KS5yZW1vdmVDbGFzcyhmdCkuYXR0cihcImFyaWEtZXhwYW5kZWRcIiwhMCksdGhpcy5zZXRUcmFuc2l0aW9uaW5nKCEwKTt2YXIgbz1cInNjcm9sbFwiKyhyWzBdLnRvVXBwZXJDYXNlKCkrci5zbGljZSgxKSkscz1ndC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTskKHRoaXMuX2VsZW1lbnQpLm9uZShndC5UUkFOU0lUSU9OX0VORCxmdW5jdGlvbigpeyQobi5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoY3QpLmFkZENsYXNzKGx0KS5hZGRDbGFzcyhhdCksbi5fZWxlbWVudC5zdHlsZVtyXT1cIlwiLG4uc2V0VHJhbnNpdGlvbmluZyghMSksJChuLl9lbGVtZW50KS50cmlnZ2VyKHN0LlNIT1dOKX0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHMpLHRoaXMuX2VsZW1lbnQuc3R5bGVbcl09dGhpcy5fZWxlbWVudFtvXStcInB4XCJ9fX0sdC5oaWRlPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztpZighdGhpcy5faXNUcmFuc2l0aW9uaW5nJiYkKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKGF0KSl7dmFyIGU9JC5FdmVudChzdC5ISURFKTtpZigkKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoZSksIWUuaXNEZWZhdWx0UHJldmVudGVkKCkpe3ZhciBuPXRoaXMuX2dldERpbWVuc2lvbigpO2lmKHRoaXMuX2VsZW1lbnQuc3R5bGVbbl09dGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtuXStcInB4XCIsZ3QucmVmbG93KHRoaXMuX2VsZW1lbnQpLCQodGhpcy5fZWxlbWVudCkuYWRkQ2xhc3MoY3QpLnJlbW92ZUNsYXNzKGx0KS5yZW1vdmVDbGFzcyhhdCksMDx0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoKWZvcih2YXIgaT0wO2k8dGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aDtpKyspe3ZhciByPXRoaXMuX3RyaWdnZXJBcnJheVtpXSxvPWd0LmdldFNlbGVjdG9yRnJvbUVsZW1lbnQocik7aWYobnVsbCE9PW8pJChvKS5oYXNDbGFzcyhhdCl8fCQocikuYWRkQ2xhc3MoZnQpLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsITEpfXRoaXMuc2V0VHJhbnNpdGlvbmluZyghMCk7dGhpcy5fZWxlbWVudC5zdHlsZVtuXT1cIlwiO3ZhciBzPWd0LmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpOyQodGhpcy5fZWxlbWVudCkub25lKGd0LlRSQU5TSVRJT05fRU5ELGZ1bmN0aW9uKCl7dC5zZXRUcmFuc2l0aW9uaW5nKCExKSwkKHQuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKGN0KS5hZGRDbGFzcyhsdCkudHJpZ2dlcihzdC5ISURERU4pfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQocyl9fX0sdC5zZXRUcmFuc2l0aW9uaW5nPWZ1bmN0aW9uKHQpe3RoaXMuX2lzVHJhbnNpdGlvbmluZz10fSx0LmRpc3Bvc2U9ZnVuY3Rpb24oKXskLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCxldCksdGhpcy5fY29uZmlnPW51bGwsdGhpcy5fcGFyZW50PW51bGwsdGhpcy5fZWxlbWVudD1udWxsLHRoaXMuX3RyaWdnZXJBcnJheT1udWxsLHRoaXMuX2lzVHJhbnNpdGlvbmluZz1udWxsfSx0Ll9nZXRDb25maWc9ZnVuY3Rpb24odCl7cmV0dXJuKHQ9Yyh7fSxydCx0KSkudG9nZ2xlPUJvb2xlYW4odC50b2dnbGUpLGd0LnR5cGVDaGVja0NvbmZpZyh0dCx0LG90KSx0fSx0Ll9nZXREaW1lbnNpb249ZnVuY3Rpb24oKXtyZXR1cm4gJCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhodCk/aHQ6dXR9LHQuX2dldFBhcmVudD1mdW5jdGlvbigpe3ZhciBuPXRoaXMsdD1udWxsO2d0LmlzRWxlbWVudCh0aGlzLl9jb25maWcucGFyZW50KT8odD10aGlzLl9jb25maWcucGFyZW50LFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0aGlzLl9jb25maWcucGFyZW50LmpxdWVyeSYmKHQ9dGhpcy5fY29uZmlnLnBhcmVudFswXSkpOnQ9JCh0aGlzLl9jb25maWcucGFyZW50KVswXTt2YXIgZT0nW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1wYXJlbnQ9XCInK3RoaXMuX2NvbmZpZy5wYXJlbnQrJ1wiXSc7cmV0dXJuICQodCkuZmluZChlKS5lYWNoKGZ1bmN0aW9uKHQsZSl7bi5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGEuX2dldFRhcmdldEZyb21FbGVtZW50KGUpLFtlXSl9KSx0fSx0Ll9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3M9ZnVuY3Rpb24odCxlKXtpZih0KXt2YXIgbj0kKHQpLmhhc0NsYXNzKGF0KTswPGUubGVuZ3RoJiYkKGUpLnRvZ2dsZUNsYXNzKGZ0LCFuKS5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLG4pfX0sYS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQ9ZnVuY3Rpb24odCl7dmFyIGU9Z3QuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0KTtyZXR1cm4gZT8kKGUpWzBdOm51bGx9LGEuX2pRdWVyeUludGVyZmFjZT1mdW5jdGlvbihpKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9JCh0aGlzKSxlPXQuZGF0YShldCksbj1jKHt9LHJ0LHQuZGF0YSgpLFwib2JqZWN0XCI9PXR5cGVvZiBpJiZpP2k6e30pO2lmKCFlJiZuLnRvZ2dsZSYmL3Nob3d8aGlkZS8udGVzdChpKSYmKG4udG9nZ2xlPSExKSxlfHwoZT1uZXcgYSh0aGlzLG4pLHQuZGF0YShldCxlKSksXCJzdHJpbmdcIj09dHlwZW9mIGkpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlW2ldKXRocm93IG5ldyBUeXBlRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicraSsnXCInKTtlW2ldKCl9fSl9LHMoYSxudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNC4xLjFcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJ0fX1dKSxhfSgpLCQoZG9jdW1lbnQpLm9uKHN0LkNMSUNLX0RBVEFfQVBJLGR0LkRBVEFfVE9HR0xFLGZ1bmN0aW9uKHQpe1wiQVwiPT09dC5jdXJyZW50VGFyZ2V0LnRhZ05hbWUmJnQucHJldmVudERlZmF1bHQoKTt2YXIgbj0kKHRoaXMpLGU9Z3QuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTskKGUpLmVhY2goZnVuY3Rpb24oKXt2YXIgdD0kKHRoaXMpLGU9dC5kYXRhKGV0KT9cInRvZ2dsZVwiOm4uZGF0YSgpO3B0Ll9qUXVlcnlJbnRlcmZhY2UuY2FsbCh0LGUpfSl9KSwkLmZuW3R0XT1wdC5falF1ZXJ5SW50ZXJmYWNlLCQuZm5bdHRdLkNvbnN0cnVjdG9yPXB0LCQuZm5bdHRdLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gJC5mblt0dF09aXQscHQuX2pRdWVyeUludGVyZmFjZX0scHQpLHl0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudCxidD1bXCJFZGdlXCIsXCJUcmlkZW50XCIsXCJGaXJlZm94XCJdLFR0PTAsQ3Q9MDtDdDxidC5sZW5ndGg7Q3QrPTEpaWYoeXQmJjA8PW5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihidFtDdF0pKXtUdD0xO2JyZWFrfXZhciB3dD15dCYmd2luZG93LlByb21pc2U/ZnVuY3Rpb24odCl7dmFyIGU9ITE7cmV0dXJuIGZ1bmN0aW9uKCl7ZXx8KGU9ITAsd2luZG93LlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKXtlPSExLHQoKX0pKX19OmZ1bmN0aW9uKHQpe3ZhciBlPSExO3JldHVybiBmdW5jdGlvbigpe2V8fChlPSEwLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlPSExLHQoKX0sVHQpKX19O2Z1bmN0aW9uIEl0KHQpe3JldHVybiB0JiZcIltvYmplY3QgRnVuY3Rpb25dXCI9PT17fS50b1N0cmluZy5jYWxsKHQpfWZ1bmN0aW9uIER0KHQsZSl7aWYoMSE9PXQubm9kZVR5cGUpcmV0dXJuW107dmFyIG49Z2V0Q29tcHV0ZWRTdHlsZSh0LG51bGwpO3JldHVybiBlP25bZV06bn1mdW5jdGlvbiBBdCh0KXtyZXR1cm5cIkhUTUxcIj09PXQubm9kZU5hbWU/dDp0LnBhcmVudE5vZGV8fHQuaG9zdH1mdW5jdGlvbiBTdCh0KXtpZighdClyZXR1cm4gZG9jdW1lbnQuYm9keTtzd2l0Y2godC5ub2RlTmFtZSl7Y2FzZVwiSFRNTFwiOmNhc2VcIkJPRFlcIjpyZXR1cm4gdC5vd25lckRvY3VtZW50LmJvZHk7Y2FzZVwiI2RvY3VtZW50XCI6cmV0dXJuIHQuYm9keX12YXIgZT1EdCh0KSxuPWUub3ZlcmZsb3csaT1lLm92ZXJmbG93WCxyPWUub3ZlcmZsb3dZO3JldHVybi8oYXV0b3xzY3JvbGx8b3ZlcmxheSkvLnRlc3QobityK2kpP3Q6U3QoQXQodCkpfXZhciBPdD15dCYmISghd2luZG93Lk1TSW5wdXRNZXRob2RDb250ZXh0fHwhZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSxOdD15dCYmL01TSUUgMTAvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7ZnVuY3Rpb24ga3QodCl7cmV0dXJuIDExPT09dD9PdDoxMD09PXQ/TnQ6T3R8fE50fWZ1bmN0aW9uIEx0KHQpe2lmKCF0KXJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7Zm9yKHZhciBlPWt0KDEwKT9kb2N1bWVudC5ib2R5Om51bGwsbj10Lm9mZnNldFBhcmVudDtuPT09ZSYmdC5uZXh0RWxlbWVudFNpYmxpbmc7KW49KHQ9dC5uZXh0RWxlbWVudFNpYmxpbmcpLm9mZnNldFBhcmVudDt2YXIgaT1uJiZuLm5vZGVOYW1lO3JldHVybiBpJiZcIkJPRFlcIiE9PWkmJlwiSFRNTFwiIT09aT8tMSE9PVtcIlREXCIsXCJUQUJMRVwiXS5pbmRleE9mKG4ubm9kZU5hbWUpJiZcInN0YXRpY1wiPT09RHQobixcInBvc2l0aW9uXCIpP0x0KG4pOm46dD90Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OmRvY3VtZW50LmRvY3VtZW50RWxlbWVudH1mdW5jdGlvbiBQdCh0KXtyZXR1cm4gbnVsbCE9PXQucGFyZW50Tm9kZT9QdCh0LnBhcmVudE5vZGUpOnR9ZnVuY3Rpb24geHQodCxlKXtpZighKHQmJnQubm9kZVR5cGUmJmUmJmUubm9kZVR5cGUpKXJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7dmFyIG49dC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlKSZOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0ZPTExPV0lORyxpPW4/dDplLHI9bj9lOnQsbz1kb2N1bWVudC5jcmVhdGVSYW5nZSgpO28uc2V0U3RhcnQoaSwwKSxvLnNldEVuZChyLDApO3ZhciBzLGEsbD1vLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO2lmKHQhPT1sJiZlIT09bHx8aS5jb250YWlucyhyKSlyZXR1cm5cIkJPRFlcIj09PShhPShzPWwpLm5vZGVOYW1lKXx8XCJIVE1MXCIhPT1hJiZMdChzLmZpcnN0RWxlbWVudENoaWxkKSE9PXM/THQobCk6bDt2YXIgYz1QdCh0KTtyZXR1cm4gYy5ob3N0P3h0KGMuaG9zdCxlKTp4dCh0LFB0KGUpLmhvc3QpfWZ1bmN0aW9uIGp0KHQpe3ZhciBlPVwidG9wXCI9PT0oMTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOlwidG9wXCIpP1wic2Nyb2xsVG9wXCI6XCJzY3JvbGxMZWZ0XCIsbj10Lm5vZGVOYW1lO2lmKFwiQk9EWVwiPT09bnx8XCJIVE1MXCI9PT1uKXt2YXIgaT10Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O3JldHVybih0Lm93bmVyRG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudHx8aSlbZV19cmV0dXJuIHRbZV19ZnVuY3Rpb24gTXQodCxlKXt2YXIgbj1cInhcIj09PWU/XCJMZWZ0XCI6XCJUb3BcIixpPVwiTGVmdFwiPT09bj9cIlJpZ2h0XCI6XCJCb3R0b21cIjtyZXR1cm4gcGFyc2VGbG9hdCh0W1wiYm9yZGVyXCIrbitcIldpZHRoXCJdLDEwKStwYXJzZUZsb2F0KHRbXCJib3JkZXJcIitpK1wiV2lkdGhcIl0sMTApfWZ1bmN0aW9uIFJ0KHQsZSxuLGkpe3JldHVybiBNYXRoLm1heChlW1wib2Zmc2V0XCIrdF0sZVtcInNjcm9sbFwiK3RdLG5bXCJjbGllbnRcIit0XSxuW1wib2Zmc2V0XCIrdF0sbltcInNjcm9sbFwiK3RdLGt0KDEwKT9uW1wib2Zmc2V0XCIrdF0raVtcIm1hcmdpblwiKyhcIkhlaWdodFwiPT09dD9cIlRvcFwiOlwiTGVmdFwiKV0raVtcIm1hcmdpblwiKyhcIkhlaWdodFwiPT09dD9cIkJvdHRvbVwiOlwiUmlnaHRcIildOjApfWZ1bmN0aW9uIEh0KCl7dmFyIHQ9ZG9jdW1lbnQuYm9keSxlPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxuPWt0KDEwKSYmZ2V0Q29tcHV0ZWRTdHlsZShlKTtyZXR1cm57aGVpZ2h0OlJ0KFwiSGVpZ2h0XCIsdCxlLG4pLHdpZHRoOlJ0KFwiV2lkdGhcIix0LGUsbil9fXZhciBXdD1mdW5jdGlvbih0LGUpe2lmKCEodCBpbnN0YW5jZW9mIGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9LEZ0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gaSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgaT1lW25dO2kuZW51bWVyYWJsZT1pLmVudW1lcmFibGV8fCExLGkuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIGkmJihpLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxpLmtleSxpKX19cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gZSYmaSh0LnByb3RvdHlwZSxlKSxuJiZpKHQsbiksdH19KCksVXQ9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBlIGluIHQ/T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7dmFsdWU6bixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOnRbZV09bix0fSxCdD1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0KXtmb3IodmFyIGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXt2YXIgbj1hcmd1bWVudHNbZV07Zm9yKHZhciBpIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4saSkmJih0W2ldPW5baV0pfXJldHVybiB0fTtmdW5jdGlvbiBLdCh0KXtyZXR1cm4gQnQoe30sdCx7cmlnaHQ6dC5sZWZ0K3Qud2lkdGgsYm90dG9tOnQudG9wK3QuaGVpZ2h0fSl9ZnVuY3Rpb24gVnQodCl7dmFyIGU9e307dHJ5e2lmKGt0KDEwKSl7ZT10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO3ZhciBuPWp0KHQsXCJ0b3BcIiksaT1qdCh0LFwibGVmdFwiKTtlLnRvcCs9bixlLmxlZnQrPWksZS5ib3R0b20rPW4sZS5yaWdodCs9aX1lbHNlIGU9dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKX1jYXRjaCh0KXt9dmFyIHI9e2xlZnQ6ZS5sZWZ0LHRvcDplLnRvcCx3aWR0aDplLnJpZ2h0LWUubGVmdCxoZWlnaHQ6ZS5ib3R0b20tZS50b3B9LG89XCJIVE1MXCI9PT10Lm5vZGVOYW1lP0h0KCk6e30scz1vLndpZHRofHx0LmNsaWVudFdpZHRofHxyLnJpZ2h0LXIubGVmdCxhPW8uaGVpZ2h0fHx0LmNsaWVudEhlaWdodHx8ci5ib3R0b20tci50b3AsbD10Lm9mZnNldFdpZHRoLXMsYz10Lm9mZnNldEhlaWdodC1hO2lmKGx8fGMpe3ZhciBmPUR0KHQpO2wtPU10KGYsXCJ4XCIpLGMtPU10KGYsXCJ5XCIpLHIud2lkdGgtPWwsci5oZWlnaHQtPWN9cmV0dXJuIEt0KHIpfWZ1bmN0aW9uIFF0KHQsZSl7dmFyIG49Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0mJmFyZ3VtZW50c1syXSxpPWt0KDEwKSxyPVwiSFRNTFwiPT09ZS5ub2RlTmFtZSxvPVZ0KHQpLHM9VnQoZSksYT1TdCh0KSxsPUR0KGUpLGM9cGFyc2VGbG9hdChsLmJvcmRlclRvcFdpZHRoLDEwKSxmPXBhcnNlRmxvYXQobC5ib3JkZXJMZWZ0V2lkdGgsMTApO24mJlwiSFRNTFwiPT09ZS5ub2RlTmFtZSYmKHMudG9wPU1hdGgubWF4KHMudG9wLDApLHMubGVmdD1NYXRoLm1heChzLmxlZnQsMCkpO3ZhciBoPUt0KHt0b3A6by50b3Atcy50b3AtYyxsZWZ0Om8ubGVmdC1zLmxlZnQtZix3aWR0aDpvLndpZHRoLGhlaWdodDpvLmhlaWdodH0pO2lmKGgubWFyZ2luVG9wPTAsaC5tYXJnaW5MZWZ0PTAsIWkmJnIpe3ZhciB1PXBhcnNlRmxvYXQobC5tYXJnaW5Ub3AsMTApLGQ9cGFyc2VGbG9hdChsLm1hcmdpbkxlZnQsMTApO2gudG9wLT1jLXUsaC5ib3R0b20tPWMtdSxoLmxlZnQtPWYtZCxoLnJpZ2h0LT1mLWQsaC5tYXJnaW5Ub3A9dSxoLm1hcmdpbkxlZnQ9ZH1yZXR1cm4oaSYmIW4/ZS5jb250YWlucyhhKTplPT09YSYmXCJCT0RZXCIhPT1hLm5vZGVOYW1lKSYmKGg9ZnVuY3Rpb24odCxlKXt2YXIgbj0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdLGk9anQoZSxcInRvcFwiKSxyPWp0KGUsXCJsZWZ0XCIpLG89bj8tMToxO3JldHVybiB0LnRvcCs9aSpvLHQuYm90dG9tKz1pKm8sdC5sZWZ0Kz1yKm8sdC5yaWdodCs9cipvLHR9KGgsZSkpLGh9ZnVuY3Rpb24gWXQodCl7aWYoIXR8fCF0LnBhcmVudEVsZW1lbnR8fGt0KCkpcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtmb3IodmFyIGU9dC5wYXJlbnRFbGVtZW50O2UmJlwibm9uZVwiPT09RHQoZSxcInRyYW5zZm9ybVwiKTspZT1lLnBhcmVudEVsZW1lbnQ7cmV0dXJuIGV8fGRvY3VtZW50LmRvY3VtZW50RWxlbWVudH1mdW5jdGlvbiBHdCh0LGUsbixpKXt2YXIgcj00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XSYmYXJndW1lbnRzWzRdLG89e3RvcDowLGxlZnQ6MH0scz1yP1l0KHQpOnh0KHQsZSk7aWYoXCJ2aWV3cG9ydFwiPT09aSlvPWZ1bmN0aW9uKHQpe3ZhciBlPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbj10Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGk9UXQodCxuKSxyPU1hdGgubWF4KG4uY2xpZW50V2lkdGgsd2luZG93LmlubmVyV2lkdGh8fDApLG89TWF0aC5tYXgobi5jbGllbnRIZWlnaHQsd2luZG93LmlubmVySGVpZ2h0fHwwKSxzPWU/MDpqdChuKSxhPWU/MDpqdChuLFwibGVmdFwiKTtyZXR1cm4gS3Qoe3RvcDpzLWkudG9wK2kubWFyZ2luVG9wLGxlZnQ6YS1pLmxlZnQraS5tYXJnaW5MZWZ0LHdpZHRoOnIsaGVpZ2h0Om99KX0ocyxyKTtlbHNle3ZhciBhPXZvaWQgMDtcInNjcm9sbFBhcmVudFwiPT09aT9cIkJPRFlcIj09PShhPVN0KEF0KGUpKSkubm9kZU5hbWUmJihhPXQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpOmE9XCJ3aW5kb3dcIj09PWk/dC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDppO3ZhciBsPVF0KGEscyxyKTtpZihcIkhUTUxcIiE9PWEubm9kZU5hbWV8fGZ1bmN0aW9uIHQoZSl7dmFyIG49ZS5ub2RlTmFtZTtyZXR1cm5cIkJPRFlcIiE9PW4mJlwiSFRNTFwiIT09biYmKFwiZml4ZWRcIj09PUR0KGUsXCJwb3NpdGlvblwiKXx8dChBdChlKSkpfShzKSlvPWw7ZWxzZXt2YXIgYz1IdCgpLGY9Yy5oZWlnaHQsaD1jLndpZHRoO28udG9wKz1sLnRvcC1sLm1hcmdpblRvcCxvLmJvdHRvbT1mK2wudG9wLG8ubGVmdCs9bC5sZWZ0LWwubWFyZ2luTGVmdCxvLnJpZ2h0PWgrbC5sZWZ0fX1yZXR1cm4gby5sZWZ0Kz1uLG8udG9wKz1uLG8ucmlnaHQtPW4sby5ib3R0b20tPW4sb31mdW5jdGlvbiBxdCh0LGUsaSxuLHIpe3ZhciBvPTU8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzVdP2FyZ3VtZW50c1s1XTowO2lmKC0xPT09dC5pbmRleE9mKFwiYXV0b1wiKSlyZXR1cm4gdDt2YXIgcz1HdChpLG4sbyxyKSxhPXt0b3A6e3dpZHRoOnMud2lkdGgsaGVpZ2h0OmUudG9wLXMudG9wfSxyaWdodDp7d2lkdGg6cy5yaWdodC1lLnJpZ2h0LGhlaWdodDpzLmhlaWdodH0sYm90dG9tOnt3aWR0aDpzLndpZHRoLGhlaWdodDpzLmJvdHRvbS1lLmJvdHRvbX0sbGVmdDp7d2lkdGg6ZS5sZWZ0LXMubGVmdCxoZWlnaHQ6cy5oZWlnaHR9fSxsPU9iamVjdC5rZXlzKGEpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gQnQoe2tleTp0fSxhW3RdLHthcmVhOihlPWFbdF0sZS53aWR0aCplLmhlaWdodCl9KTt2YXIgZX0pLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5hcmVhLXQuYXJlYX0pLGM9bC5maWx0ZXIoZnVuY3Rpb24odCl7dmFyIGU9dC53aWR0aCxuPXQuaGVpZ2h0O3JldHVybiBlPj1pLmNsaWVudFdpZHRoJiZuPj1pLmNsaWVudEhlaWdodH0pLGY9MDxjLmxlbmd0aD9jWzBdLmtleTpsWzBdLmtleSxoPXQuc3BsaXQoXCItXCIpWzFdO3JldHVybiBmKyhoP1wiLVwiK2g6XCJcIil9ZnVuY3Rpb24genQodCxlLG4pe3ZhciBpPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybiBRdChuLGk/WXQoZSk6eHQoZSxuKSxpKX1mdW5jdGlvbiBYdCh0KXt2YXIgZT1nZXRDb21wdXRlZFN0eWxlKHQpLG49cGFyc2VGbG9hdChlLm1hcmdpblRvcCkrcGFyc2VGbG9hdChlLm1hcmdpbkJvdHRvbSksaT1wYXJzZUZsb2F0KGUubWFyZ2luTGVmdCkrcGFyc2VGbG9hdChlLm1hcmdpblJpZ2h0KTtyZXR1cm57d2lkdGg6dC5vZmZzZXRXaWR0aCtpLGhlaWdodDp0Lm9mZnNldEhlaWdodCtufX1mdW5jdGlvbiBKdCh0KXt2YXIgZT17bGVmdDpcInJpZ2h0XCIscmlnaHQ6XCJsZWZ0XCIsYm90dG9tOlwidG9wXCIsdG9wOlwiYm90dG9tXCJ9O3JldHVybiB0LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfSl9ZnVuY3Rpb24gWnQodCxlLG4pe249bi5zcGxpdChcIi1cIilbMF07dmFyIGk9WHQodCkscj17d2lkdGg6aS53aWR0aCxoZWlnaHQ6aS5oZWlnaHR9LG89LTEhPT1bXCJyaWdodFwiLFwibGVmdFwiXS5pbmRleE9mKG4pLHM9bz9cInRvcFwiOlwibGVmdFwiLGE9bz9cImxlZnRcIjpcInRvcFwiLGw9bz9cImhlaWdodFwiOlwid2lkdGhcIixjPW8/XCJ3aWR0aFwiOlwiaGVpZ2h0XCI7cmV0dXJuIHJbc109ZVtzXStlW2xdLzItaVtsXS8yLHJbYV09bj09PWE/ZVthXS1pW2NdOmVbSnQoYSldLHJ9ZnVuY3Rpb24gJHQodCxlKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbmQ/dC5maW5kKGUpOnQuZmlsdGVyKGUpWzBdfWZ1bmN0aW9uIHRlKHQsbixlKXtyZXR1cm4odm9pZCAwPT09ZT90OnQuc2xpY2UoMCxmdW5jdGlvbih0LGUsbil7aWYoQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleClyZXR1cm4gdC5maW5kSW5kZXgoZnVuY3Rpb24odCl7cmV0dXJuIHRbZV09PT1ufSk7dmFyIGk9JHQodCxmdW5jdGlvbih0KXtyZXR1cm4gdFtlXT09PW59KTtyZXR1cm4gdC5pbmRleE9mKGkpfSh0LFwibmFtZVwiLGUpKSkuZm9yRWFjaChmdW5jdGlvbih0KXt0LmZ1bmN0aW9uJiZjb25zb2xlLndhcm4oXCJgbW9kaWZpZXIuZnVuY3Rpb25gIGlzIGRlcHJlY2F0ZWQsIHVzZSBgbW9kaWZpZXIuZm5gIVwiKTt2YXIgZT10LmZ1bmN0aW9ufHx0LmZuO3QuZW5hYmxlZCYmSXQoZSkmJihuLm9mZnNldHMucG9wcGVyPUt0KG4ub2Zmc2V0cy5wb3BwZXIpLG4ub2Zmc2V0cy5yZWZlcmVuY2U9S3Qobi5vZmZzZXRzLnJlZmVyZW5jZSksbj1lKG4sdCkpfSksbn1mdW5jdGlvbiBlZSh0LG4pe3JldHVybiB0LnNvbWUoZnVuY3Rpb24odCl7dmFyIGU9dC5uYW1lO3JldHVybiB0LmVuYWJsZWQmJmU9PT1ufSl9ZnVuY3Rpb24gbmUodCl7Zm9yKHZhciBlPVshMSxcIm1zXCIsXCJXZWJraXRcIixcIk1velwiLFwiT1wiXSxuPXQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKSxpPTA7aTxlLmxlbmd0aDtpKyspe3ZhciByPWVbaV0sbz1yP1wiXCIrcituOnQ7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50LmJvZHkuc3R5bGVbb10pcmV0dXJuIG99cmV0dXJuIG51bGx9ZnVuY3Rpb24gaWUodCl7dmFyIGU9dC5vd25lckRvY3VtZW50O3JldHVybiBlP2UuZGVmYXVsdFZpZXc6d2luZG93fWZ1bmN0aW9uIHJlKHQsZSxuLGkpe24udXBkYXRlQm91bmQ9aSxpZSh0KS5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsbi51cGRhdGVCb3VuZCx7cGFzc2l2ZTohMH0pO3ZhciByPVN0KHQpO3JldHVybiBmdW5jdGlvbiB0KGUsbixpLHIpe3ZhciBvPVwiQk9EWVwiPT09ZS5ub2RlTmFtZSxzPW8/ZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3OmU7cy5hZGRFdmVudExpc3RlbmVyKG4saSx7cGFzc2l2ZTohMH0pLG98fHQoU3Qocy5wYXJlbnROb2RlKSxuLGksciksci5wdXNoKHMpfShyLFwic2Nyb2xsXCIsbi51cGRhdGVCb3VuZCxuLnNjcm9sbFBhcmVudHMpLG4uc2Nyb2xsRWxlbWVudD1yLG4uZXZlbnRzRW5hYmxlZD0hMCxufWZ1bmN0aW9uIG9lKCl7dmFyIHQsZTt0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQmJihjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnNjaGVkdWxlVXBkYXRlKSx0aGlzLnN0YXRlPSh0PXRoaXMucmVmZXJlbmNlLGU9dGhpcy5zdGF0ZSxpZSh0KS5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsZS51cGRhdGVCb3VuZCksZS5zY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24odCl7dC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsZS51cGRhdGVCb3VuZCl9KSxlLnVwZGF0ZUJvdW5kPW51bGwsZS5zY3JvbGxQYXJlbnRzPVtdLGUuc2Nyb2xsRWxlbWVudD1udWxsLGUuZXZlbnRzRW5hYmxlZD0hMSxlKSl9ZnVuY3Rpb24gc2UodCl7cmV0dXJuXCJcIiE9PXQmJiFpc05hTihwYXJzZUZsb2F0KHQpKSYmaXNGaW5pdGUodCl9ZnVuY3Rpb24gYWUobixpKXtPYmplY3Qua2V5cyhpKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPVwiXCI7LTEhPT1bXCJ3aWR0aFwiLFwiaGVpZ2h0XCIsXCJ0b3BcIixcInJpZ2h0XCIsXCJib3R0b21cIixcImxlZnRcIl0uaW5kZXhPZih0KSYmc2UoaVt0XSkmJihlPVwicHhcIiksbi5zdHlsZVt0XT1pW3RdK2V9KX1mdW5jdGlvbiBsZSh0LGUsbil7dmFyIGk9JHQodCxmdW5jdGlvbih0KXtyZXR1cm4gdC5uYW1lPT09ZX0pLHI9ISFpJiZ0LnNvbWUoZnVuY3Rpb24odCl7cmV0dXJuIHQubmFtZT09PW4mJnQuZW5hYmxlZCYmdC5vcmRlcjxpLm9yZGVyfSk7aWYoIXIpe3ZhciBvPVwiYFwiK2UrXCJgXCIscz1cImBcIituK1wiYFwiO2NvbnNvbGUud2FybihzK1wiIG1vZGlmaWVyIGlzIHJlcXVpcmVkIGJ5IFwiK28rXCIgbW9kaWZpZXIgaW4gb3JkZXIgdG8gd29yaywgYmUgc3VyZSB0byBpbmNsdWRlIGl0IGJlZm9yZSBcIitvK1wiIVwiKX1yZXR1cm4gcn12YXIgY2U9W1wiYXV0by1zdGFydFwiLFwiYXV0b1wiLFwiYXV0by1lbmRcIixcInRvcC1zdGFydFwiLFwidG9wXCIsXCJ0b3AtZW5kXCIsXCJyaWdodC1zdGFydFwiLFwicmlnaHRcIixcInJpZ2h0LWVuZFwiLFwiYm90dG9tLWVuZFwiLFwiYm90dG9tXCIsXCJib3R0b20tc3RhcnRcIixcImxlZnQtZW5kXCIsXCJsZWZ0XCIsXCJsZWZ0LXN0YXJ0XCJdLGZlPWNlLnNsaWNlKDMpO2Z1bmN0aW9uIGhlKHQpe3ZhciBlPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0sbj1mZS5pbmRleE9mKHQpLGk9ZmUuc2xpY2UobisxKS5jb25jYXQoZmUuc2xpY2UoMCxuKSk7cmV0dXJuIGU/aS5yZXZlcnNlKCk6aX12YXIgdWU9e0ZMSVA6XCJmbGlwXCIsQ0xPQ0tXSVNFOlwiY2xvY2t3aXNlXCIsQ09VTlRFUkNMT0NLV0lTRTpcImNvdW50ZXJjbG9ja3dpc2VcIn07ZnVuY3Rpb24gZGUodCxyLG8sZSl7dmFyIHM9WzAsMF0sYT0tMSE9PVtcInJpZ2h0XCIsXCJsZWZ0XCJdLmluZGV4T2YoZSksbj10LnNwbGl0KC8oXFwrfFxcLSkvKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQudHJpbSgpfSksaT1uLmluZGV4T2YoJHQobixmdW5jdGlvbih0KXtyZXR1cm4tMSE9PXQuc2VhcmNoKC8sfFxccy8pfSkpO25baV0mJi0xPT09bltpXS5pbmRleE9mKFwiLFwiKSYmY29uc29sZS53YXJuKFwiT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLlwiKTt2YXIgbD0vXFxzKixcXHMqfFxccysvLGM9LTEhPT1pP1tuLnNsaWNlKDAsaSkuY29uY2F0KFtuW2ldLnNwbGl0KGwpWzBdXSksW25baV0uc3BsaXQobClbMV1dLmNvbmNhdChuLnNsaWNlKGkrMSkpXTpbbl07cmV0dXJuKGM9Yy5tYXAoZnVuY3Rpb24odCxlKXt2YXIgbj0oMT09PWU/IWE6YSk/XCJoZWlnaHRcIjpcIndpZHRoXCIsaT0hMTtyZXR1cm4gdC5yZWR1Y2UoZnVuY3Rpb24odCxlKXtyZXR1cm5cIlwiPT09dFt0Lmxlbmd0aC0xXSYmLTEhPT1bXCIrXCIsXCItXCJdLmluZGV4T2YoZSk/KHRbdC5sZW5ndGgtMV09ZSxpPSEwLHQpOmk/KHRbdC5sZW5ndGgtMV0rPWUsaT0hMSx0KTp0LmNvbmNhdChlKX0sW10pLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24odCxlLG4saSl7dmFyIHI9dC5tYXRjaCgvKCg/OlxcLXxcXCspP1xcZCpcXC4/XFxkKikoLiopLyksbz0rclsxXSxzPXJbMl07aWYoIW8pcmV0dXJuIHQ7aWYoMD09PXMuaW5kZXhPZihcIiVcIikpe3ZhciBhPXZvaWQgMDtzd2l0Y2gocyl7Y2FzZVwiJXBcIjphPW47YnJlYWs7Y2FzZVwiJVwiOmNhc2VcIiVyXCI6ZGVmYXVsdDphPWl9cmV0dXJuIEt0KGEpW2VdLzEwMCpvfWlmKFwidmhcIj09PXN8fFwidndcIj09PXMpcmV0dXJuKFwidmhcIj09PXM/TWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCx3aW5kb3cuaW5uZXJIZWlnaHR8fDApOk1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCx3aW5kb3cuaW5uZXJXaWR0aHx8MCkpLzEwMCpvO3JldHVybiBvfSh0LG4scixvKX0pfSkpLmZvckVhY2goZnVuY3Rpb24obixpKXtuLmZvckVhY2goZnVuY3Rpb24odCxlKXtzZSh0KSYmKHNbaV0rPXQqKFwiLVwiPT09bltlLTFdPy0xOjEpKX0pfSksc312YXIgcGU9e3BsYWNlbWVudDpcImJvdHRvbVwiLHBvc2l0aW9uRml4ZWQ6ITEsZXZlbnRzRW5hYmxlZDohMCxyZW1vdmVPbkRlc3Ryb3k6ITEsb25DcmVhdGU6ZnVuY3Rpb24oKXt9LG9uVXBkYXRlOmZ1bmN0aW9uKCl7fSxtb2RpZmllcnM6e3NoaWZ0OntvcmRlcjoxMDAsZW5hYmxlZDohMCxmbjpmdW5jdGlvbih0KXt2YXIgZT10LnBsYWNlbWVudCxuPWUuc3BsaXQoXCItXCIpWzBdLGk9ZS5zcGxpdChcIi1cIilbMV07aWYoaSl7dmFyIHI9dC5vZmZzZXRzLG89ci5yZWZlcmVuY2Uscz1yLnBvcHBlcixhPS0xIT09W1wiYm90dG9tXCIsXCJ0b3BcIl0uaW5kZXhPZihuKSxsPWE/XCJsZWZ0XCI6XCJ0b3BcIixjPWE/XCJ3aWR0aFwiOlwiaGVpZ2h0XCIsZj17c3RhcnQ6VXQoe30sbCxvW2xdKSxlbmQ6VXQoe30sbCxvW2xdK29bY10tc1tjXSl9O3Qub2Zmc2V0cy5wb3BwZXI9QnQoe30scyxmW2ldKX1yZXR1cm4gdH19LG9mZnNldDp7b3JkZXI6MjAwLGVuYWJsZWQ6ITAsZm46ZnVuY3Rpb24odCxlKXt2YXIgbj1lLm9mZnNldCxpPXQucGxhY2VtZW50LHI9dC5vZmZzZXRzLG89ci5wb3BwZXIscz1yLnJlZmVyZW5jZSxhPWkuc3BsaXQoXCItXCIpWzBdLGw9dm9pZCAwO3JldHVybiBsPXNlKCtuKT9bK24sMF06ZGUobixvLHMsYSksXCJsZWZ0XCI9PT1hPyhvLnRvcCs9bFswXSxvLmxlZnQtPWxbMV0pOlwicmlnaHRcIj09PWE/KG8udG9wKz1sWzBdLG8ubGVmdCs9bFsxXSk6XCJ0b3BcIj09PWE/KG8ubGVmdCs9bFswXSxvLnRvcC09bFsxXSk6XCJib3R0b21cIj09PWEmJihvLmxlZnQrPWxbMF0sby50b3ArPWxbMV0pLHQucG9wcGVyPW8sdH0sb2Zmc2V0OjB9LHByZXZlbnRPdmVyZmxvdzp7b3JkZXI6MzAwLGVuYWJsZWQ6ITAsZm46ZnVuY3Rpb24odCxpKXt2YXIgZT1pLmJvdW5kYXJpZXNFbGVtZW50fHxMdCh0Lmluc3RhbmNlLnBvcHBlcik7dC5pbnN0YW5jZS5yZWZlcmVuY2U9PT1lJiYoZT1MdChlKSk7dmFyIG49bmUoXCJ0cmFuc2Zvcm1cIikscj10Lmluc3RhbmNlLnBvcHBlci5zdHlsZSxvPXIudG9wLHM9ci5sZWZ0LGE9cltuXTtyLnRvcD1cIlwiLHIubGVmdD1cIlwiLHJbbl09XCJcIjt2YXIgbD1HdCh0Lmluc3RhbmNlLnBvcHBlcix0Lmluc3RhbmNlLnJlZmVyZW5jZSxpLnBhZGRpbmcsZSx0LnBvc2l0aW9uRml4ZWQpO3IudG9wPW8sci5sZWZ0PXMscltuXT1hLGkuYm91bmRhcmllcz1sO3ZhciBjPWkucHJpb3JpdHksZj10Lm9mZnNldHMucG9wcGVyLGg9e3ByaW1hcnk6ZnVuY3Rpb24odCl7dmFyIGU9Zlt0XTtyZXR1cm4gZlt0XTxsW3RdJiYhaS5lc2NhcGVXaXRoUmVmZXJlbmNlJiYoZT1NYXRoLm1heChmW3RdLGxbdF0pKSxVdCh7fSx0LGUpfSxzZWNvbmRhcnk6ZnVuY3Rpb24odCl7dmFyIGU9XCJyaWdodFwiPT09dD9cImxlZnRcIjpcInRvcFwiLG49ZltlXTtyZXR1cm4gZlt0XT5sW3RdJiYhaS5lc2NhcGVXaXRoUmVmZXJlbmNlJiYobj1NYXRoLm1pbihmW2VdLGxbdF0tKFwicmlnaHRcIj09PXQ/Zi53aWR0aDpmLmhlaWdodCkpKSxVdCh7fSxlLG4pfX07cmV0dXJuIGMuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT0tMSE9PVtcImxlZnRcIixcInRvcFwiXS5pbmRleE9mKHQpP1wicHJpbWFyeVwiOlwic2Vjb25kYXJ5XCI7Zj1CdCh7fSxmLGhbZV0odCkpfSksdC5vZmZzZXRzLnBvcHBlcj1mLHR9LHByaW9yaXR5OltcImxlZnRcIixcInJpZ2h0XCIsXCJ0b3BcIixcImJvdHRvbVwiXSxwYWRkaW5nOjUsYm91bmRhcmllc0VsZW1lbnQ6XCJzY3JvbGxQYXJlbnRcIn0sa2VlcFRvZ2V0aGVyOntvcmRlcjo0MDAsZW5hYmxlZDohMCxmbjpmdW5jdGlvbih0KXt2YXIgZT10Lm9mZnNldHMsbj1lLnBvcHBlcixpPWUucmVmZXJlbmNlLHI9dC5wbGFjZW1lbnQuc3BsaXQoXCItXCIpWzBdLG89TWF0aC5mbG9vcixzPS0xIT09W1widG9wXCIsXCJib3R0b21cIl0uaW5kZXhPZihyKSxhPXM/XCJyaWdodFwiOlwiYm90dG9tXCIsbD1zP1wibGVmdFwiOlwidG9wXCIsYz1zP1wid2lkdGhcIjpcImhlaWdodFwiO3JldHVybiBuW2FdPG8oaVtsXSkmJih0Lm9mZnNldHMucG9wcGVyW2xdPW8oaVtsXSktbltjXSksbltsXT5vKGlbYV0pJiYodC5vZmZzZXRzLnBvcHBlcltsXT1vKGlbYV0pKSx0fX0sYXJyb3c6e29yZGVyOjUwMCxlbmFibGVkOiEwLGZuOmZ1bmN0aW9uKHQsZSl7dmFyIG47aWYoIWxlKHQuaW5zdGFuY2UubW9kaWZpZXJzLFwiYXJyb3dcIixcImtlZXBUb2dldGhlclwiKSlyZXR1cm4gdDt2YXIgaT1lLmVsZW1lbnQ7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGkpe2lmKCEoaT10Lmluc3RhbmNlLnBvcHBlci5xdWVyeVNlbGVjdG9yKGkpKSlyZXR1cm4gdH1lbHNlIGlmKCF0Lmluc3RhbmNlLnBvcHBlci5jb250YWlucyhpKSlyZXR1cm4gY29uc29sZS53YXJuKFwiV0FSTklORzogYGFycm93LmVsZW1lbnRgIG11c3QgYmUgY2hpbGQgb2YgaXRzIHBvcHBlciBlbGVtZW50IVwiKSx0O3ZhciByPXQucGxhY2VtZW50LnNwbGl0KFwiLVwiKVswXSxvPXQub2Zmc2V0cyxzPW8ucG9wcGVyLGE9by5yZWZlcmVuY2UsbD0tMSE9PVtcImxlZnRcIixcInJpZ2h0XCJdLmluZGV4T2YociksYz1sP1wiaGVpZ2h0XCI6XCJ3aWR0aFwiLGY9bD9cIlRvcFwiOlwiTGVmdFwiLGg9Zi50b0xvd2VyQ2FzZSgpLHU9bD9cImxlZnRcIjpcInRvcFwiLGQ9bD9cImJvdHRvbVwiOlwicmlnaHRcIixwPVh0KGkpW2NdO2FbZF0tcDxzW2hdJiYodC5vZmZzZXRzLnBvcHBlcltoXS09c1toXS0oYVtkXS1wKSksYVtoXStwPnNbZF0mJih0Lm9mZnNldHMucG9wcGVyW2hdKz1hW2hdK3Atc1tkXSksdC5vZmZzZXRzLnBvcHBlcj1LdCh0Lm9mZnNldHMucG9wcGVyKTt2YXIgZz1hW2hdK2FbY10vMi1wLzIsbT1EdCh0Lmluc3RhbmNlLnBvcHBlciksXz1wYXJzZUZsb2F0KG1bXCJtYXJnaW5cIitmXSwxMCksdj1wYXJzZUZsb2F0KG1bXCJib3JkZXJcIitmK1wiV2lkdGhcIl0sMTApLEU9Zy10Lm9mZnNldHMucG9wcGVyW2hdLV8tdjtyZXR1cm4gRT1NYXRoLm1heChNYXRoLm1pbihzW2NdLXAsRSksMCksdC5hcnJvd0VsZW1lbnQ9aSx0Lm9mZnNldHMuYXJyb3c9KFV0KG49e30saCxNYXRoLnJvdW5kKEUpKSxVdChuLHUsXCJcIiksbiksdH0sZWxlbWVudDpcIlt4LWFycm93XVwifSxmbGlwOntvcmRlcjo2MDAsZW5hYmxlZDohMCxmbjpmdW5jdGlvbihwLGcpe2lmKGVlKHAuaW5zdGFuY2UubW9kaWZpZXJzLFwiaW5uZXJcIikpcmV0dXJuIHA7aWYocC5mbGlwcGVkJiZwLnBsYWNlbWVudD09PXAub3JpZ2luYWxQbGFjZW1lbnQpcmV0dXJuIHA7dmFyIG09R3QocC5pbnN0YW5jZS5wb3BwZXIscC5pbnN0YW5jZS5yZWZlcmVuY2UsZy5wYWRkaW5nLGcuYm91bmRhcmllc0VsZW1lbnQscC5wb3NpdGlvbkZpeGVkKSxfPXAucGxhY2VtZW50LnNwbGl0KFwiLVwiKVswXSx2PUp0KF8pLEU9cC5wbGFjZW1lbnQuc3BsaXQoXCItXCIpWzFdfHxcIlwiLHk9W107c3dpdGNoKGcuYmVoYXZpb3Ipe2Nhc2UgdWUuRkxJUDp5PVtfLHZdO2JyZWFrO2Nhc2UgdWUuQ0xPQ0tXSVNFOnk9aGUoXyk7YnJlYWs7Y2FzZSB1ZS5DT1VOVEVSQ0xPQ0tXSVNFOnk9aGUoXywhMCk7YnJlYWs7ZGVmYXVsdDp5PWcuYmVoYXZpb3J9cmV0dXJuIHkuZm9yRWFjaChmdW5jdGlvbih0LGUpe2lmKF8hPT10fHx5Lmxlbmd0aD09PWUrMSlyZXR1cm4gcDtfPXAucGxhY2VtZW50LnNwbGl0KFwiLVwiKVswXSx2PUp0KF8pO3ZhciBuLGk9cC5vZmZzZXRzLnBvcHBlcixyPXAub2Zmc2V0cy5yZWZlcmVuY2Usbz1NYXRoLmZsb29yLHM9XCJsZWZ0XCI9PT1fJiZvKGkucmlnaHQpPm8oci5sZWZ0KXx8XCJyaWdodFwiPT09XyYmbyhpLmxlZnQpPG8oci5yaWdodCl8fFwidG9wXCI9PT1fJiZvKGkuYm90dG9tKT5vKHIudG9wKXx8XCJib3R0b21cIj09PV8mJm8oaS50b3ApPG8oci5ib3R0b20pLGE9byhpLmxlZnQpPG8obS5sZWZ0KSxsPW8oaS5yaWdodCk+byhtLnJpZ2h0KSxjPW8oaS50b3ApPG8obS50b3ApLGY9byhpLmJvdHRvbSk+byhtLmJvdHRvbSksaD1cImxlZnRcIj09PV8mJmF8fFwicmlnaHRcIj09PV8mJmx8fFwidG9wXCI9PT1fJiZjfHxcImJvdHRvbVwiPT09XyYmZix1PS0xIT09W1widG9wXCIsXCJib3R0b21cIl0uaW5kZXhPZihfKSxkPSEhZy5mbGlwVmFyaWF0aW9ucyYmKHUmJlwic3RhcnRcIj09PUUmJmF8fHUmJlwiZW5kXCI9PT1FJiZsfHwhdSYmXCJzdGFydFwiPT09RSYmY3x8IXUmJlwiZW5kXCI9PT1FJiZmKTsoc3x8aHx8ZCkmJihwLmZsaXBwZWQ9ITAsKHN8fGgpJiYoXz15W2UrMV0pLGQmJihFPVwiZW5kXCI9PT0obj1FKT9cInN0YXJ0XCI6XCJzdGFydFwiPT09bj9cImVuZFwiOm4pLHAucGxhY2VtZW50PV8rKEU/XCItXCIrRTpcIlwiKSxwLm9mZnNldHMucG9wcGVyPUJ0KHt9LHAub2Zmc2V0cy5wb3BwZXIsWnQocC5pbnN0YW5jZS5wb3BwZXIscC5vZmZzZXRzLnJlZmVyZW5jZSxwLnBsYWNlbWVudCkpLHA9dGUocC5pbnN0YW5jZS5tb2RpZmllcnMscCxcImZsaXBcIikpfSkscH0sYmVoYXZpb3I6XCJmbGlwXCIscGFkZGluZzo1LGJvdW5kYXJpZXNFbGVtZW50Olwidmlld3BvcnRcIn0saW5uZXI6e29yZGVyOjcwMCxlbmFibGVkOiExLGZuOmZ1bmN0aW9uKHQpe3ZhciBlPXQucGxhY2VtZW50LG49ZS5zcGxpdChcIi1cIilbMF0saT10Lm9mZnNldHMscj1pLnBvcHBlcixvPWkucmVmZXJlbmNlLHM9LTEhPT1bXCJsZWZ0XCIsXCJyaWdodFwiXS5pbmRleE9mKG4pLGE9LTE9PT1bXCJ0b3BcIixcImxlZnRcIl0uaW5kZXhPZihuKTtyZXR1cm4gcltzP1wibGVmdFwiOlwidG9wXCJdPW9bbl0tKGE/cltzP1wid2lkdGhcIjpcImhlaWdodFwiXTowKSx0LnBsYWNlbWVudD1KdChlKSx0Lm9mZnNldHMucG9wcGVyPUt0KHIpLHR9fSxoaWRlOntvcmRlcjo4MDAsZW5hYmxlZDohMCxmbjpmdW5jdGlvbih0KXtpZighbGUodC5pbnN0YW5jZS5tb2RpZmllcnMsXCJoaWRlXCIsXCJwcmV2ZW50T3ZlcmZsb3dcIikpcmV0dXJuIHQ7dmFyIGU9dC5vZmZzZXRzLnJlZmVyZW5jZSxuPSR0KHQuaW5zdGFuY2UubW9kaWZpZXJzLGZ1bmN0aW9uKHQpe3JldHVyblwicHJldmVudE92ZXJmbG93XCI9PT10Lm5hbWV9KS5ib3VuZGFyaWVzO2lmKGUuYm90dG9tPG4udG9wfHxlLmxlZnQ+bi5yaWdodHx8ZS50b3A+bi5ib3R0b218fGUucmlnaHQ8bi5sZWZ0KXtpZighMD09PXQuaGlkZSlyZXR1cm4gdDt0LmhpZGU9ITAsdC5hdHRyaWJ1dGVzW1wieC1vdXQtb2YtYm91bmRhcmllc1wiXT1cIlwifWVsc2V7aWYoITE9PT10LmhpZGUpcmV0dXJuIHQ7dC5oaWRlPSExLHQuYXR0cmlidXRlc1tcIngtb3V0LW9mLWJvdW5kYXJpZXNcIl09ITF9cmV0dXJuIHR9fSxjb21wdXRlU3R5bGU6e29yZGVyOjg1MCxlbmFibGVkOiEwLGZuOmZ1bmN0aW9uKHQsZSl7dmFyIG49ZS54LGk9ZS55LHI9dC5vZmZzZXRzLnBvcHBlcixvPSR0KHQuaW5zdGFuY2UubW9kaWZpZXJzLGZ1bmN0aW9uKHQpe3JldHVyblwiYXBwbHlTdHlsZVwiPT09dC5uYW1lfSkuZ3B1QWNjZWxlcmF0aW9uO3ZvaWQgMCE9PW8mJmNvbnNvbGUud2FybihcIldBUk5JTkc6IGBncHVBY2NlbGVyYXRpb25gIG9wdGlvbiBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllciBhbmQgd2lsbCBub3QgYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBQb3BwZXIuanMhXCIpO3ZhciBzPXZvaWQgMCE9PW8/bzplLmdwdUFjY2VsZXJhdGlvbixhPVZ0KEx0KHQuaW5zdGFuY2UucG9wcGVyKSksbD17cG9zaXRpb246ci5wb3NpdGlvbn0sYz17bGVmdDpNYXRoLmZsb29yKHIubGVmdCksdG9wOk1hdGgucm91bmQoci50b3ApLGJvdHRvbTpNYXRoLnJvdW5kKHIuYm90dG9tKSxyaWdodDpNYXRoLmZsb29yKHIucmlnaHQpfSxmPVwiYm90dG9tXCI9PT1uP1widG9wXCI6XCJib3R0b21cIixoPVwicmlnaHRcIj09PWk/XCJsZWZ0XCI6XCJyaWdodFwiLHU9bmUoXCJ0cmFuc2Zvcm1cIiksZD12b2lkIDAscD12b2lkIDA7aWYocD1cImJvdHRvbVwiPT09Zj8tYS5oZWlnaHQrYy5ib3R0b206Yy50b3AsZD1cInJpZ2h0XCI9PT1oPy1hLndpZHRoK2MucmlnaHQ6Yy5sZWZ0LHMmJnUpbFt1XT1cInRyYW5zbGF0ZTNkKFwiK2QrXCJweCwgXCIrcCtcInB4LCAwKVwiLGxbZl09MCxsW2hdPTAsbC53aWxsQ2hhbmdlPVwidHJhbnNmb3JtXCI7ZWxzZXt2YXIgZz1cImJvdHRvbVwiPT09Zj8tMToxLG09XCJyaWdodFwiPT09aD8tMToxO2xbZl09cCpnLGxbaF09ZCptLGwud2lsbENoYW5nZT1mK1wiLCBcIitofXZhciBfPXtcIngtcGxhY2VtZW50XCI6dC5wbGFjZW1lbnR9O3JldHVybiB0LmF0dHJpYnV0ZXM9QnQoe30sXyx0LmF0dHJpYnV0ZXMpLHQuc3R5bGVzPUJ0KHt9LGwsdC5zdHlsZXMpLHQuYXJyb3dTdHlsZXM9QnQoe30sdC5vZmZzZXRzLmFycm93LHQuYXJyb3dTdHlsZXMpLHR9LGdwdUFjY2VsZXJhdGlvbjohMCx4OlwiYm90dG9tXCIseTpcInJpZ2h0XCJ9LGFwcGx5U3R5bGU6e29yZGVyOjkwMCxlbmFibGVkOiEwLGZuOmZ1bmN0aW9uKHQpe3ZhciBlLG47cmV0dXJuIGFlKHQuaW5zdGFuY2UucG9wcGVyLHQuc3R5bGVzKSxlPXQuaW5zdGFuY2UucG9wcGVyLG49dC5hdHRyaWJ1dGVzLE9iamVjdC5rZXlzKG4pLmZvckVhY2goZnVuY3Rpb24odCl7ITEhPT1uW3RdP2Uuc2V0QXR0cmlidXRlKHQsblt0XSk6ZS5yZW1vdmVBdHRyaWJ1dGUodCl9KSx0LmFycm93RWxlbWVudCYmT2JqZWN0LmtleXModC5hcnJvd1N0eWxlcykubGVuZ3RoJiZhZSh0LmFycm93RWxlbWVudCx0LmFycm93U3R5bGVzKSx0fSxvbkxvYWQ6ZnVuY3Rpb24odCxlLG4saSxyKXt2YXIgbz16dChyLGUsdCxuLnBvc2l0aW9uRml4ZWQpLHM9cXQobi5wbGFjZW1lbnQsbyxlLHQsbi5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCxuLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpO3JldHVybiBlLnNldEF0dHJpYnV0ZShcIngtcGxhY2VtZW50XCIscyksYWUoZSx7cG9zaXRpb246bi5wb3NpdGlvbkZpeGVkP1wiZml4ZWRcIjpcImFic29sdXRlXCJ9KSxufSxncHVBY2NlbGVyYXRpb246dm9pZCAwfX19LGdlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbyh0LGUpe3ZhciBuPXRoaXMsaT0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e307V3QodGhpcyxvKSx0aGlzLnNjaGVkdWxlVXBkYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShuLnVwZGF0ZSl9LHRoaXMudXBkYXRlPXd0KHRoaXMudXBkYXRlLmJpbmQodGhpcykpLHRoaXMub3B0aW9ucz1CdCh7fSxvLkRlZmF1bHRzLGkpLHRoaXMuc3RhdGU9e2lzRGVzdHJveWVkOiExLGlzQ3JlYXRlZDohMSxzY3JvbGxQYXJlbnRzOltdfSx0aGlzLnJlZmVyZW5jZT10JiZ0LmpxdWVyeT90WzBdOnQsdGhpcy5wb3BwZXI9ZSYmZS5qcXVlcnk/ZVswXTplLHRoaXMub3B0aW9ucy5tb2RpZmllcnM9e30sT2JqZWN0LmtleXMoQnQoe30sby5EZWZhdWx0cy5tb2RpZmllcnMsaS5tb2RpZmllcnMpKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe24ub3B0aW9ucy5tb2RpZmllcnNbdF09QnQoe30sby5EZWZhdWx0cy5tb2RpZmllcnNbdF18fHt9LGkubW9kaWZpZXJzP2kubW9kaWZpZXJzW3RdOnt9KX0pLHRoaXMubW9kaWZpZXJzPU9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gQnQoe25hbWU6dH0sbi5vcHRpb25zLm1vZGlmaWVyc1t0XSl9KS5zb3J0KGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQub3JkZXItZS5vcmRlcn0pLHRoaXMubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24odCl7dC5lbmFibGVkJiZJdCh0Lm9uTG9hZCkmJnQub25Mb2FkKG4ucmVmZXJlbmNlLG4ucG9wcGVyLG4ub3B0aW9ucyx0LG4uc3RhdGUpfSksdGhpcy51cGRhdGUoKTt2YXIgcj10aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDtyJiZ0aGlzLmVuYWJsZUV2ZW50TGlzdGVuZXJzKCksdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkPXJ9cmV0dXJuIEZ0KG8sW3trZXk6XCJ1cGRhdGVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe2lmKCF0aGlzLnN0YXRlLmlzRGVzdHJveWVkKXt2YXIgdD17aW5zdGFuY2U6dGhpcyxzdHlsZXM6e30sYXJyb3dTdHlsZXM6e30sYXR0cmlidXRlczp7fSxmbGlwcGVkOiExLG9mZnNldHM6e319O3Qub2Zmc2V0cy5yZWZlcmVuY2U9enQodGhpcy5zdGF0ZSx0aGlzLnBvcHBlcix0aGlzLnJlZmVyZW5jZSx0aGlzLm9wdGlvbnMucG9zaXRpb25GaXhlZCksdC5wbGFjZW1lbnQ9cXQodGhpcy5vcHRpb25zLnBsYWNlbWVudCx0Lm9mZnNldHMucmVmZXJlbmNlLHRoaXMucG9wcGVyLHRoaXMucmVmZXJlbmNlLHRoaXMub3B0aW9ucy5tb2RpZmllcnMuZmxpcC5ib3VuZGFyaWVzRWxlbWVudCx0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyksdC5vcmlnaW5hbFBsYWNlbWVudD10LnBsYWNlbWVudCx0LnBvc2l0aW9uRml4ZWQ9dGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQsdC5vZmZzZXRzLnBvcHBlcj1adCh0aGlzLnBvcHBlcix0Lm9mZnNldHMucmVmZXJlbmNlLHQucGxhY2VtZW50KSx0Lm9mZnNldHMucG9wcGVyLnBvc2l0aW9uPXRoaXMub3B0aW9ucy5wb3NpdGlvbkZpeGVkP1wiZml4ZWRcIjpcImFic29sdXRlXCIsdD10ZSh0aGlzLm1vZGlmaWVycyx0KSx0aGlzLnN0YXRlLmlzQ3JlYXRlZD90aGlzLm9wdGlvbnMub25VcGRhdGUodCk6KHRoaXMuc3RhdGUuaXNDcmVhdGVkPSEwLHRoaXMub3B0aW9ucy5vbkNyZWF0ZSh0KSl9fS5jYWxsKHRoaXMpfX0se2tleTpcImRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXRlLmlzRGVzdHJveWVkPSEwLGVlKHRoaXMubW9kaWZpZXJzLFwiYXBwbHlTdHlsZVwiKSYmKHRoaXMucG9wcGVyLnJlbW92ZUF0dHJpYnV0ZShcIngtcGxhY2VtZW50XCIpLHRoaXMucG9wcGVyLnN0eWxlLnBvc2l0aW9uPVwiXCIsdGhpcy5wb3BwZXIuc3R5bGUudG9wPVwiXCIsdGhpcy5wb3BwZXIuc3R5bGUubGVmdD1cIlwiLHRoaXMucG9wcGVyLnN0eWxlLnJpZ2h0PVwiXCIsdGhpcy5wb3BwZXIuc3R5bGUuYm90dG9tPVwiXCIsdGhpcy5wb3BwZXIuc3R5bGUud2lsbENoYW5nZT1cIlwiLHRoaXMucG9wcGVyLnN0eWxlW25lKFwidHJhbnNmb3JtXCIpXT1cIlwiKSx0aGlzLmRpc2FibGVFdmVudExpc3RlbmVycygpLHRoaXMub3B0aW9ucy5yZW1vdmVPbkRlc3Ryb3kmJnRoaXMucG9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wb3BwZXIpLHRoaXN9LmNhbGwodGhpcyl9fSx7a2V5OlwiZW5hYmxlRXZlbnRMaXN0ZW5lcnNcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbigpe3RoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZHx8KHRoaXMuc3RhdGU9cmUodGhpcy5yZWZlcmVuY2UsdGhpcy5vcHRpb25zLHRoaXMuc3RhdGUsdGhpcy5zY2hlZHVsZVVwZGF0ZSkpfS5jYWxsKHRoaXMpfX0se2tleTpcImRpc2FibGVFdmVudExpc3RlbmVyc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIG9lLmNhbGwodGhpcyl9fV0pLG99KCk7Z2UuVXRpbHM9KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Omdsb2JhbCkuUG9wcGVyVXRpbHMsZ2UucGxhY2VtZW50cz1jZSxnZS5EZWZhdWx0cz1wZTt2YXIgbWUsX2UsdmUsRWUseWUsYmUsVGUsQ2Usd2UsSWUsRGUsQWUsU2UsT2UsTmUsa2UsTGUsUGUseGUsamUsTWUsUmUsSGUsV2UsRmUsVWUsQmUsS2UsVmUsUWUsWWUsR2UscWUsemUsWGUsSmUsWmUsJGUsdG4sZW4sbm4scm4sb24sc24sYW4sbG4sY24sZm4saG4sdW4sZG4scG4sZ24sbW4sX24sdm4sRW4seW4sYm4sVG4sQ24sd24sSW4sRG4sQW4sU24sT24sTm4sa24sTG4sUG4seG4sam4sTW4sUm4sSG4sV24sRm4sVW4sQm4sS24sVm4sUW4sWW4sR24scW4sem4sWG4sSm4sWm4sJG4sdGksZWksbmksaWkscmksb2ksc2ksYWksbGksY2ksZmksaGksdWksZGkscGksZ2ksbWksX2ksdmksRWkseWksYmksVGk9KF9lPVwiZHJvcGRvd25cIixFZT1cIi5cIisodmU9XCJicy5kcm9wZG93blwiKSx5ZT1cIi5kYXRhLWFwaVwiLGJlPShtZT1lKS5mbltfZV0sVGU9bmV3IFJlZ0V4cChcIjM4fDQwfDI3XCIpLENlPXtISURFOlwiaGlkZVwiK0VlLEhJRERFTjpcImhpZGRlblwiK0VlLFNIT1c6XCJzaG93XCIrRWUsU0hPV046XCJzaG93blwiK0VlLENMSUNLOlwiY2xpY2tcIitFZSxDTElDS19EQVRBX0FQSTpcImNsaWNrXCIrRWUreWUsS0VZRE9XTl9EQVRBX0FQSTpcImtleWRvd25cIitFZSt5ZSxLRVlVUF9EQVRBX0FQSTpcImtleXVwXCIrRWUreWV9LHdlPVwiZGlzYWJsZWRcIixJZT1cInNob3dcIixEZT1cImRyb3B1cFwiLEFlPVwiZHJvcHJpZ2h0XCIsU2U9XCJkcm9wbGVmdFwiLE9lPVwiZHJvcGRvd24tbWVudS1yaWdodFwiLE5lPVwicG9zaXRpb24tc3RhdGljXCIsa2U9J1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJyxMZT1cIi5kcm9wZG93biBmb3JtXCIsUGU9XCIuZHJvcGRvd24tbWVudVwiLHhlPVwiLm5hdmJhci1uYXZcIixqZT1cIi5kcm9wZG93bi1tZW51IC5kcm9wZG93bi1pdGVtOm5vdCguZGlzYWJsZWQpOm5vdCg6ZGlzYWJsZWQpXCIsTWU9XCJ0b3Atc3RhcnRcIixSZT1cInRvcC1lbmRcIixIZT1cImJvdHRvbS1zdGFydFwiLFdlPVwiYm90dG9tLWVuZFwiLEZlPVwicmlnaHQtc3RhcnRcIixVZT1cImxlZnQtc3RhcnRcIixCZT17b2Zmc2V0OjAsZmxpcDohMCxib3VuZGFyeTpcInNjcm9sbFBhcmVudFwiLHJlZmVyZW5jZTpcInRvZ2dsZVwiLGRpc3BsYXk6XCJkeW5hbWljXCJ9LEtlPXtvZmZzZXQ6XCIobnVtYmVyfHN0cmluZ3xmdW5jdGlvbilcIixmbGlwOlwiYm9vbGVhblwiLGJvdW5kYXJ5OlwiKHN0cmluZ3xlbGVtZW50KVwiLHJlZmVyZW5jZTpcIihzdHJpbmd8ZWxlbWVudClcIixkaXNwbGF5Olwic3RyaW5nXCJ9LFZlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbCh0LGUpe3RoaXMuX2VsZW1lbnQ9dCx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKGUpLHRoaXMuX21lbnU9dGhpcy5fZ2V0TWVudUVsZW1lbnQoKSx0aGlzLl9pbk5hdmJhcj10aGlzLl9kZXRlY3ROYXZiYXIoKSx0aGlzLl9hZGRFdmVudExpc3RlbmVycygpfXZhciB0PWwucHJvdG90eXBlO3JldHVybiB0LnRvZ2dsZT1mdW5jdGlvbigpe2lmKCF0aGlzLl9lbGVtZW50LmRpc2FibGVkJiYhbWUodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3Mod2UpKXt2YXIgdD1sLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KSxlPW1lKHRoaXMuX21lbnUpLmhhc0NsYXNzKEllKTtpZihsLl9jbGVhck1lbnVzKCksIWUpe3ZhciBuPXtyZWxhdGVkVGFyZ2V0OnRoaXMuX2VsZW1lbnR9LGk9bWUuRXZlbnQoQ2UuU0hPVyxuKTtpZihtZSh0KS50cmlnZ2VyKGkpLCFpLmlzRGVmYXVsdFByZXZlbnRlZCgpKXtpZighdGhpcy5faW5OYXZiYXIpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBnZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQm9vdHN0cmFwIGRyb3Bkb3duIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcpXCIpO3ZhciByPXRoaXMuX2VsZW1lbnQ7XCJwYXJlbnRcIj09PXRoaXMuX2NvbmZpZy5yZWZlcmVuY2U/cj10Omd0LmlzRWxlbWVudCh0aGlzLl9jb25maWcucmVmZXJlbmNlKSYmKHI9dGhpcy5fY29uZmlnLnJlZmVyZW5jZSxcInVuZGVmaW5lZFwiIT10eXBlb2YgdGhpcy5fY29uZmlnLnJlZmVyZW5jZS5qcXVlcnkmJihyPXRoaXMuX2NvbmZpZy5yZWZlcmVuY2VbMF0pKSxcInNjcm9sbFBhcmVudFwiIT09dGhpcy5fY29uZmlnLmJvdW5kYXJ5JiZtZSh0KS5hZGRDbGFzcyhOZSksdGhpcy5fcG9wcGVyPW5ldyBnZShyLHRoaXMuX21lbnUsdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKCkpfVwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJjA9PT1tZSh0KS5jbG9zZXN0KHhlKS5sZW5ndGgmJm1lKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub24oXCJtb3VzZW92ZXJcIixudWxsLG1lLm5vb3ApLHRoaXMuX2VsZW1lbnQuZm9jdXMoKSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwhMCksbWUodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3MoSWUpLG1lKHQpLnRvZ2dsZUNsYXNzKEllKS50cmlnZ2VyKG1lLkV2ZW50KENlLlNIT1dOLG4pKX19fX0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7bWUucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LHZlKSxtZSh0aGlzLl9lbGVtZW50KS5vZmYoRWUpLHRoaXMuX2VsZW1lbnQ9bnVsbCwodGhpcy5fbWVudT1udWxsKSE9PXRoaXMuX3BvcHBlciYmKHRoaXMuX3BvcHBlci5kZXN0cm95KCksdGhpcy5fcG9wcGVyPW51bGwpfSx0LnVwZGF0ZT1mdW5jdGlvbigpe3RoaXMuX2luTmF2YmFyPXRoaXMuX2RldGVjdE5hdmJhcigpLG51bGwhPT10aGlzLl9wb3BwZXImJnRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpfSx0Ll9hZGRFdmVudExpc3RlbmVycz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7bWUodGhpcy5fZWxlbWVudCkub24oQ2UuQ0xJQ0ssZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCksZS50b2dnbGUoKX0pfSx0Ll9nZXRDb25maWc9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9Yyh7fSx0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsbWUodGhpcy5fZWxlbWVudCkuZGF0YSgpLHQpLGd0LnR5cGVDaGVja0NvbmZpZyhfZSx0LHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpLHR9LHQuX2dldE1lbnVFbGVtZW50PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX21lbnUpe3ZhciB0PWwuX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO3RoaXMuX21lbnU9bWUodCkuZmluZChQZSlbMF19cmV0dXJuIHRoaXMuX21lbnV9LHQuX2dldFBsYWNlbWVudD1mdW5jdGlvbigpe3ZhciB0PW1lKHRoaXMuX2VsZW1lbnQpLnBhcmVudCgpLGU9SGU7cmV0dXJuIHQuaGFzQ2xhc3MoRGUpPyhlPU1lLG1lKHRoaXMuX21lbnUpLmhhc0NsYXNzKE9lKSYmKGU9UmUpKTp0Lmhhc0NsYXNzKEFlKT9lPUZlOnQuaGFzQ2xhc3MoU2UpP2U9VWU6bWUodGhpcy5fbWVudSkuaGFzQ2xhc3MoT2UpJiYoZT1XZSksZX0sdC5fZGV0ZWN0TmF2YmFyPWZ1bmN0aW9uKCl7cmV0dXJuIDA8bWUodGhpcy5fZWxlbWVudCkuY2xvc2VzdChcIi5uYXZiYXJcIikubGVuZ3RofSx0Ll9nZXRQb3BwZXJDb25maWc9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9e307XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5fY29uZmlnLm9mZnNldD90LmZuPWZ1bmN0aW9uKHQpe3JldHVybiB0Lm9mZnNldHM9Yyh7fSx0Lm9mZnNldHMsZS5fY29uZmlnLm9mZnNldCh0Lm9mZnNldHMpfHx7fSksdH06dC5vZmZzZXQ9dGhpcy5fY29uZmlnLm9mZnNldDt2YXIgbj17cGxhY2VtZW50OnRoaXMuX2dldFBsYWNlbWVudCgpLG1vZGlmaWVyczp7b2Zmc2V0OnQsZmxpcDp7ZW5hYmxlZDp0aGlzLl9jb25maWcuZmxpcH0scHJldmVudE92ZXJmbG93Ontib3VuZGFyaWVzRWxlbWVudDp0aGlzLl9jb25maWcuYm91bmRhcnl9fX07cmV0dXJuXCJzdGF0aWNcIj09PXRoaXMuX2NvbmZpZy5kaXNwbGF5JiYobi5tb2RpZmllcnMuYXBwbHlTdHlsZT17ZW5hYmxlZDohMX0pLG59LGwuX2pRdWVyeUludGVyZmFjZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9bWUodGhpcykuZGF0YSh2ZSk7aWYodHx8KHQ9bmV3IGwodGhpcyxcIm9iamVjdFwiPT10eXBlb2YgZT9lOm51bGwpLG1lKHRoaXMpLmRhdGEodmUsdCkpLFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgdFtlXSl0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK2UrJ1wiJyk7dFtlXSgpfX0pfSxsLl9jbGVhck1lbnVzPWZ1bmN0aW9uKHQpe2lmKCF0fHwzIT09dC53aGljaCYmKFwia2V5dXBcIiE9PXQudHlwZXx8OT09PXQud2hpY2gpKWZvcih2YXIgZT1tZS5tYWtlQXJyYXkobWUoa2UpKSxuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBpPWwuX2dldFBhcmVudEZyb21FbGVtZW50KGVbbl0pLHI9bWUoZVtuXSkuZGF0YSh2ZSksbz17cmVsYXRlZFRhcmdldDplW25dfTtpZihyKXt2YXIgcz1yLl9tZW51O2lmKG1lKGkpLmhhc0NsYXNzKEllKSYmISh0JiYoXCJjbGlja1wiPT09dC50eXBlJiYvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KHQudGFyZ2V0LnRhZ05hbWUpfHxcImtleXVwXCI9PT10LnR5cGUmJjk9PT10LndoaWNoKSYmbWUuY29udGFpbnMoaSx0LnRhcmdldCkpKXt2YXIgYT1tZS5FdmVudChDZS5ISURFLG8pO21lKGkpLnRyaWdnZXIoYSksYS5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8KFwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJm1lKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub2ZmKFwibW91c2VvdmVyXCIsbnVsbCxtZS5ub29wKSxlW25dLnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIixcImZhbHNlXCIpLG1lKHMpLnJlbW92ZUNsYXNzKEllKSxtZShpKS5yZW1vdmVDbGFzcyhJZSkudHJpZ2dlcihtZS5FdmVudChDZS5ISURERU4sbykpKX19fX0sbC5fZ2V0UGFyZW50RnJvbUVsZW1lbnQ9ZnVuY3Rpb24odCl7dmFyIGUsbj1ndC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHQpO3JldHVybiBuJiYoZT1tZShuKVswXSksZXx8dC5wYXJlbnROb2RlfSxsLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXI9ZnVuY3Rpb24odCl7aWYoKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QodC50YXJnZXQudGFnTmFtZSk/ISgzMj09PXQud2hpY2h8fDI3IT09dC53aGljaCYmKDQwIT09dC53aGljaCYmMzghPT10LndoaWNofHxtZSh0LnRhcmdldCkuY2xvc2VzdChQZSkubGVuZ3RoKSk6VGUudGVzdCh0LndoaWNoKSkmJih0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSwhdGhpcy5kaXNhYmxlZCYmIW1lKHRoaXMpLmhhc0NsYXNzKHdlKSkpe3ZhciBlPWwuX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMpLG49bWUoZSkuaGFzQ2xhc3MoSWUpO2lmKChufHwyNz09PXQud2hpY2gmJjMyPT09dC53aGljaCkmJighbnx8MjchPT10LndoaWNoJiYzMiE9PXQud2hpY2gpKXt2YXIgaT1tZShlKS5maW5kKGplKS5nZXQoKTtpZigwIT09aS5sZW5ndGgpe3ZhciByPWkuaW5kZXhPZih0LnRhcmdldCk7Mzg9PT10LndoaWNoJiYwPHImJnItLSw0MD09PXQud2hpY2gmJnI8aS5sZW5ndGgtMSYmcisrLHI8MCYmKHI9MCksaVtyXS5mb2N1cygpfX1lbHNle2lmKDI3PT09dC53aGljaCl7dmFyIG89bWUoZSkuZmluZChrZSlbMF07bWUobykudHJpZ2dlcihcImZvY3VzXCIpfW1lKHRoaXMpLnRyaWdnZXIoXCJjbGlja1wiKX19fSxzKGwsbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuMS4xXCJ9fSx7a2V5OlwiRGVmYXVsdFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBCZX19LHtrZXk6XCJEZWZhdWx0VHlwZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBLZX19XSksbH0oKSxtZShkb2N1bWVudCkub24oQ2UuS0VZRE9XTl9EQVRBX0FQSSxrZSxWZS5fZGF0YUFwaUtleWRvd25IYW5kbGVyKS5vbihDZS5LRVlET1dOX0RBVEFfQVBJLFBlLFZlLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLm9uKENlLkNMSUNLX0RBVEFfQVBJK1wiIFwiK0NlLktFWVVQX0RBVEFfQVBJLFZlLl9jbGVhck1lbnVzKS5vbihDZS5DTElDS19EQVRBX0FQSSxrZSxmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSxWZS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwobWUodGhpcyksXCJ0b2dnbGVcIil9KS5vbihDZS5DTElDS19EQVRBX0FQSSxMZSxmdW5jdGlvbih0KXt0LnN0b3BQcm9wYWdhdGlvbigpfSksbWUuZm5bX2VdPVZlLl9qUXVlcnlJbnRlcmZhY2UsbWUuZm5bX2VdLkNvbnN0cnVjdG9yPVZlLG1lLmZuW19lXS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIG1lLmZuW19lXT1iZSxWZS5falF1ZXJ5SW50ZXJmYWNlfSxWZSksQ2k9KFllPVwibW9kYWxcIixxZT1cIi5cIisoR2U9XCJicy5tb2RhbFwiKSx6ZT0oUWU9ZSkuZm5bWWVdLFhlPXtiYWNrZHJvcDohMCxrZXlib2FyZDohMCxmb2N1czohMCxzaG93OiEwfSxKZT17YmFja2Ryb3A6XCIoYm9vbGVhbnxzdHJpbmcpXCIsa2V5Ym9hcmQ6XCJib29sZWFuXCIsZm9jdXM6XCJib29sZWFuXCIsc2hvdzpcImJvb2xlYW5cIn0sWmU9e0hJREU6XCJoaWRlXCIrcWUsSElEREVOOlwiaGlkZGVuXCIrcWUsU0hPVzpcInNob3dcIitxZSxTSE9XTjpcInNob3duXCIrcWUsRk9DVVNJTjpcImZvY3VzaW5cIitxZSxSRVNJWkU6XCJyZXNpemVcIitxZSxDTElDS19ESVNNSVNTOlwiY2xpY2suZGlzbWlzc1wiK3FlLEtFWURPV05fRElTTUlTUzpcImtleWRvd24uZGlzbWlzc1wiK3FlLE1PVVNFVVBfRElTTUlTUzpcIm1vdXNldXAuZGlzbWlzc1wiK3FlLE1PVVNFRE9XTl9ESVNNSVNTOlwibW91c2Vkb3duLmRpc21pc3NcIitxZSxDTElDS19EQVRBX0FQSTpcImNsaWNrXCIrcWUrXCIuZGF0YS1hcGlcIn0sJGU9XCJtb2RhbC1zY3JvbGxiYXItbWVhc3VyZVwiLHRuPVwibW9kYWwtYmFja2Ryb3BcIixlbj1cIm1vZGFsLW9wZW5cIixubj1cImZhZGVcIixybj1cInNob3dcIixvbj17RElBTE9HOlwiLm1vZGFsLWRpYWxvZ1wiLERBVEFfVE9HR0xFOidbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsREFUQV9ESVNNSVNTOidbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nLEZJWEVEX0NPTlRFTlQ6XCIuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wXCIsU1RJQ0tZX0NPTlRFTlQ6XCIuc3RpY2t5LXRvcFwiLE5BVkJBUl9UT0dHTEVSOlwiLm5hdmJhci10b2dnbGVyXCJ9LHNuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gcih0LGUpe3RoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy5fZWxlbWVudD10LHRoaXMuX2RpYWxvZz1RZSh0KS5maW5kKG9uLkRJQUxPRylbMF0sdGhpcy5fYmFja2Ryb3A9bnVsbCx0aGlzLl9pc1Nob3duPSExLHRoaXMuX2lzQm9keU92ZXJmbG93aW5nPSExLHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2s9ITEsdGhpcy5fc2Nyb2xsYmFyV2lkdGg9MH12YXIgdD1yLnByb3RvdHlwZTtyZXR1cm4gdC50b2dnbGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2lzU2hvd24/dGhpcy5oaWRlKCk6dGhpcy5zaG93KHQpfSx0LnNob3c9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztpZighdGhpcy5faXNUcmFuc2l0aW9uaW5nJiYhdGhpcy5faXNTaG93bil7UWUodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3Mobm4pJiYodGhpcy5faXNUcmFuc2l0aW9uaW5nPSEwKTt2YXIgbj1RZS5FdmVudChaZS5TSE9XLHtyZWxhdGVkVGFyZ2V0OnR9KTtRZSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKG4pLHRoaXMuX2lzU2hvd258fG4uaXNEZWZhdWx0UHJldmVudGVkKCl8fCh0aGlzLl9pc1Nob3duPSEwLHRoaXMuX2NoZWNrU2Nyb2xsYmFyKCksdGhpcy5fc2V0U2Nyb2xsYmFyKCksdGhpcy5fYWRqdXN0RGlhbG9nKCksUWUoZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoZW4pLHRoaXMuX3NldEVzY2FwZUV2ZW50KCksdGhpcy5fc2V0UmVzaXplRXZlbnQoKSxRZSh0aGlzLl9lbGVtZW50KS5vbihaZS5DTElDS19ESVNNSVNTLG9uLkRBVEFfRElTTUlTUyxmdW5jdGlvbih0KXtyZXR1cm4gZS5oaWRlKHQpfSksUWUodGhpcy5fZGlhbG9nKS5vbihaZS5NT1VTRURPV05fRElTTUlTUyxmdW5jdGlvbigpe1FlKGUuX2VsZW1lbnQpLm9uZShaZS5NT1VTRVVQX0RJU01JU1MsZnVuY3Rpb24odCl7UWUodC50YXJnZXQpLmlzKGUuX2VsZW1lbnQpJiYoZS5faWdub3JlQmFja2Ryb3BDbGljaz0hMCl9KX0pLHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbigpe3JldHVybiBlLl9zaG93RWxlbWVudCh0KX0pKX19LHQuaGlkZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzO2lmKHQmJnQucHJldmVudERlZmF1bHQoKSwhdGhpcy5faXNUcmFuc2l0aW9uaW5nJiZ0aGlzLl9pc1Nob3duKXt2YXIgbj1RZS5FdmVudChaZS5ISURFKTtpZihRZSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKG4pLHRoaXMuX2lzU2hvd24mJiFuLmlzRGVmYXVsdFByZXZlbnRlZCgpKXt0aGlzLl9pc1Nob3duPSExO3ZhciBpPVFlKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKG5uKTtpZihpJiYodGhpcy5faXNUcmFuc2l0aW9uaW5nPSEwKSx0aGlzLl9zZXRFc2NhcGVFdmVudCgpLHRoaXMuX3NldFJlc2l6ZUV2ZW50KCksUWUoZG9jdW1lbnQpLm9mZihaZS5GT0NVU0lOKSxRZSh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhybiksUWUodGhpcy5fZWxlbWVudCkub2ZmKFplLkNMSUNLX0RJU01JU1MpLFFlKHRoaXMuX2RpYWxvZykub2ZmKFplLk1PVVNFRE9XTl9ESVNNSVNTKSxpKXt2YXIgcj1ndC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtRZSh0aGlzLl9lbGVtZW50KS5vbmUoZ3QuVFJBTlNJVElPTl9FTkQsZnVuY3Rpb24odCl7cmV0dXJuIGUuX2hpZGVNb2RhbCh0KX0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHIpfWVsc2UgdGhpcy5faGlkZU1vZGFsKCl9fX0sdC5kaXNwb3NlPWZ1bmN0aW9uKCl7UWUucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LEdlKSxRZSh3aW5kb3csZG9jdW1lbnQsdGhpcy5fZWxlbWVudCx0aGlzLl9iYWNrZHJvcCkub2ZmKHFlKSx0aGlzLl9jb25maWc9bnVsbCx0aGlzLl9lbGVtZW50PW51bGwsdGhpcy5fZGlhbG9nPW51bGwsdGhpcy5fYmFja2Ryb3A9bnVsbCx0aGlzLl9pc1Nob3duPW51bGwsdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmc9bnVsbCx0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrPW51bGwsdGhpcy5fc2Nyb2xsYmFyV2lkdGg9bnVsbH0sdC5oYW5kbGVVcGRhdGU9ZnVuY3Rpb24oKXt0aGlzLl9hZGp1c3REaWFsb2coKX0sdC5fZ2V0Q29uZmlnPWZ1bmN0aW9uKHQpe3JldHVybiB0PWMoe30sWGUsdCksZ3QudHlwZUNoZWNrQ29uZmlnKFllLHQsSmUpLHR9LHQuX3Nob3dFbGVtZW50PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj1RZSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhubik7dGhpcy5fZWxlbWVudC5wYXJlbnROb2RlJiZ0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERXx8ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtZW50KSx0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXk9XCJibG9ja1wiLHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiksdGhpcy5fZWxlbWVudC5zY3JvbGxUb3A9MCxuJiZndC5yZWZsb3codGhpcy5fZWxlbWVudCksUWUodGhpcy5fZWxlbWVudCkuYWRkQ2xhc3Mocm4pLHRoaXMuX2NvbmZpZy5mb2N1cyYmdGhpcy5fZW5mb3JjZUZvY3VzKCk7dmFyIGk9UWUuRXZlbnQoWmUuU0hPV04se3JlbGF0ZWRUYXJnZXQ6dH0pLHI9ZnVuY3Rpb24oKXtlLl9jb25maWcuZm9jdXMmJmUuX2VsZW1lbnQuZm9jdXMoKSxlLl9pc1RyYW5zaXRpb25pbmc9ITEsUWUoZS5fZWxlbWVudCkudHJpZ2dlcihpKX07aWYobil7dmFyIG89Z3QuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7UWUodGhpcy5fZGlhbG9nKS5vbmUoZ3QuVFJBTlNJVElPTl9FTkQscikuZW11bGF0ZVRyYW5zaXRpb25FbmQobyl9ZWxzZSByKCl9LHQuX2VuZm9yY2VGb2N1cz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7UWUoZG9jdW1lbnQpLm9mZihaZS5GT0NVU0lOKS5vbihaZS5GT0NVU0lOLGZ1bmN0aW9uKHQpe2RvY3VtZW50IT09dC50YXJnZXQmJmUuX2VsZW1lbnQhPT10LnRhcmdldCYmMD09PVFlKGUuX2VsZW1lbnQpLmhhcyh0LnRhcmdldCkubGVuZ3RoJiZlLl9lbGVtZW50LmZvY3VzKCl9KX0sdC5fc2V0RXNjYXBlRXZlbnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuX2lzU2hvd24mJnRoaXMuX2NvbmZpZy5rZXlib2FyZD9RZSh0aGlzLl9lbGVtZW50KS5vbihaZS5LRVlET1dOX0RJU01JU1MsZnVuY3Rpb24odCl7Mjc9PT10LndoaWNoJiYodC5wcmV2ZW50RGVmYXVsdCgpLGUuaGlkZSgpKX0pOnRoaXMuX2lzU2hvd258fFFlKHRoaXMuX2VsZW1lbnQpLm9mZihaZS5LRVlET1dOX0RJU01JU1MpfSx0Ll9zZXRSZXNpemVFdmVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5faXNTaG93bj9RZSh3aW5kb3cpLm9uKFplLlJFU0laRSxmdW5jdGlvbih0KXtyZXR1cm4gZS5oYW5kbGVVcGRhdGUodCl9KTpRZSh3aW5kb3cpLm9mZihaZS5SRVNJWkUpfSx0Ll9oaWRlTW9kYWw9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIix0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsITApLHRoaXMuX2lzVHJhbnNpdGlvbmluZz0hMSx0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24oKXtRZShkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhlbiksdC5fcmVzZXRBZGp1c3RtZW50cygpLHQuX3Jlc2V0U2Nyb2xsYmFyKCksUWUodC5fZWxlbWVudCkudHJpZ2dlcihaZS5ISURERU4pfSl9LHQuX3JlbW92ZUJhY2tkcm9wPWZ1bmN0aW9uKCl7dGhpcy5fYmFja2Ryb3AmJihRZSh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlKCksdGhpcy5fYmFja2Ryb3A9bnVsbCl9LHQuX3Nob3dCYWNrZHJvcD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49UWUodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3Mobm4pP25uOlwiXCI7aWYodGhpcy5faXNTaG93biYmdGhpcy5fY29uZmlnLmJhY2tkcm9wKXtpZih0aGlzLl9iYWNrZHJvcD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMuX2JhY2tkcm9wLmNsYXNzTmFtZT10bixuJiZRZSh0aGlzLl9iYWNrZHJvcCkuYWRkQ2xhc3MobiksUWUodGhpcy5fYmFja2Ryb3ApLmFwcGVuZFRvKGRvY3VtZW50LmJvZHkpLFFlKHRoaXMuX2VsZW1lbnQpLm9uKFplLkNMSUNLX0RJU01JU1MsZnVuY3Rpb24odCl7ZS5faWdub3JlQmFja2Ryb3BDbGljaz9lLl9pZ25vcmVCYWNrZHJvcENsaWNrPSExOnQudGFyZ2V0PT09dC5jdXJyZW50VGFyZ2V0JiYoXCJzdGF0aWNcIj09PWUuX2NvbmZpZy5iYWNrZHJvcD9lLl9lbGVtZW50LmZvY3VzKCk6ZS5oaWRlKCkpfSksbiYmZ3QucmVmbG93KHRoaXMuX2JhY2tkcm9wKSxRZSh0aGlzLl9iYWNrZHJvcCkuYWRkQ2xhc3Mocm4pLCF0KXJldHVybjtpZighbilyZXR1cm4gdm9pZCB0KCk7dmFyIGk9Z3QuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fYmFja2Ryb3ApO1FlKHRoaXMuX2JhY2tkcm9wKS5vbmUoZ3QuVFJBTlNJVElPTl9FTkQsdCkuZW11bGF0ZVRyYW5zaXRpb25FbmQoaSl9ZWxzZSBpZighdGhpcy5faXNTaG93biYmdGhpcy5fYmFja2Ryb3Ape1FlKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmVDbGFzcyhybik7dmFyIHI9ZnVuY3Rpb24oKXtlLl9yZW1vdmVCYWNrZHJvcCgpLHQmJnQoKX07aWYoUWUodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3Mobm4pKXt2YXIgbz1ndC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9iYWNrZHJvcCk7UWUodGhpcy5fYmFja2Ryb3ApLm9uZShndC5UUkFOU0lUSU9OX0VORCxyKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChvKX1lbHNlIHIoKX1lbHNlIHQmJnQoKX0sdC5fYWRqdXN0RGlhbG9nPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQ+ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDshdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcmJnQmJih0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0PXRoaXMuX3Njcm9sbGJhcldpZHRoK1wicHhcIiksdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcmJiF0JiYodGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQ9dGhpcy5fc2Nyb2xsYmFyV2lkdGgrXCJweFwiKX0sdC5fcmVzZXRBZGp1c3RtZW50cz1mdW5jdGlvbigpe3RoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQ9XCJcIix0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodD1cIlwifSx0Ll9jaGVja1Njcm9sbGJhcj1mdW5jdGlvbigpe3ZhciB0PWRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dGhpcy5faXNCb2R5T3ZlcmZsb3dpbmc9dC5sZWZ0K3QucmlnaHQ8d2luZG93LmlubmVyV2lkdGgsdGhpcy5fc2Nyb2xsYmFyV2lkdGg9dGhpcy5fZ2V0U2Nyb2xsYmFyV2lkdGgoKX0sdC5fc2V0U2Nyb2xsYmFyPWZ1bmN0aW9uKCl7dmFyIHI9dGhpcztpZih0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyl7UWUob24uRklYRURfQ09OVEVOVCkuZWFjaChmdW5jdGlvbih0LGUpe3ZhciBuPVFlKGUpWzBdLnN0eWxlLnBhZGRpbmdSaWdodCxpPVFlKGUpLmNzcyhcInBhZGRpbmctcmlnaHRcIik7UWUoZSkuZGF0YShcInBhZGRpbmctcmlnaHRcIixuKS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIscGFyc2VGbG9hdChpKStyLl9zY3JvbGxiYXJXaWR0aCtcInB4XCIpfSksUWUob24uU1RJQ0tZX0NPTlRFTlQpLmVhY2goZnVuY3Rpb24odCxlKXt2YXIgbj1RZShlKVswXS5zdHlsZS5tYXJnaW5SaWdodCxpPVFlKGUpLmNzcyhcIm1hcmdpbi1yaWdodFwiKTtRZShlKS5kYXRhKFwibWFyZ2luLXJpZ2h0XCIsbikuY3NzKFwibWFyZ2luLXJpZ2h0XCIscGFyc2VGbG9hdChpKS1yLl9zY3JvbGxiYXJXaWR0aCtcInB4XCIpfSksUWUob24uTkFWQkFSX1RPR0dMRVIpLmVhY2goZnVuY3Rpb24odCxlKXt2YXIgbj1RZShlKVswXS5zdHlsZS5tYXJnaW5SaWdodCxpPVFlKGUpLmNzcyhcIm1hcmdpbi1yaWdodFwiKTtRZShlKS5kYXRhKFwibWFyZ2luLXJpZ2h0XCIsbikuY3NzKFwibWFyZ2luLXJpZ2h0XCIscGFyc2VGbG9hdChpKStyLl9zY3JvbGxiYXJXaWR0aCtcInB4XCIpfSk7dmFyIHQ9ZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQsZT1RZShkb2N1bWVudC5ib2R5KS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIpO1FlKGRvY3VtZW50LmJvZHkpLmRhdGEoXCJwYWRkaW5nLXJpZ2h0XCIsdCkuY3NzKFwicGFkZGluZy1yaWdodFwiLHBhcnNlRmxvYXQoZSkrdGhpcy5fc2Nyb2xsYmFyV2lkdGgrXCJweFwiKX19LHQuX3Jlc2V0U2Nyb2xsYmFyPWZ1bmN0aW9uKCl7UWUob24uRklYRURfQ09OVEVOVCkuZWFjaChmdW5jdGlvbih0LGUpe3ZhciBuPVFlKGUpLmRhdGEoXCJwYWRkaW5nLXJpZ2h0XCIpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBuJiZRZShlKS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIsbikucmVtb3ZlRGF0YShcInBhZGRpbmctcmlnaHRcIil9KSxRZShvbi5TVElDS1lfQ09OVEVOVCtcIiwgXCIrb24uTkFWQkFSX1RPR0dMRVIpLmVhY2goZnVuY3Rpb24odCxlKXt2YXIgbj1RZShlKS5kYXRhKFwibWFyZ2luLXJpZ2h0XCIpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBuJiZRZShlKS5jc3MoXCJtYXJnaW4tcmlnaHRcIixuKS5yZW1vdmVEYXRhKFwibWFyZ2luLXJpZ2h0XCIpfSk7dmFyIHQ9UWUoZG9jdW1lbnQuYm9keSkuZGF0YShcInBhZGRpbmctcmlnaHRcIik7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQmJlFlKGRvY3VtZW50LmJvZHkpLmNzcyhcInBhZGRpbmctcmlnaHRcIix0KS5yZW1vdmVEYXRhKFwicGFkZGluZy1yaWdodFwiKX0sdC5fZ2V0U2Nyb2xsYmFyV2lkdGg9ZnVuY3Rpb24oKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3QuY2xhc3NOYW1lPSRlLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodCk7dmFyIGU9dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aC10LmNsaWVudFdpZHRoO3JldHVybiBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHQpLGV9LHIuX2pRdWVyeUludGVyZmFjZT1mdW5jdGlvbihuLGkpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1RZSh0aGlzKS5kYXRhKEdlKSxlPWMoe30sWGUsUWUodGhpcykuZGF0YSgpLFwib2JqZWN0XCI9PXR5cGVvZiBuJiZuP246e30pO2lmKHR8fCh0PW5ldyByKHRoaXMsZSksUWUodGhpcykuZGF0YShHZSx0KSksXCJzdHJpbmdcIj09dHlwZW9mIG4pe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0W25dKXRocm93IG5ldyBUeXBlRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicrbisnXCInKTt0W25dKGkpfWVsc2UgZS5zaG93JiZ0LnNob3coaSl9KX0scyhyLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjEuMVwifX0se2tleTpcIkRlZmF1bHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gWGV9fV0pLHJ9KCksUWUoZG9jdW1lbnQpLm9uKFplLkNMSUNLX0RBVEFfQVBJLG9uLkRBVEFfVE9HR0xFLGZ1bmN0aW9uKHQpe3ZhciBlLG49dGhpcyxpPWd0LmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7aSYmKGU9UWUoaSlbMF0pO3ZhciByPVFlKGUpLmRhdGEoR2UpP1widG9nZ2xlXCI6Yyh7fSxRZShlKS5kYXRhKCksUWUodGhpcykuZGF0YSgpKTtcIkFcIiE9PXRoaXMudGFnTmFtZSYmXCJBUkVBXCIhPT10aGlzLnRhZ05hbWV8fHQucHJldmVudERlZmF1bHQoKTt2YXIgbz1RZShlKS5vbmUoWmUuU0hPVyxmdW5jdGlvbih0KXt0LmlzRGVmYXVsdFByZXZlbnRlZCgpfHxvLm9uZShaZS5ISURERU4sZnVuY3Rpb24oKXtRZShuKS5pcyhcIjp2aXNpYmxlXCIpJiZuLmZvY3VzKCl9KX0pO3NuLl9qUXVlcnlJbnRlcmZhY2UuY2FsbChRZShlKSxyLHRoaXMpfSksUWUuZm5bWWVdPXNuLl9qUXVlcnlJbnRlcmZhY2UsUWUuZm5bWWVdLkNvbnN0cnVjdG9yPXNuLFFlLmZuW1llXS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIFFlLmZuW1llXT16ZSxzbi5falF1ZXJ5SW50ZXJmYWNlfSxzbiksd2k9KGxuPVwidG9vbHRpcFwiLGZuPVwiLlwiKyhjbj1cImJzLnRvb2x0aXBcIiksaG49KGFuPWUpLmZuW2xuXSx1bj1cImJzLXRvb2x0aXBcIixkbj1uZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIrdW4rXCJcXFxcUytcIixcImdcIiksbW49e2FuaW1hdGlvbjohMCx0ZW1wbGF0ZTonPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPjxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+Jyx0cmlnZ2VyOlwiaG92ZXIgZm9jdXNcIix0aXRsZTpcIlwiLGRlbGF5OjAsaHRtbDohKGduPXtBVVRPOlwiYXV0b1wiLFRPUDpcInRvcFwiLFJJR0hUOlwicmlnaHRcIixCT1RUT006XCJib3R0b21cIixMRUZUOlwibGVmdFwifSksc2VsZWN0b3I6IShwbj17YW5pbWF0aW9uOlwiYm9vbGVhblwiLHRlbXBsYXRlOlwic3RyaW5nXCIsdGl0bGU6XCIoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pXCIsdHJpZ2dlcjpcInN0cmluZ1wiLGRlbGF5OlwiKG51bWJlcnxvYmplY3QpXCIsaHRtbDpcImJvb2xlYW5cIixzZWxlY3RvcjpcIihzdHJpbmd8Ym9vbGVhbilcIixwbGFjZW1lbnQ6XCIoc3RyaW5nfGZ1bmN0aW9uKVwiLG9mZnNldDpcIihudW1iZXJ8c3RyaW5nKVwiLGNvbnRhaW5lcjpcIihzdHJpbmd8ZWxlbWVudHxib29sZWFuKVwiLGZhbGxiYWNrUGxhY2VtZW50OlwiKHN0cmluZ3xhcnJheSlcIixib3VuZGFyeTpcIihzdHJpbmd8ZWxlbWVudClcIn0pLHBsYWNlbWVudDpcInRvcFwiLG9mZnNldDowLGNvbnRhaW5lcjohMSxmYWxsYmFja1BsYWNlbWVudDpcImZsaXBcIixib3VuZGFyeTpcInNjcm9sbFBhcmVudFwifSx2bj1cIm91dFwiLEVuPXtISURFOlwiaGlkZVwiK2ZuLEhJRERFTjpcImhpZGRlblwiK2ZuLFNIT1c6KF9uPVwic2hvd1wiKStmbixTSE9XTjpcInNob3duXCIrZm4sSU5TRVJURUQ6XCJpbnNlcnRlZFwiK2ZuLENMSUNLOlwiY2xpY2tcIitmbixGT0NVU0lOOlwiZm9jdXNpblwiK2ZuLEZPQ1VTT1VUOlwiZm9jdXNvdXRcIitmbixNT1VTRUVOVEVSOlwibW91c2VlbnRlclwiK2ZuLE1PVVNFTEVBVkU6XCJtb3VzZWxlYXZlXCIrZm59LHluPVwiZmFkZVwiLGJuPVwic2hvd1wiLFRuPVwiLnRvb2x0aXAtaW5uZXJcIixDbj1cIi5hcnJvd1wiLHduPVwiaG92ZXJcIixJbj1cImZvY3VzXCIsRG49XCJjbGlja1wiLEFuPVwibWFudWFsXCIsU249ZnVuY3Rpb24oKXtmdW5jdGlvbiBpKHQsZSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGdlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJCb290c3RyYXAgdG9vbHRpcHMgcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZylcIik7dGhpcy5faXNFbmFibGVkPSEwLHRoaXMuX3RpbWVvdXQ9MCx0aGlzLl9ob3ZlclN0YXRlPVwiXCIsdGhpcy5fYWN0aXZlVHJpZ2dlcj17fSx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLmVsZW1lbnQ9dCx0aGlzLmNvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy50aXA9bnVsbCx0aGlzLl9zZXRMaXN0ZW5lcnMoKX12YXIgdD1pLnByb3RvdHlwZTtyZXR1cm4gdC5lbmFibGU9ZnVuY3Rpb24oKXt0aGlzLl9pc0VuYWJsZWQ9ITB9LHQuZGlzYWJsZT1mdW5jdGlvbigpe3RoaXMuX2lzRW5hYmxlZD0hMX0sdC50b2dnbGVFbmFibGVkPWZ1bmN0aW9uKCl7dGhpcy5faXNFbmFibGVkPSF0aGlzLl9pc0VuYWJsZWR9LHQudG9nZ2xlPWZ1bmN0aW9uKHQpe2lmKHRoaXMuX2lzRW5hYmxlZClpZih0KXt2YXIgZT10aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLG49YW4odC5jdXJyZW50VGFyZ2V0KS5kYXRhKGUpO258fChuPW5ldyB0aGlzLmNvbnN0cnVjdG9yKHQuY3VycmVudFRhcmdldCx0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKSxhbih0LmN1cnJlbnRUYXJnZXQpLmRhdGEoZSxuKSksbi5fYWN0aXZlVHJpZ2dlci5jbGljaz0hbi5fYWN0aXZlVHJpZ2dlci5jbGljayxuLl9pc1dpdGhBY3RpdmVUcmlnZ2VyKCk/bi5fZW50ZXIobnVsbCxuKTpuLl9sZWF2ZShudWxsLG4pfWVsc2V7aWYoYW4odGhpcy5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKGJuKSlyZXR1cm4gdm9pZCB0aGlzLl9sZWF2ZShudWxsLHRoaXMpO3RoaXMuX2VudGVyKG51bGwsdGhpcyl9fSx0LmRpc3Bvc2U9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCksYW4ucmVtb3ZlRGF0YSh0aGlzLmVsZW1lbnQsdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSksYW4odGhpcy5lbGVtZW50KS5vZmYodGhpcy5jb25zdHJ1Y3Rvci5FVkVOVF9LRVkpLGFuKHRoaXMuZWxlbWVudCkuY2xvc2VzdChcIi5tb2RhbFwiKS5vZmYoXCJoaWRlLmJzLm1vZGFsXCIpLHRoaXMudGlwJiZhbih0aGlzLnRpcCkucmVtb3ZlKCksdGhpcy5faXNFbmFibGVkPW51bGwsdGhpcy5fdGltZW91dD1udWxsLHRoaXMuX2hvdmVyU3RhdGU9bnVsbCwodGhpcy5fYWN0aXZlVHJpZ2dlcj1udWxsKSE9PXRoaXMuX3BvcHBlciYmdGhpcy5fcG9wcGVyLmRlc3Ryb3koKSx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLmVsZW1lbnQ9bnVsbCx0aGlzLmNvbmZpZz1udWxsLHRoaXMudGlwPW51bGx9LHQuc2hvdz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoXCJub25lXCI9PT1hbih0aGlzLmVsZW1lbnQpLmNzcyhcImRpc3BsYXlcIikpdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHVzZSBzaG93IG9uIHZpc2libGUgZWxlbWVudHNcIik7dmFyIHQ9YW4uRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XKTtpZih0aGlzLmlzV2l0aENvbnRlbnQoKSYmdGhpcy5faXNFbmFibGVkKXthbih0aGlzLmVsZW1lbnQpLnRyaWdnZXIodCk7dmFyIG49YW4uY29udGFpbnModGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHRoaXMuZWxlbWVudCk7aWYodC5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8IW4pcmV0dXJuO3ZhciBpPXRoaXMuZ2V0VGlwRWxlbWVudCgpLHI9Z3QuZ2V0VUlEKHRoaXMuY29uc3RydWN0b3IuTkFNRSk7aS5zZXRBdHRyaWJ1dGUoXCJpZFwiLHIpLHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZGJ5XCIsciksdGhpcy5zZXRDb250ZW50KCksdGhpcy5jb25maWcuYW5pbWF0aW9uJiZhbihpKS5hZGRDbGFzcyh5bik7dmFyIG89XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5jb25maWcucGxhY2VtZW50P3RoaXMuY29uZmlnLnBsYWNlbWVudC5jYWxsKHRoaXMsaSx0aGlzLmVsZW1lbnQpOnRoaXMuY29uZmlnLnBsYWNlbWVudCxzPXRoaXMuX2dldEF0dGFjaG1lbnQobyk7dGhpcy5hZGRBdHRhY2htZW50Q2xhc3Mocyk7dmFyIGE9ITE9PT10aGlzLmNvbmZpZy5jb250YWluZXI/ZG9jdW1lbnQuYm9keTphbih0aGlzLmNvbmZpZy5jb250YWluZXIpO2FuKGkpLmRhdGEodGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSx0aGlzKSxhbi5jb250YWlucyh0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsdGhpcy50aXApfHxhbihpKS5hcHBlbmRUbyhhKSxhbih0aGlzLmVsZW1lbnQpLnRyaWdnZXIodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5JTlNFUlRFRCksdGhpcy5fcG9wcGVyPW5ldyBnZSh0aGlzLmVsZW1lbnQsaSx7cGxhY2VtZW50OnMsbW9kaWZpZXJzOntvZmZzZXQ6e29mZnNldDp0aGlzLmNvbmZpZy5vZmZzZXR9LGZsaXA6e2JlaGF2aW9yOnRoaXMuY29uZmlnLmZhbGxiYWNrUGxhY2VtZW50fSxhcnJvdzp7ZWxlbWVudDpDbn0scHJldmVudE92ZXJmbG93Ontib3VuZGFyaWVzRWxlbWVudDp0aGlzLmNvbmZpZy5ib3VuZGFyeX19LG9uQ3JlYXRlOmZ1bmN0aW9uKHQpe3Qub3JpZ2luYWxQbGFjZW1lbnQhPT10LnBsYWNlbWVudCYmZS5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKHQpfSxvblVwZGF0ZTpmdW5jdGlvbih0KXtlLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UodCl9fSksYW4oaSkuYWRkQ2xhc3MoYm4pLFwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJmFuKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub24oXCJtb3VzZW92ZXJcIixudWxsLGFuLm5vb3ApO3ZhciBsPWZ1bmN0aW9uKCl7ZS5jb25maWcuYW5pbWF0aW9uJiZlLl9maXhUcmFuc2l0aW9uKCk7dmFyIHQ9ZS5faG92ZXJTdGF0ZTtlLl9ob3ZlclN0YXRlPW51bGwsYW4oZS5lbGVtZW50KS50cmlnZ2VyKGUuY29uc3RydWN0b3IuRXZlbnQuU0hPV04pLHQ9PT12biYmZS5fbGVhdmUobnVsbCxlKX07aWYoYW4odGhpcy50aXApLmhhc0NsYXNzKHluKSl7dmFyIGM9Z3QuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy50aXApO2FuKHRoaXMudGlwKS5vbmUoZ3QuVFJBTlNJVElPTl9FTkQsbCkuZW11bGF0ZVRyYW5zaXRpb25FbmQoYyl9ZWxzZSBsKCl9fSx0LmhpZGU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPXRoaXMuZ2V0VGlwRWxlbWVudCgpLGk9YW4uRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURFKSxyPWZ1bmN0aW9uKCl7ZS5faG92ZXJTdGF0ZSE9PV9uJiZuLnBhcmVudE5vZGUmJm4ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuKSxlLl9jbGVhblRpcENsYXNzKCksZS5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtZGVzY3JpYmVkYnlcIiksYW4oZS5lbGVtZW50KS50cmlnZ2VyKGUuY29uc3RydWN0b3IuRXZlbnQuSElEREVOKSxudWxsIT09ZS5fcG9wcGVyJiZlLl9wb3BwZXIuZGVzdHJveSgpLHQmJnQoKX07aWYoYW4odGhpcy5lbGVtZW50KS50cmlnZ2VyKGkpLCFpLmlzRGVmYXVsdFByZXZlbnRlZCgpKXtpZihhbihuKS5yZW1vdmVDbGFzcyhibiksXCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmYW4oZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vZmYoXCJtb3VzZW92ZXJcIixudWxsLGFuLm5vb3ApLHRoaXMuX2FjdGl2ZVRyaWdnZXJbRG5dPSExLHRoaXMuX2FjdGl2ZVRyaWdnZXJbSW5dPSExLHRoaXMuX2FjdGl2ZVRyaWdnZXJbd25dPSExLGFuKHRoaXMudGlwKS5oYXNDbGFzcyh5bikpe3ZhciBvPWd0LmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KG4pO2FuKG4pLm9uZShndC5UUkFOU0lUSU9OX0VORCxyKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChvKX1lbHNlIHIoKTt0aGlzLl9ob3ZlclN0YXRlPVwiXCJ9fSx0LnVwZGF0ZT1mdW5jdGlvbigpe251bGwhPT10aGlzLl9wb3BwZXImJnRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpfSx0LmlzV2l0aENvbnRlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbih0aGlzLmdldFRpdGxlKCkpfSx0LmFkZEF0dGFjaG1lbnRDbGFzcz1mdW5jdGlvbih0KXthbih0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3ModW4rXCItXCIrdCl9LHQuZ2V0VGlwRWxlbWVudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRpcD10aGlzLnRpcHx8YW4odGhpcy5jb25maWcudGVtcGxhdGUpWzBdLHRoaXMudGlwfSx0LnNldENvbnRlbnQ9ZnVuY3Rpb24oKXt2YXIgdD1hbih0aGlzLmdldFRpcEVsZW1lbnQoKSk7dGhpcy5zZXRFbGVtZW50Q29udGVudCh0LmZpbmQoVG4pLHRoaXMuZ2V0VGl0bGUoKSksdC5yZW1vdmVDbGFzcyh5bitcIiBcIitibil9LHQuc2V0RWxlbWVudENvbnRlbnQ9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmNvbmZpZy5odG1sO1wib2JqZWN0XCI9PXR5cGVvZiBlJiYoZS5ub2RlVHlwZXx8ZS5qcXVlcnkpP24/YW4oZSkucGFyZW50KCkuaXModCl8fHQuZW1wdHkoKS5hcHBlbmQoZSk6dC50ZXh0KGFuKGUpLnRleHQoKSk6dFtuP1wiaHRtbFwiOlwidGV4dFwiXShlKX0sdC5nZXRUaXRsZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIpO3JldHVybiB0fHwodD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLmNvbmZpZy50aXRsZT90aGlzLmNvbmZpZy50aXRsZS5jYWxsKHRoaXMuZWxlbWVudCk6dGhpcy5jb25maWcudGl0bGUpLHR9LHQuX2dldEF0dGFjaG1lbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIGduW3QudG9VcHBlckNhc2UoKV19LHQuX3NldExpc3RlbmVycz1mdW5jdGlvbigpe3ZhciBpPXRoaXM7dGhpcy5jb25maWcudHJpZ2dlci5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbih0KXtpZihcImNsaWNrXCI9PT10KWFuKGkuZWxlbWVudCkub24oaS5jb25zdHJ1Y3Rvci5FdmVudC5DTElDSyxpLmNvbmZpZy5zZWxlY3RvcixmdW5jdGlvbih0KXtyZXR1cm4gaS50b2dnbGUodCl9KTtlbHNlIGlmKHQhPT1Bbil7dmFyIGU9dD09PXduP2kuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VFTlRFUjppLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTSU4sbj10PT09d24/aS5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUxFQVZFOmkuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNPVVQ7YW4oaS5lbGVtZW50KS5vbihlLGkuY29uZmlnLnNlbGVjdG9yLGZ1bmN0aW9uKHQpe3JldHVybiBpLl9lbnRlcih0KX0pLm9uKG4saS5jb25maWcuc2VsZWN0b3IsZnVuY3Rpb24odCl7cmV0dXJuIGkuX2xlYXZlKHQpfSl9YW4oaS5lbGVtZW50KS5jbG9zZXN0KFwiLm1vZGFsXCIpLm9uKFwiaGlkZS5icy5tb2RhbFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkuaGlkZSgpfSl9KSx0aGlzLmNvbmZpZy5zZWxlY3Rvcj90aGlzLmNvbmZpZz1jKHt9LHRoaXMuY29uZmlnLHt0cmlnZ2VyOlwibWFudWFsXCIsc2VsZWN0b3I6XCJcIn0pOnRoaXMuX2ZpeFRpdGxlKCl9LHQuX2ZpeFRpdGxlPWZ1bmN0aW9uKCl7dmFyIHQ9dHlwZW9mIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIpOyh0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGl0bGVcIil8fFwic3RyaW5nXCIhPT10KSYmKHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIsdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcInRpdGxlXCIpfHxcIlwiKSx0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwidGl0bGVcIixcIlwiKSl9LHQuX2VudGVyPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTsoZT1lfHxhbih0LmN1cnJlbnRUYXJnZXQpLmRhdGEobikpfHwoZT1uZXcgdGhpcy5jb25zdHJ1Y3Rvcih0LmN1cnJlbnRUYXJnZXQsdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSksYW4odC5jdXJyZW50VGFyZ2V0KS5kYXRhKG4sZSkpLHQmJihlLl9hY3RpdmVUcmlnZ2VyW1wiZm9jdXNpblwiPT09dC50eXBlP0luOnduXT0hMCksYW4oZS5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKGJuKXx8ZS5faG92ZXJTdGF0ZT09PV9uP2UuX2hvdmVyU3RhdGU9X246KGNsZWFyVGltZW91dChlLl90aW1lb3V0KSxlLl9ob3ZlclN0YXRlPV9uLGUuY29uZmlnLmRlbGF5JiZlLmNvbmZpZy5kZWxheS5zaG93P2UuX3RpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe2UuX2hvdmVyU3RhdGU9PT1fbiYmZS5zaG93KCl9LGUuY29uZmlnLmRlbGF5LnNob3cpOmUuc2hvdygpKX0sdC5fbGVhdmU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZOyhlPWV8fGFuKHQuY3VycmVudFRhcmdldCkuZGF0YShuKSl8fChlPW5ldyB0aGlzLmNvbnN0cnVjdG9yKHQuY3VycmVudFRhcmdldCx0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKSxhbih0LmN1cnJlbnRUYXJnZXQpLmRhdGEobixlKSksdCYmKGUuX2FjdGl2ZVRyaWdnZXJbXCJmb2N1c291dFwiPT09dC50eXBlP0luOnduXT0hMSksZS5faXNXaXRoQWN0aXZlVHJpZ2dlcigpfHwoY2xlYXJUaW1lb3V0KGUuX3RpbWVvdXQpLGUuX2hvdmVyU3RhdGU9dm4sZS5jb25maWcuZGVsYXkmJmUuY29uZmlnLmRlbGF5LmhpZGU/ZS5fdGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZS5faG92ZXJTdGF0ZT09PXZuJiZlLmhpZGUoKX0sZS5jb25maWcuZGVsYXkuaGlkZSk6ZS5oaWRlKCkpfSx0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyPWZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIHRoaXMuX2FjdGl2ZVRyaWdnZXIpaWYodGhpcy5fYWN0aXZlVHJpZ2dlclt0XSlyZXR1cm4hMDtyZXR1cm4hMX0sdC5fZ2V0Q29uZmlnPWZ1bmN0aW9uKHQpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZih0PWMoe30sdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LGFuKHRoaXMuZWxlbWVudCkuZGF0YSgpLFwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0P3Q6e30pKS5kZWxheSYmKHQuZGVsYXk9e3Nob3c6dC5kZWxheSxoaWRlOnQuZGVsYXl9KSxcIm51bWJlclwiPT10eXBlb2YgdC50aXRsZSYmKHQudGl0bGU9dC50aXRsZS50b1N0cmluZygpKSxcIm51bWJlclwiPT10eXBlb2YgdC5jb250ZW50JiYodC5jb250ZW50PXQuY29udGVudC50b1N0cmluZygpKSxndC50eXBlQ2hlY2tDb25maWcobG4sdCx0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKSx0fSx0Ll9nZXREZWxlZ2F0ZUNvbmZpZz1mdW5jdGlvbigpe3ZhciB0PXt9O2lmKHRoaXMuY29uZmlnKWZvcih2YXIgZSBpbiB0aGlzLmNvbmZpZyl0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRbZV0hPT10aGlzLmNvbmZpZ1tlXSYmKHRbZV09dGhpcy5jb25maWdbZV0pO3JldHVybiB0fSx0Ll9jbGVhblRpcENsYXNzPWZ1bmN0aW9uKCl7dmFyIHQ9YW4odGhpcy5nZXRUaXBFbGVtZW50KCkpLGU9dC5hdHRyKFwiY2xhc3NcIikubWF0Y2goZG4pO251bGwhPT1lJiYwPGUubGVuZ3RoJiZ0LnJlbW92ZUNsYXNzKGUuam9pbihcIlwiKSl9LHQuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZT1mdW5jdGlvbih0KXt0aGlzLl9jbGVhblRpcENsYXNzKCksdGhpcy5hZGRBdHRhY2htZW50Q2xhc3ModGhpcy5fZ2V0QXR0YWNobWVudCh0LnBsYWNlbWVudCkpfSx0Ll9maXhUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRUaXBFbGVtZW50KCksZT10aGlzLmNvbmZpZy5hbmltYXRpb247bnVsbD09PXQuZ2V0QXR0cmlidXRlKFwieC1wbGFjZW1lbnRcIikmJihhbih0KS5yZW1vdmVDbGFzcyh5biksdGhpcy5jb25maWcuYW5pbWF0aW9uPSExLHRoaXMuaGlkZSgpLHRoaXMuc2hvdygpLHRoaXMuY29uZmlnLmFuaW1hdGlvbj1lKX0saS5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1hbih0aGlzKS5kYXRhKGNuKSxlPVwib2JqZWN0XCI9PXR5cGVvZiBuJiZuO2lmKCh0fHwhL2Rpc3Bvc2V8aGlkZS8udGVzdChuKSkmJih0fHwodD1uZXcgaSh0aGlzLGUpLGFuKHRoaXMpLmRhdGEoY24sdCkpLFwic3RyaW5nXCI9PXR5cGVvZiBuKSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHRbbl0pdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJytuKydcIicpO3Rbbl0oKX19KX0scyhpLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjEuMVwifX0se2tleTpcIkRlZmF1bHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbW59fSx7a2V5OlwiTkFNRVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBsbn19LHtrZXk6XCJEQVRBX0tFWVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBjbn19LHtrZXk6XCJFdmVudFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBFbn19LHtrZXk6XCJFVkVOVF9LRVlcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZm59fSx7a2V5OlwiRGVmYXVsdFR5cGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcG59fV0pLGl9KCksYW4uZm5bbG5dPVNuLl9qUXVlcnlJbnRlcmZhY2UsYW4uZm5bbG5dLkNvbnN0cnVjdG9yPVNuLGFuLmZuW2xuXS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGFuLmZuW2xuXT1obixTbi5falF1ZXJ5SW50ZXJmYWNlfSxTbiksSWk9KE5uPVwicG9wb3ZlclwiLExuPVwiLlwiKyhrbj1cImJzLnBvcG92ZXJcIiksUG49KE9uPWUpLmZuW05uXSx4bj1cImJzLXBvcG92ZXJcIixqbj1uZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIreG4rXCJcXFxcUytcIixcImdcIiksTW49Yyh7fSx3aS5EZWZhdWx0LHtwbGFjZW1lbnQ6XCJyaWdodFwiLHRyaWdnZXI6XCJjbGlja1wiLGNvbnRlbnQ6XCJcIix0ZW1wbGF0ZTonPGRpdiBjbGFzcz1cInBvcG92ZXJcIiByb2xlPVwidG9vbHRpcFwiPjxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PjxoMyBjbGFzcz1cInBvcG92ZXItaGVhZGVyXCI+PC9oMz48ZGl2IGNsYXNzPVwicG9wb3Zlci1ib2R5XCI+PC9kaXY+PC9kaXY+J30pLFJuPWMoe30sd2kuRGVmYXVsdFR5cGUse2NvbnRlbnQ6XCIoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pXCJ9KSxIbj1cImZhZGVcIixGbj1cIi5wb3BvdmVyLWhlYWRlclwiLFVuPVwiLnBvcG92ZXItYm9keVwiLEJuPXtISURFOlwiaGlkZVwiK0xuLEhJRERFTjpcImhpZGRlblwiK0xuLFNIT1c6KFduPVwic2hvd1wiKStMbixTSE9XTjpcInNob3duXCIrTG4sSU5TRVJURUQ6XCJpbnNlcnRlZFwiK0xuLENMSUNLOlwiY2xpY2tcIitMbixGT0NVU0lOOlwiZm9jdXNpblwiK0xuLEZPQ1VTT1VUOlwiZm9jdXNvdXRcIitMbixNT1VTRUVOVEVSOlwibW91c2VlbnRlclwiK0xuLE1PVVNFTEVBVkU6XCJtb3VzZWxlYXZlXCIrTG59LEtuPWZ1bmN0aW9uKHQpe3ZhciBlLG47ZnVuY3Rpb24gaSgpe3JldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31uPXQsKGU9aSkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUobi5wcm90b3R5cGUpLChlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lKS5fX3Byb3RvX189bjt2YXIgcj1pLnByb3RvdHlwZTtyZXR1cm4gci5pc1dpdGhDb250ZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0VGl0bGUoKXx8dGhpcy5fZ2V0Q29udGVudCgpfSxyLmFkZEF0dGFjaG1lbnRDbGFzcz1mdW5jdGlvbih0KXtPbih0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoeG4rXCItXCIrdCl9LHIuZ2V0VGlwRWxlbWVudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRpcD10aGlzLnRpcHx8T24odGhpcy5jb25maWcudGVtcGxhdGUpWzBdLHRoaXMudGlwfSxyLnNldENvbnRlbnQ9ZnVuY3Rpb24oKXt2YXIgdD1Pbih0aGlzLmdldFRpcEVsZW1lbnQoKSk7dGhpcy5zZXRFbGVtZW50Q29udGVudCh0LmZpbmQoRm4pLHRoaXMuZ2V0VGl0bGUoKSk7dmFyIGU9dGhpcy5fZ2V0Q29udGVudCgpO1wiZnVuY3Rpb25cIj09dHlwZW9mIGUmJihlPWUuY2FsbCh0aGlzLmVsZW1lbnQpKSx0aGlzLnNldEVsZW1lbnRDb250ZW50KHQuZmluZChVbiksZSksdC5yZW1vdmVDbGFzcyhIbitcIiBcIitXbil9LHIuX2dldENvbnRlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtY29udGVudFwiKXx8dGhpcy5jb25maWcuY29udGVudH0sci5fY2xlYW5UaXBDbGFzcz1mdW5jdGlvbigpe3ZhciB0PU9uKHRoaXMuZ2V0VGlwRWxlbWVudCgpKSxlPXQuYXR0cihcImNsYXNzXCIpLm1hdGNoKGpuKTtudWxsIT09ZSYmMDxlLmxlbmd0aCYmdC5yZW1vdmVDbGFzcyhlLmpvaW4oXCJcIikpfSxpLl9qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PU9uKHRoaXMpLmRhdGEoa24pLGU9XCJvYmplY3RcIj09dHlwZW9mIG4/bjpudWxsO2lmKCh0fHwhL2Rlc3Ryb3l8aGlkZS8udGVzdChuKSkmJih0fHwodD1uZXcgaSh0aGlzLGUpLE9uKHRoaXMpLmRhdGEoa24sdCkpLFwic3RyaW5nXCI9PXR5cGVvZiBuKSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHRbbl0pdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJytuKydcIicpO3Rbbl0oKX19KX0scyhpLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjEuMVwifX0se2tleTpcIkRlZmF1bHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTW59fSx7a2V5OlwiTkFNRVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBObn19LHtrZXk6XCJEQVRBX0tFWVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBrbn19LHtrZXk6XCJFdmVudFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBCbn19LHtrZXk6XCJFVkVOVF9LRVlcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTG59fSx7a2V5OlwiRGVmYXVsdFR5cGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gUm59fV0pLGl9KHdpKSxPbi5mbltObl09S24uX2pRdWVyeUludGVyZmFjZSxPbi5mbltObl0uQ29uc3RydWN0b3I9S24sT24uZm5bTm5dLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gT24uZm5bTm5dPVBuLEtuLl9qUXVlcnlJbnRlcmZhY2V9LEtuKSxEaT0oUW49XCJzY3JvbGxzcHlcIixHbj1cIi5cIisoWW49XCJicy5zY3JvbGxzcHlcIikscW49KFZuPWUpLmZuW1FuXSx6bj17b2Zmc2V0OjEwLG1ldGhvZDpcImF1dG9cIix0YXJnZXQ6XCJcIn0sWG49e29mZnNldDpcIm51bWJlclwiLG1ldGhvZDpcInN0cmluZ1wiLHRhcmdldDpcIihzdHJpbmd8ZWxlbWVudClcIn0sSm49e0FDVElWQVRFOlwiYWN0aXZhdGVcIitHbixTQ1JPTEw6XCJzY3JvbGxcIitHbixMT0FEX0RBVEFfQVBJOlwibG9hZFwiK0duK1wiLmRhdGEtYXBpXCJ9LFpuPVwiZHJvcGRvd24taXRlbVwiLCRuPVwiYWN0aXZlXCIsdGk9e0RBVEFfU1BZOidbZGF0YS1zcHk9XCJzY3JvbGxcIl0nLEFDVElWRTpcIi5hY3RpdmVcIixOQVZfTElTVF9HUk9VUDpcIi5uYXYsIC5saXN0LWdyb3VwXCIsTkFWX0xJTktTOlwiLm5hdi1saW5rXCIsTkFWX0lURU1TOlwiLm5hdi1pdGVtXCIsTElTVF9JVEVNUzpcIi5saXN0LWdyb3VwLWl0ZW1cIixEUk9QRE9XTjpcIi5kcm9wZG93blwiLERST1BET1dOX0lURU1TOlwiLmRyb3Bkb3duLWl0ZW1cIixEUk9QRE9XTl9UT0dHTEU6XCIuZHJvcGRvd24tdG9nZ2xlXCJ9LGVpPVwib2Zmc2V0XCIsbmk9XCJwb3NpdGlvblwiLGlpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbih0LGUpe3ZhciBuPXRoaXM7dGhpcy5fZWxlbWVudD10LHRoaXMuX3Njcm9sbEVsZW1lbnQ9XCJCT0RZXCI9PT10LnRhZ05hbWU/d2luZG93OnQsdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhlKSx0aGlzLl9zZWxlY3Rvcj10aGlzLl9jb25maWcudGFyZ2V0K1wiIFwiK3RpLk5BVl9MSU5LUytcIixcIit0aGlzLl9jb25maWcudGFyZ2V0K1wiIFwiK3RpLkxJU1RfSVRFTVMrXCIsXCIrdGhpcy5fY29uZmlnLnRhcmdldCtcIiBcIit0aS5EUk9QRE9XTl9JVEVNUyx0aGlzLl9vZmZzZXRzPVtdLHRoaXMuX3RhcmdldHM9W10sdGhpcy5fYWN0aXZlVGFyZ2V0PW51bGwsdGhpcy5fc2Nyb2xsSGVpZ2h0PTAsVm4odGhpcy5fc2Nyb2xsRWxlbWVudCkub24oSm4uU0NST0xMLGZ1bmN0aW9uKHQpe3JldHVybiBuLl9wcm9jZXNzKHQpfSksdGhpcy5yZWZyZXNoKCksdGhpcy5fcHJvY2VzcygpfXZhciB0PW4ucHJvdG90eXBlO3JldHVybiB0LnJlZnJlc2g9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9dGhpcy5fc2Nyb2xsRWxlbWVudD09PXRoaXMuX3Njcm9sbEVsZW1lbnQud2luZG93P2VpOm5pLHI9XCJhdXRvXCI9PT10aGlzLl9jb25maWcubWV0aG9kP3Q6dGhpcy5fY29uZmlnLm1ldGhvZCxvPXI9PT1uaT90aGlzLl9nZXRTY3JvbGxUb3AoKTowO3RoaXMuX29mZnNldHM9W10sdGhpcy5fdGFyZ2V0cz1bXSx0aGlzLl9zY3JvbGxIZWlnaHQ9dGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KCksVm4ubWFrZUFycmF5KFZuKHRoaXMuX3NlbGVjdG9yKSkubWFwKGZ1bmN0aW9uKHQpe3ZhciBlLG49Z3QuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0KTtpZihuJiYoZT1WbihuKVswXSksZSl7dmFyIGk9ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtpZihpLndpZHRofHxpLmhlaWdodClyZXR1cm5bVm4oZSlbcl0oKS50b3ArbyxuXX1yZXR1cm4gbnVsbH0pLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdH0pLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gdFswXS1lWzBdfSkuZm9yRWFjaChmdW5jdGlvbih0KXtlLl9vZmZzZXRzLnB1c2godFswXSksZS5fdGFyZ2V0cy5wdXNoKHRbMV0pfSl9LHQuZGlzcG9zZT1mdW5jdGlvbigpe1ZuLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCxZbiksVm4odGhpcy5fc2Nyb2xsRWxlbWVudCkub2ZmKEduKSx0aGlzLl9lbGVtZW50PW51bGwsdGhpcy5fc2Nyb2xsRWxlbWVudD1udWxsLHRoaXMuX2NvbmZpZz1udWxsLHRoaXMuX3NlbGVjdG9yPW51bGwsdGhpcy5fb2Zmc2V0cz1udWxsLHRoaXMuX3RhcmdldHM9bnVsbCx0aGlzLl9hY3RpdmVUYXJnZXQ9bnVsbCx0aGlzLl9zY3JvbGxIZWlnaHQ9bnVsbH0sdC5fZ2V0Q29uZmlnPWZ1bmN0aW9uKHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZih0PWMoe30sem4sXCJvYmplY3RcIj09dHlwZW9mIHQmJnQ/dDp7fSkpLnRhcmdldCl7dmFyIGU9Vm4odC50YXJnZXQpLmF0dHIoXCJpZFwiKTtlfHwoZT1ndC5nZXRVSUQoUW4pLFZuKHQudGFyZ2V0KS5hdHRyKFwiaWRcIixlKSksdC50YXJnZXQ9XCIjXCIrZX1yZXR1cm4gZ3QudHlwZUNoZWNrQ29uZmlnKFFuLHQsWG4pLHR9LHQuX2dldFNjcm9sbFRvcD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50PT09d2luZG93P3RoaXMuX3Njcm9sbEVsZW1lbnQucGFnZVlPZmZzZXQ6dGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3B9LHQuX2dldFNjcm9sbEhlaWdodD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbEhlaWdodHx8TWF0aC5tYXgoZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCl9LHQuX2dldE9mZnNldEhlaWdodD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50PT09d2luZG93P3dpbmRvdy5pbm5lckhlaWdodDp0aGlzLl9zY3JvbGxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodH0sdC5fcHJvY2Vzcz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2dldFNjcm9sbFRvcCgpK3RoaXMuX2NvbmZpZy5vZmZzZXQsZT10aGlzLl9nZXRTY3JvbGxIZWlnaHQoKSxuPXRoaXMuX2NvbmZpZy5vZmZzZXQrZS10aGlzLl9nZXRPZmZzZXRIZWlnaHQoKTtpZih0aGlzLl9zY3JvbGxIZWlnaHQhPT1lJiZ0aGlzLnJlZnJlc2goKSxuPD10KXt2YXIgaT10aGlzLl90YXJnZXRzW3RoaXMuX3RhcmdldHMubGVuZ3RoLTFdO3RoaXMuX2FjdGl2ZVRhcmdldCE9PWkmJnRoaXMuX2FjdGl2YXRlKGkpfWVsc2V7aWYodGhpcy5fYWN0aXZlVGFyZ2V0JiZ0PHRoaXMuX29mZnNldHNbMF0mJjA8dGhpcy5fb2Zmc2V0c1swXSlyZXR1cm4gdGhpcy5fYWN0aXZlVGFyZ2V0PW51bGwsdm9pZCB0aGlzLl9jbGVhcigpO2Zvcih2YXIgcj10aGlzLl9vZmZzZXRzLmxlbmd0aDtyLS07KXt0aGlzLl9hY3RpdmVUYXJnZXQhPT10aGlzLl90YXJnZXRzW3JdJiZ0Pj10aGlzLl9vZmZzZXRzW3JdJiYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHRoaXMuX29mZnNldHNbcisxXXx8dDx0aGlzLl9vZmZzZXRzW3IrMV0pJiZ0aGlzLl9hY3RpdmF0ZSh0aGlzLl90YXJnZXRzW3JdKX19fSx0Ll9hY3RpdmF0ZT1mdW5jdGlvbihlKXt0aGlzLl9hY3RpdmVUYXJnZXQ9ZSx0aGlzLl9jbGVhcigpO3ZhciB0PXRoaXMuX3NlbGVjdG9yLnNwbGl0KFwiLFwiKTt0PXQubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0KydbZGF0YS10YXJnZXQ9XCInK2UrJ1wiXSwnK3QrJ1tocmVmPVwiJytlKydcIl0nfSk7dmFyIG49Vm4odC5qb2luKFwiLFwiKSk7bi5oYXNDbGFzcyhabik/KG4uY2xvc2VzdCh0aS5EUk9QRE9XTikuZmluZCh0aS5EUk9QRE9XTl9UT0dHTEUpLmFkZENsYXNzKCRuKSxuLmFkZENsYXNzKCRuKSk6KG4uYWRkQ2xhc3MoJG4pLG4ucGFyZW50cyh0aS5OQVZfTElTVF9HUk9VUCkucHJldih0aS5OQVZfTElOS1MrXCIsIFwiK3RpLkxJU1RfSVRFTVMpLmFkZENsYXNzKCRuKSxuLnBhcmVudHModGkuTkFWX0xJU1RfR1JPVVApLnByZXYodGkuTkFWX0lURU1TKS5jaGlsZHJlbih0aS5OQVZfTElOS1MpLmFkZENsYXNzKCRuKSksVm4odGhpcy5fc2Nyb2xsRWxlbWVudCkudHJpZ2dlcihKbi5BQ1RJVkFURSx7cmVsYXRlZFRhcmdldDplfSl9LHQuX2NsZWFyPWZ1bmN0aW9uKCl7Vm4odGhpcy5fc2VsZWN0b3IpLmZpbHRlcih0aS5BQ1RJVkUpLnJlbW92ZUNsYXNzKCRuKX0sbi5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1Wbih0aGlzKS5kYXRhKFluKTtpZih0fHwodD1uZXcgbih0aGlzLFwib2JqZWN0XCI9PXR5cGVvZiBlJiZlKSxWbih0aGlzKS5kYXRhKFluLHQpKSxcInN0cmluZ1wiPT10eXBlb2YgZSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHRbZV0pdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJytlKydcIicpO3RbZV0oKX19KX0scyhuLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjEuMVwifX0se2tleTpcIkRlZmF1bHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gem59fV0pLG59KCksVm4od2luZG93KS5vbihKbi5MT0FEX0RBVEFfQVBJLGZ1bmN0aW9uKCl7Zm9yKHZhciB0PVZuLm1ha2VBcnJheShWbih0aS5EQVRBX1NQWSkpLGU9dC5sZW5ndGg7ZS0tOyl7dmFyIG49Vm4odFtlXSk7aWkuX2pRdWVyeUludGVyZmFjZS5jYWxsKG4sbi5kYXRhKCkpfX0pLFZuLmZuW1FuXT1paS5falF1ZXJ5SW50ZXJmYWNlLFZuLmZuW1FuXS5Db25zdHJ1Y3Rvcj1paSxWbi5mbltRbl0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBWbi5mbltRbl09cW4saWkuX2pRdWVyeUludGVyZmFjZX0saWkpLEFpPShzaT1cIi5cIisob2k9XCJicy50YWJcIiksYWk9KHJpPWUpLmZuLnRhYixsaT17SElERTpcImhpZGVcIitzaSxISURERU46XCJoaWRkZW5cIitzaSxTSE9XOlwic2hvd1wiK3NpLFNIT1dOOlwic2hvd25cIitzaSxDTElDS19EQVRBX0FQSTpcImNsaWNrXCIrc2krXCIuZGF0YS1hcGlcIn0sY2k9XCJkcm9wZG93bi1tZW51XCIsZmk9XCJhY3RpdmVcIixoaT1cImRpc2FibGVkXCIsdWk9XCJmYWRlXCIsZGk9XCJzaG93XCIscGk9XCIuZHJvcGRvd25cIixnaT1cIi5uYXYsIC5saXN0LWdyb3VwXCIsbWk9XCIuYWN0aXZlXCIsX2k9XCI+IGxpID4gLmFjdGl2ZVwiLHZpPSdbZGF0YS10b2dnbGU9XCJ0YWJcIl0sIFtkYXRhLXRvZ2dsZT1cInBpbGxcIl0sIFtkYXRhLXRvZ2dsZT1cImxpc3RcIl0nLEVpPVwiLmRyb3Bkb3duLXRvZ2dsZVwiLHlpPVwiPiAuZHJvcGRvd24tbWVudSAuYWN0aXZlXCIsYmk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBpKHQpe3RoaXMuX2VsZW1lbnQ9dH12YXIgdD1pLnByb3RvdHlwZTtyZXR1cm4gdC5zaG93PWZ1bmN0aW9uKCl7dmFyIG49dGhpcztpZighKHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSYmdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUmJnJpKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKGZpKXx8cmkodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoaGkpKSl7dmFyIHQsaSxlPXJpKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoZ2kpWzBdLHI9Z3QuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtpZihlKXt2YXIgbz1cIlVMXCI9PT1lLm5vZGVOYW1lP19pOm1pO2k9KGk9cmkubWFrZUFycmF5KHJpKGUpLmZpbmQobykpKVtpLmxlbmd0aC0xXX12YXIgcz1yaS5FdmVudChsaS5ISURFLHtyZWxhdGVkVGFyZ2V0OnRoaXMuX2VsZW1lbnR9KSxhPXJpLkV2ZW50KGxpLlNIT1cse3JlbGF0ZWRUYXJnZXQ6aX0pO2lmKGkmJnJpKGkpLnRyaWdnZXIocykscmkodGhpcy5fZWxlbWVudCkudHJpZ2dlcihhKSwhYS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSYmIXMuaXNEZWZhdWx0UHJldmVudGVkKCkpe3ImJih0PXJpKHIpWzBdKSx0aGlzLl9hY3RpdmF0ZSh0aGlzLl9lbGVtZW50LGUpO3ZhciBsPWZ1bmN0aW9uKCl7dmFyIHQ9cmkuRXZlbnQobGkuSElEREVOLHtyZWxhdGVkVGFyZ2V0Om4uX2VsZW1lbnR9KSxlPXJpLkV2ZW50KGxpLlNIT1dOLHtyZWxhdGVkVGFyZ2V0Oml9KTtyaShpKS50cmlnZ2VyKHQpLHJpKG4uX2VsZW1lbnQpLnRyaWdnZXIoZSl9O3Q/dGhpcy5fYWN0aXZhdGUodCx0LnBhcmVudE5vZGUsbCk6bCgpfX19LHQuZGlzcG9zZT1mdW5jdGlvbigpe3JpLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCxvaSksdGhpcy5fZWxlbWVudD1udWxsfSx0Ll9hY3RpdmF0ZT1mdW5jdGlvbih0LGUsbil7dmFyIGk9dGhpcyxyPShcIlVMXCI9PT1lLm5vZGVOYW1lP3JpKGUpLmZpbmQoX2kpOnJpKGUpLmNoaWxkcmVuKG1pKSlbMF0sbz1uJiZyJiZyaShyKS5oYXNDbGFzcyh1aSkscz1mdW5jdGlvbigpe3JldHVybiBpLl90cmFuc2l0aW9uQ29tcGxldGUodCxyLG4pfTtpZihyJiZvKXt2YXIgYT1ndC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChyKTtyaShyKS5vbmUoZ3QuVFJBTlNJVElPTl9FTkQscykuZW11bGF0ZVRyYW5zaXRpb25FbmQoYSl9ZWxzZSBzKCl9LHQuX3RyYW5zaXRpb25Db21wbGV0ZT1mdW5jdGlvbih0LGUsbil7aWYoZSl7cmkoZSkucmVtb3ZlQ2xhc3MoZGkrXCIgXCIrZmkpO3ZhciBpPXJpKGUucGFyZW50Tm9kZSkuZmluZCh5aSlbMF07aSYmcmkoaSkucmVtb3ZlQ2xhc3MoZmkpLFwidGFiXCI9PT1lLmdldEF0dHJpYnV0ZShcInJvbGVcIikmJmUuc2V0QXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiLCExKX1pZihyaSh0KS5hZGRDbGFzcyhmaSksXCJ0YWJcIj09PXQuZ2V0QXR0cmlidXRlKFwicm9sZVwiKSYmdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIsITApLGd0LnJlZmxvdyh0KSxyaSh0KS5hZGRDbGFzcyhkaSksdC5wYXJlbnROb2RlJiZyaSh0LnBhcmVudE5vZGUpLmhhc0NsYXNzKGNpKSl7dmFyIHI9cmkodCkuY2xvc2VzdChwaSlbMF07ciYmcmkocikuZmluZChFaSkuYWRkQ2xhc3MoZmkpLHQuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCEwKX1uJiZuKCl9LGkuX2pRdWVyeUludGVyZmFjZT1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9cmkodGhpcyksZT10LmRhdGEob2kpO2lmKGV8fChlPW5ldyBpKHRoaXMpLHQuZGF0YShvaSxlKSksXCJzdHJpbmdcIj09dHlwZW9mIG4pe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlW25dKXRocm93IG5ldyBUeXBlRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicrbisnXCInKTtlW25dKCl9fSl9LHMoaSxudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNC4xLjFcIn19XSksaX0oKSxyaShkb2N1bWVudCkub24obGkuQ0xJQ0tfREFUQV9BUEksdmksZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLGJpLl9qUXVlcnlJbnRlcmZhY2UuY2FsbChyaSh0aGlzKSxcInNob3dcIil9KSxyaS5mbi50YWI9YmkuX2pRdWVyeUludGVyZmFjZSxyaS5mbi50YWIuQ29uc3RydWN0b3I9YmkscmkuZm4udGFiLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gcmkuZm4udGFiPWFpLGJpLl9qUXVlcnlJbnRlcmZhY2V9LGJpKTshZnVuY3Rpb24odCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkJvb3RzdHJhcCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgalF1ZXJ5LiBqUXVlcnkgbXVzdCBiZSBpbmNsdWRlZCBiZWZvcmUgQm9vdHN0cmFwJ3MgSmF2YVNjcmlwdC5cIik7dmFyIGU9dC5mbi5qcXVlcnkuc3BsaXQoXCIgXCIpWzBdLnNwbGl0KFwiLlwiKTtpZihlWzBdPDImJmVbMV08OXx8MT09PWVbMF0mJjk9PT1lWzFdJiZlWzJdPDF8fDQ8PWVbMF0pdGhyb3cgbmV3IEVycm9yKFwiQm9vdHN0cmFwJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBhdCBsZWFzdCBqUXVlcnkgdjEuOS4xIGJ1dCBsZXNzIHRoYW4gdjQuMC4wXCIpfShlKSx0LlV0aWw9Z3QsdC5BbGVydD1tdCx0LkJ1dHRvbj1fdCx0LkNhcm91c2VsPXZ0LHQuQ29sbGFwc2U9RXQsdC5Ecm9wZG93bj1UaSx0Lk1vZGFsPUNpLHQuUG9wb3Zlcj1JaSx0LlNjcm9sbHNweT1EaSx0LlRhYj1BaSx0LlRvb2x0aXA9d2ksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9KTtcclxuIiwiLyohIGpRdWVyeSB2My4zLjEgfCAoYykgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIHwganF1ZXJ5Lm9yZy9saWNlbnNlICovXHJcbiFmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO1wib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lLmRvY3VtZW50P3QoZSwhMCk6ZnVuY3Rpb24oZSl7aWYoIWUuZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiKTtyZXR1cm4gdChlKX06dChlKX0oXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6dGhpcyxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO3ZhciBuPVtdLHI9ZS5kb2N1bWVudCxpPU9iamVjdC5nZXRQcm90b3R5cGVPZixvPW4uc2xpY2UsYT1uLmNvbmNhdCxzPW4ucHVzaCx1PW4uaW5kZXhPZixsPXt9LGM9bC50b1N0cmluZyxmPWwuaGFzT3duUHJvcGVydHkscD1mLnRvU3RyaW5nLGQ9cC5jYWxsKE9iamVjdCksaD17fSxnPWZ1bmN0aW9uIGUodCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmXCJudW1iZXJcIiE9dHlwZW9mIHQubm9kZVR5cGV9LHk9ZnVuY3Rpb24gZSh0KXtyZXR1cm4gbnVsbCE9dCYmdD09PXQud2luZG93fSx2PXt0eXBlOiEwLHNyYzohMCxub01vZHVsZTohMH07ZnVuY3Rpb24gbShlLHQsbil7dmFyIGksbz0odD10fHxyKS5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO2lmKG8udGV4dD1lLG4pZm9yKGkgaW4gdiluW2ldJiYob1tpXT1uW2ldKTt0LmhlYWQuYXBwZW5kQ2hpbGQobykucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKX1mdW5jdGlvbiB4KGUpe3JldHVybiBudWxsPT1lP2UrXCJcIjpcIm9iamVjdFwiPT10eXBlb2YgZXx8XCJmdW5jdGlvblwiPT10eXBlb2YgZT9sW2MuY2FsbChlKV18fFwib2JqZWN0XCI6dHlwZW9mIGV9dmFyIGI9XCIzLjMuMVwiLHc9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IHcuZm4uaW5pdChlLHQpfSxUPS9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZzt3LmZuPXcucHJvdG90eXBlPXtqcXVlcnk6XCIzLjMuMVwiLGNvbnN0cnVjdG9yOncsbGVuZ3RoOjAsdG9BcnJheTpmdW5jdGlvbigpe3JldHVybiBvLmNhbGwodGhpcyl9LGdldDpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9vLmNhbGwodGhpcyk6ZTwwP3RoaXNbZSt0aGlzLmxlbmd0aF06dGhpc1tlXX0scHVzaFN0YWNrOmZ1bmN0aW9uKGUpe3ZhciB0PXcubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLGUpO3JldHVybiB0LnByZXZPYmplY3Q9dGhpcyx0fSxlYWNoOmZ1bmN0aW9uKGUpe3JldHVybiB3LmVhY2godGhpcyxlKX0sbWFwOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnB1c2hTdGFjayh3Lm1hcCh0aGlzLGZ1bmN0aW9uKHQsbil7cmV0dXJuIGUuY2FsbCh0LG4sdCl9KSl9LHNsaWNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKG8uYXBwbHkodGhpcyxhcmd1bWVudHMpKX0sZmlyc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgwKX0sbGFzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKC0xKX0sZXE6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5sZW5ndGgsbj0rZSsoZTwwP3Q6MCk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKG4+PTAmJm48dD9bdGhpc1tuXV06W10pfSxlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcmV2T2JqZWN0fHx0aGlzLmNvbnN0cnVjdG9yKCl9LHB1c2g6cyxzb3J0Om4uc29ydCxzcGxpY2U6bi5zcGxpY2V9LHcuZXh0ZW5kPXcuZm4uZXh0ZW5kPWZ1bmN0aW9uKCl7dmFyIGUsdCxuLHIsaSxvLGE9YXJndW1lbnRzWzBdfHx7fSxzPTEsdT1hcmd1bWVudHMubGVuZ3RoLGw9ITE7Zm9yKFwiYm9vbGVhblwiPT10eXBlb2YgYSYmKGw9YSxhPWFyZ3VtZW50c1tzXXx8e30scysrKSxcIm9iamVjdFwiPT10eXBlb2YgYXx8ZyhhKXx8KGE9e30pLHM9PT11JiYoYT10aGlzLHMtLSk7czx1O3MrKylpZihudWxsIT0oZT1hcmd1bWVudHNbc10pKWZvcih0IGluIGUpbj1hW3RdLGEhPT0ocj1lW3RdKSYmKGwmJnImJih3LmlzUGxhaW5PYmplY3Qocil8fChpPUFycmF5LmlzQXJyYXkocikpKT8oaT8oaT0hMSxvPW4mJkFycmF5LmlzQXJyYXkobik/bjpbXSk6bz1uJiZ3LmlzUGxhaW5PYmplY3Qobik/bjp7fSxhW3RdPXcuZXh0ZW5kKGwsbyxyKSk6dm9pZCAwIT09ciYmKGFbdF09cikpO3JldHVybiBhfSx3LmV4dGVuZCh7ZXhwYW5kbzpcImpRdWVyeVwiKyhcIjMuMy4xXCIrTWF0aC5yYW5kb20oKSkucmVwbGFjZSgvXFxEL2csXCJcIiksaXNSZWFkeTohMCxlcnJvcjpmdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoZSl9LG5vb3A6ZnVuY3Rpb24oKXt9LGlzUGxhaW5PYmplY3Q6ZnVuY3Rpb24oZSl7dmFyIHQsbjtyZXR1cm4hKCFlfHxcIltvYmplY3QgT2JqZWN0XVwiIT09Yy5jYWxsKGUpKSYmKCEodD1pKGUpKXx8XCJmdW5jdGlvblwiPT10eXBlb2Yobj1mLmNhbGwodCxcImNvbnN0cnVjdG9yXCIpJiZ0LmNvbnN0cnVjdG9yKSYmcC5jYWxsKG4pPT09ZCl9LGlzRW1wdHlPYmplY3Q6ZnVuY3Rpb24oZSl7dmFyIHQ7Zm9yKHQgaW4gZSlyZXR1cm4hMTtyZXR1cm4hMH0sZ2xvYmFsRXZhbDpmdW5jdGlvbihlKXttKGUpfSxlYWNoOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj0wO2lmKEMoZSkpe2ZvcihuPWUubGVuZ3RoO3I8bjtyKyspaWYoITE9PT10LmNhbGwoZVtyXSxyLGVbcl0pKWJyZWFrfWVsc2UgZm9yKHIgaW4gZSlpZighMT09PXQuY2FsbChlW3JdLHIsZVtyXSkpYnJlYWs7cmV0dXJuIGV9LHRyaW06ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWU/XCJcIjooZStcIlwiKS5yZXBsYWNlKFQsXCJcIil9LG1ha2VBcnJheTpmdW5jdGlvbihlLHQpe3ZhciBuPXR8fFtdO3JldHVybiBudWxsIT1lJiYoQyhPYmplY3QoZSkpP3cubWVyZ2UobixcInN0cmluZ1wiPT10eXBlb2YgZT9bZV06ZSk6cy5jYWxsKG4sZSkpLG59LGluQXJyYXk6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBudWxsPT10Py0xOnUuY2FsbCh0LGUsbil9LG1lcmdlOmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPSt0Lmxlbmd0aCxyPTAsaT1lLmxlbmd0aDtyPG47cisrKWVbaSsrXT10W3JdO3JldHVybiBlLmxlbmd0aD1pLGV9LGdyZXA6ZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcixpPVtdLG89MCxhPWUubGVuZ3RoLHM9IW47bzxhO28rKykocj0hdChlW29dLG8pKSE9PXMmJmkucHVzaChlW29dKTtyZXR1cm4gaX0sbWFwOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89MCxzPVtdO2lmKEMoZSkpZm9yKHI9ZS5sZW5ndGg7bzxyO28rKyludWxsIT0oaT10KGVbb10sbyxuKSkmJnMucHVzaChpKTtlbHNlIGZvcihvIGluIGUpbnVsbCE9KGk9dChlW29dLG8sbikpJiZzLnB1c2goaSk7cmV0dXJuIGEuYXBwbHkoW10scyl9LGd1aWQ6MSxzdXBwb3J0Omh9KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJih3LmZuW1N5bWJvbC5pdGVyYXRvcl09bltTeW1ib2wuaXRlcmF0b3JdKSx3LmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihlLHQpe2xbXCJbb2JqZWN0IFwiK3QrXCJdXCJdPXQudG9Mb3dlckNhc2UoKX0pO2Z1bmN0aW9uIEMoZSl7dmFyIHQ9ISFlJiZcImxlbmd0aFwiaW4gZSYmZS5sZW5ndGgsbj14KGUpO3JldHVybiFnKGUpJiYheShlKSYmKFwiYXJyYXlcIj09PW58fDA9PT10fHxcIm51bWJlclwiPT10eXBlb2YgdCYmdD4wJiZ0LTEgaW4gZSl9dmFyIEU9ZnVuY3Rpb24oZSl7dmFyIHQsbixyLGksbyxhLHMsdSxsLGMsZixwLGQsaCxnLHksdixtLHgsYj1cInNpenpsZVwiKzEqbmV3IERhdGUsdz1lLmRvY3VtZW50LFQ9MCxDPTAsRT1hZSgpLGs9YWUoKSxTPWFlKCksRD1mdW5jdGlvbihlLHQpe3JldHVybiBlPT09dCYmKGY9ITApLDB9LE49e30uaGFzT3duUHJvcGVydHksQT1bXSxqPUEucG9wLHE9QS5wdXNoLEw9QS5wdXNoLEg9QS5zbGljZSxPPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKWlmKGVbbl09PT10KXJldHVybiBuO3JldHVybi0xfSxQPVwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixNPVwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixSPVwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixJPVwiXFxcXFtcIitNK1wiKihcIitSK1wiKSg/OlwiK00rXCIqKFsqXiR8IX5dPz0pXCIrTStcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiK1IrXCIpKXwpXCIrTStcIipcXFxcXVwiLFc9XCI6KFwiK1IrXCIpKD86XFxcXCgoKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8KCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiK0krXCIpKil8LiopXFxcXCl8KVwiLCQ9bmV3IFJlZ0V4cChNK1wiK1wiLFwiZ1wiKSxCPW5ldyBSZWdFeHAoXCJeXCIrTStcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIrTStcIiskXCIsXCJnXCIpLEY9bmV3IFJlZ0V4cChcIl5cIitNK1wiKixcIitNK1wiKlwiKSxfPW5ldyBSZWdFeHAoXCJeXCIrTStcIiooWz4rfl18XCIrTStcIilcIitNK1wiKlwiKSx6PW5ldyBSZWdFeHAoXCI9XCIrTStcIiooW15cXFxcXSdcXFwiXSo/KVwiK00rXCIqXFxcXF1cIixcImdcIiksWD1uZXcgUmVnRXhwKFcpLFU9bmV3IFJlZ0V4cChcIl5cIitSK1wiJFwiKSxWPXtJRDpuZXcgUmVnRXhwKFwiXiMoXCIrUitcIilcIiksQ0xBU1M6bmV3IFJlZ0V4cChcIl5cXFxcLihcIitSK1wiKVwiKSxUQUc6bmV3IFJlZ0V4cChcIl4oXCIrUitcInxbKl0pXCIpLEFUVFI6bmV3IFJlZ0V4cChcIl5cIitJKSxQU0VVRE86bmV3IFJlZ0V4cChcIl5cIitXKSxDSElMRDpuZXcgUmVnRXhwKFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIitNK1wiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIrTStcIiooPzooWystXXwpXCIrTStcIiooXFxcXGQrKXwpKVwiK00rXCIqXFxcXCl8KVwiLFwiaVwiKSxib29sOm5ldyBSZWdFeHAoXCJeKD86XCIrUCtcIikkXCIsXCJpXCIpLG5lZWRzQ29udGV4dDpuZXcgUmVnRXhwKFwiXlwiK00rXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiK00rXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiK00rXCIqXFxcXCl8KSg/PVteLV18JClcIixcImlcIil9LEc9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxZPS9eaFxcZCQvaSxRPS9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sSj0vXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxLPS9bK35dLyxaPW5ldyBSZWdFeHAoXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIitNK1wiP3woXCIrTStcIil8LilcIixcImlnXCIpLGVlPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1cIjB4XCIrdC02NTUzNjtyZXR1cm4gciE9PXJ8fG4/dDpyPDA/U3RyaW5nLmZyb21DaGFyQ29kZShyKzY1NTM2KTpTdHJpbmcuZnJvbUNoYXJDb2RlKHI+PjEwfDU1Mjk2LDEwMjMmcnw1NjMyMCl9LHRlPS8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLG5lPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ/XCJcXDBcIj09PWU/XCJcXHVmZmZkXCI6ZS5zbGljZSgwLC0xKStcIlxcXFxcIitlLmNoYXJDb2RlQXQoZS5sZW5ndGgtMSkudG9TdHJpbmcoMTYpK1wiIFwiOlwiXFxcXFwiK2V9LHJlPWZ1bmN0aW9uKCl7cCgpfSxpZT1tZShmdW5jdGlvbihlKXtyZXR1cm4hMD09PWUuZGlzYWJsZWQmJihcImZvcm1cImluIGV8fFwibGFiZWxcImluIGUpfSx7ZGlyOlwicGFyZW50Tm9kZVwiLG5leHQ6XCJsZWdlbmRcIn0pO3RyeXtMLmFwcGx5KEE9SC5jYWxsKHcuY2hpbGROb2Rlcyksdy5jaGlsZE5vZGVzKSxBW3cuY2hpbGROb2Rlcy5sZW5ndGhdLm5vZGVUeXBlfWNhdGNoKGUpe0w9e2FwcGx5OkEubGVuZ3RoP2Z1bmN0aW9uKGUsdCl7cS5hcHBseShlLEguY2FsbCh0KSl9OmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5sZW5ndGgscj0wO3doaWxlKGVbbisrXT10W3IrK10pO2UubGVuZ3RoPW4tMX19fWZ1bmN0aW9uIG9lKGUsdCxyLGkpe3ZhciBvLHMsbCxjLGYsaCx2LG09dCYmdC5vd25lckRvY3VtZW50LFQ9dD90Lm5vZGVUeXBlOjk7aWYocj1yfHxbXSxcInN0cmluZ1wiIT10eXBlb2YgZXx8IWV8fDEhPT1UJiY5IT09VCYmMTEhPT1UKXJldHVybiByO2lmKCFpJiYoKHQ/dC5vd25lckRvY3VtZW50fHx0OncpIT09ZCYmcCh0KSx0PXR8fGQsZykpe2lmKDExIT09VCYmKGY9Si5leGVjKGUpKSlpZihvPWZbMV0pe2lmKDk9PT1UKXtpZighKGw9dC5nZXRFbGVtZW50QnlJZChvKSkpcmV0dXJuIHI7aWYobC5pZD09PW8pcmV0dXJuIHIucHVzaChsKSxyfWVsc2UgaWYobSYmKGw9bS5nZXRFbGVtZW50QnlJZChvKSkmJngodCxsKSYmbC5pZD09PW8pcmV0dXJuIHIucHVzaChsKSxyfWVsc2V7aWYoZlsyXSlyZXR1cm4gTC5hcHBseShyLHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSkpLHI7aWYoKG89ZlszXSkmJm4uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKXJldHVybiBMLmFwcGx5KHIsdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKG8pKSxyfWlmKG4ucXNhJiYhU1tlK1wiIFwiXSYmKCF5fHwheS50ZXN0KGUpKSl7aWYoMSE9PVQpbT10LHY9ZTtlbHNlIGlmKFwib2JqZWN0XCIhPT10Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpeyhjPXQuZ2V0QXR0cmlidXRlKFwiaWRcIikpP2M9Yy5yZXBsYWNlKHRlLG5lKTp0LnNldEF0dHJpYnV0ZShcImlkXCIsYz1iKSxzPShoPWEoZSkpLmxlbmd0aDt3aGlsZShzLS0paFtzXT1cIiNcIitjK1wiIFwiK3ZlKGhbc10pO3Y9aC5qb2luKFwiLFwiKSxtPUsudGVzdChlKSYmZ2UodC5wYXJlbnROb2RlKXx8dH1pZih2KXRyeXtyZXR1cm4gTC5hcHBseShyLG0ucXVlcnlTZWxlY3RvckFsbCh2KSkscn1jYXRjaChlKXt9ZmluYWxseXtjPT09YiYmdC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKX19fXJldHVybiB1KGUucmVwbGFjZShCLFwiJDFcIiksdCxyLGkpfWZ1bmN0aW9uIGFlKCl7dmFyIGU9W107ZnVuY3Rpb24gdChuLGkpe3JldHVybiBlLnB1c2gobitcIiBcIik+ci5jYWNoZUxlbmd0aCYmZGVsZXRlIHRbZS5zaGlmdCgpXSx0W24rXCIgXCJdPWl9cmV0dXJuIHR9ZnVuY3Rpb24gc2UoZSl7cmV0dXJuIGVbYl09ITAsZX1mdW5jdGlvbiB1ZShlKXt2YXIgdD1kLmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKTt0cnl7cmV0dXJuISFlKHQpfWNhdGNoKGUpe3JldHVybiExfWZpbmFsbHl7dC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCksdD1udWxsfX1mdW5jdGlvbiBsZShlLHQpe3ZhciBuPWUuc3BsaXQoXCJ8XCIpLGk9bi5sZW5ndGg7d2hpbGUoaS0tKXIuYXR0ckhhbmRsZVtuW2ldXT10fWZ1bmN0aW9uIGNlKGUsdCl7dmFyIG49dCYmZSxyPW4mJjE9PT1lLm5vZGVUeXBlJiYxPT09dC5ub2RlVHlwZSYmZS5zb3VyY2VJbmRleC10LnNvdXJjZUluZGV4O2lmKHIpcmV0dXJuIHI7aWYobil3aGlsZShuPW4ubmV4dFNpYmxpbmcpaWYobj09PXQpcmV0dXJuLTE7cmV0dXJuIGU/MTotMX1mdW5jdGlvbiBmZShlKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuXCJpbnB1dFwiPT09dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiZ0LnR5cGU9PT1lfX1mdW5jdGlvbiBwZShlKXtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIG49dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybihcImlucHV0XCI9PT1ufHxcImJ1dHRvblwiPT09bikmJnQudHlwZT09PWV9fWZ1bmN0aW9uIGRlKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm5cImZvcm1cImluIHQ/dC5wYXJlbnROb2RlJiYhMT09PXQuZGlzYWJsZWQ/XCJsYWJlbFwiaW4gdD9cImxhYmVsXCJpbiB0LnBhcmVudE5vZGU/dC5wYXJlbnROb2RlLmRpc2FibGVkPT09ZTp0LmRpc2FibGVkPT09ZTp0LmlzRGlzYWJsZWQ9PT1lfHx0LmlzRGlzYWJsZWQhPT0hZSYmaWUodCk9PT1lOnQuZGlzYWJsZWQ9PT1lOlwibGFiZWxcImluIHQmJnQuZGlzYWJsZWQ9PT1lfX1mdW5jdGlvbiBoZShlKXtyZXR1cm4gc2UoZnVuY3Rpb24odCl7cmV0dXJuIHQ9K3Qsc2UoZnVuY3Rpb24obixyKXt2YXIgaSxvPWUoW10sbi5sZW5ndGgsdCksYT1vLmxlbmd0aDt3aGlsZShhLS0pbltpPW9bYV1dJiYobltpXT0hKHJbaV09bltpXSkpfSl9KX1mdW5jdGlvbiBnZShlKXtyZXR1cm4gZSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUmJmV9bj1vZS5zdXBwb3J0PXt9LG89b2UuaXNYTUw9ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmKGUub3duZXJEb2N1bWVudHx8ZSkuZG9jdW1lbnRFbGVtZW50O3JldHVybiEhdCYmXCJIVE1MXCIhPT10Lm5vZGVOYW1lfSxwPW9lLnNldERvY3VtZW50PWZ1bmN0aW9uKGUpe3ZhciB0LGksYT1lP2Uub3duZXJEb2N1bWVudHx8ZTp3O3JldHVybiBhIT09ZCYmOT09PWEubm9kZVR5cGUmJmEuZG9jdW1lbnRFbGVtZW50PyhkPWEsaD1kLmRvY3VtZW50RWxlbWVudCxnPSFvKGQpLHchPT1kJiYoaT1kLmRlZmF1bHRWaWV3KSYmaS50b3AhPT1pJiYoaS5hZGRFdmVudExpc3RlbmVyP2kuYWRkRXZlbnRMaXN0ZW5lcihcInVubG9hZFwiLHJlLCExKTppLmF0dGFjaEV2ZW50JiZpLmF0dGFjaEV2ZW50KFwib251bmxvYWRcIixyZSkpLG4uYXR0cmlidXRlcz11ZShmdW5jdGlvbihlKXtyZXR1cm4gZS5jbGFzc05hbWU9XCJpXCIsIWUuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpfSksbi5nZXRFbGVtZW50c0J5VGFnTmFtZT11ZShmdW5jdGlvbihlKXtyZXR1cm4gZS5hcHBlbmRDaGlsZChkLmNyZWF0ZUNvbW1lbnQoXCJcIikpLCFlLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKS5sZW5ndGh9KSxuLmdldEVsZW1lbnRzQnlDbGFzc05hbWU9US50ZXN0KGQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSksbi5nZXRCeUlkPXVlKGZ1bmN0aW9uKGUpe3JldHVybiBoLmFwcGVuZENoaWxkKGUpLmlkPWIsIWQuZ2V0RWxlbWVudHNCeU5hbWV8fCFkLmdldEVsZW1lbnRzQnlOYW1lKGIpLmxlbmd0aH0pLG4uZ2V0QnlJZD8oci5maWx0ZXIuSUQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKFosZWUpO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRBdHRyaWJ1dGUoXCJpZFwiKT09PXR9fSxyLmZpbmQuSUQ9ZnVuY3Rpb24oZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgdC5nZXRFbGVtZW50QnlJZCYmZyl7dmFyIG49dC5nZXRFbGVtZW50QnlJZChlKTtyZXR1cm4gbj9bbl06W119fSk6KHIuZmlsdGVyLklEPWZ1bmN0aW9uKGUpe3ZhciB0PWUucmVwbGFjZShaLGVlKTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUuZ2V0QXR0cmlidXRlTm9kZSYmZS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7cmV0dXJuIG4mJm4udmFsdWU9PT10fX0sci5maW5kLklEPWZ1bmN0aW9uKGUsdCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQuZ2V0RWxlbWVudEJ5SWQmJmcpe3ZhciBuLHIsaSxvPXQuZ2V0RWxlbWVudEJ5SWQoZSk7aWYobyl7aWYoKG49by5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIikpJiZuLnZhbHVlPT09ZSlyZXR1cm5bb107aT10LmdldEVsZW1lbnRzQnlOYW1lKGUpLHI9MDt3aGlsZShvPWlbcisrXSlpZigobj1vLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKSkmJm4udmFsdWU9PT1lKXJldHVybltvXX1yZXR1cm5bXX19KSxyLmZpbmQuVEFHPW4uZ2V0RWxlbWVudHNCeVRhZ05hbWU/ZnVuY3Rpb24oZSx0KXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgdC5nZXRFbGVtZW50c0J5VGFnTmFtZT90LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpOm4ucXNhP3QucXVlcnlTZWxlY3RvckFsbChlKTp2b2lkIDB9OmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1bXSxpPTAsbz10LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUpO2lmKFwiKlwiPT09ZSl7d2hpbGUobj1vW2krK10pMT09PW4ubm9kZVR5cGUmJnIucHVzaChuKTtyZXR1cm4gcn1yZXR1cm4gb30sci5maW5kLkNMQVNTPW4uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmZnVuY3Rpb24oZSx0KXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZnKXJldHVybiB0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZSl9LHY9W10seT1bXSwobi5xc2E9US50ZXN0KGQucXVlcnlTZWxlY3RvckFsbCkpJiYodWUoZnVuY3Rpb24oZSl7aC5hcHBlbmRDaGlsZChlKS5pbm5lckhUTUw9XCI8YSBpZD0nXCIrYitcIic+PC9hPjxzZWxlY3QgaWQ9J1wiK2IrXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+PG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIixlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGgmJnkucHVzaChcIlsqXiRdPVwiK00rXCIqKD86Jyd8XFxcIlxcXCIpXCIpLGUucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RofHx5LnB1c2goXCJcXFxcW1wiK00rXCIqKD86dmFsdWV8XCIrUCtcIilcIiksZS5xdWVyeVNlbGVjdG9yQWxsKFwiW2lkfj1cIitiK1wiLV1cIikubGVuZ3RofHx5LnB1c2goXCJ+PVwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGh8fHkucHVzaChcIjpjaGVja2VkXCIpLGUucXVlcnlTZWxlY3RvckFsbChcImEjXCIrYitcIisqXCIpLmxlbmd0aHx8eS5wdXNoKFwiLiMuK1srfl1cIil9KSx1ZShmdW5jdGlvbihlKXtlLmlubmVySFRNTD1cIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+PHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO3ZhciB0PWQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO3Quc2V0QXR0cmlidXRlKFwidHlwZVwiLFwiaGlkZGVuXCIpLGUuYXBwZW5kQ2hpbGQodCkuc2V0QXR0cmlidXRlKFwibmFtZVwiLFwiRFwiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGgmJnkucHVzaChcIm5hbWVcIitNK1wiKlsqXiR8IX5dPz1cIiksMiE9PWUucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCYmeS5wdXNoKFwiOmVuYWJsZWRcIixcIjpkaXNhYmxlZFwiKSxoLmFwcGVuZENoaWxkKGUpLmRpc2FibGVkPSEwLDIhPT1lLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoJiZ5LnB1c2goXCI6ZW5hYmxlZFwiLFwiOmRpc2FibGVkXCIpLGUucXVlcnlTZWxlY3RvckFsbChcIiosOnhcIikseS5wdXNoKFwiLC4qOlwiKX0pKSwobi5tYXRjaGVzU2VsZWN0b3I9US50ZXN0KG09aC5tYXRjaGVzfHxoLndlYmtpdE1hdGNoZXNTZWxlY3Rvcnx8aC5tb3pNYXRjaGVzU2VsZWN0b3J8fGgub01hdGNoZXNTZWxlY3Rvcnx8aC5tc01hdGNoZXNTZWxlY3RvcikpJiZ1ZShmdW5jdGlvbihlKXtuLmRpc2Nvbm5lY3RlZE1hdGNoPW0uY2FsbChlLFwiKlwiKSxtLmNhbGwoZSxcIltzIT0nJ106eFwiKSx2LnB1c2goXCIhPVwiLFcpfSkseT15Lmxlbmd0aCYmbmV3IFJlZ0V4cCh5LmpvaW4oXCJ8XCIpKSx2PXYubGVuZ3RoJiZuZXcgUmVnRXhwKHYuam9pbihcInxcIikpLHQ9US50ZXN0KGguY29tcGFyZURvY3VtZW50UG9zaXRpb24pLHg9dHx8US50ZXN0KGguY29udGFpbnMpP2Z1bmN0aW9uKGUsdCl7dmFyIG49OT09PWUubm9kZVR5cGU/ZS5kb2N1bWVudEVsZW1lbnQ6ZSxyPXQmJnQucGFyZW50Tm9kZTtyZXR1cm4gZT09PXJ8fCEoIXJ8fDEhPT1yLm5vZGVUeXBlfHwhKG4uY29udGFpbnM/bi5jb250YWlucyhyKTplLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uJiYxNiZlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHIpKSl9OmZ1bmN0aW9uKGUsdCl7aWYodCl3aGlsZSh0PXQucGFyZW50Tm9kZSlpZih0PT09ZSlyZXR1cm4hMDtyZXR1cm4hMX0sRD10P2Z1bmN0aW9uKGUsdCl7aWYoZT09PXQpcmV0dXJuIGY9ITAsMDt2YXIgcj0hZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbi0hdC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtyZXR1cm4gcnx8KDEmKHI9KGUub3duZXJEb2N1bWVudHx8ZSk9PT0odC5vd25lckRvY3VtZW50fHx0KT9lLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHQpOjEpfHwhbi5zb3J0RGV0YWNoZWQmJnQuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZSk9PT1yP2U9PT1kfHxlLm93bmVyRG9jdW1lbnQ9PT13JiZ4KHcsZSk/LTE6dD09PWR8fHQub3duZXJEb2N1bWVudD09PXcmJngodyx0KT8xOmM/TyhjLGUpLU8oYyx0KTowOjQmcj8tMToxKX06ZnVuY3Rpb24oZSx0KXtpZihlPT09dClyZXR1cm4gZj0hMCwwO3ZhciBuLHI9MCxpPWUucGFyZW50Tm9kZSxvPXQucGFyZW50Tm9kZSxhPVtlXSxzPVt0XTtpZighaXx8IW8pcmV0dXJuIGU9PT1kPy0xOnQ9PT1kPzE6aT8tMTpvPzE6Yz9PKGMsZSktTyhjLHQpOjA7aWYoaT09PW8pcmV0dXJuIGNlKGUsdCk7bj1lO3doaWxlKG49bi5wYXJlbnROb2RlKWEudW5zaGlmdChuKTtuPXQ7d2hpbGUobj1uLnBhcmVudE5vZGUpcy51bnNoaWZ0KG4pO3doaWxlKGFbcl09PT1zW3JdKXIrKztyZXR1cm4gcj9jZShhW3JdLHNbcl0pOmFbcl09PT13Py0xOnNbcl09PT13PzE6MH0sZCk6ZH0sb2UubWF0Y2hlcz1mdW5jdGlvbihlLHQpe3JldHVybiBvZShlLG51bGwsbnVsbCx0KX0sb2UubWF0Y2hlc1NlbGVjdG9yPWZ1bmN0aW9uKGUsdCl7aWYoKGUub3duZXJEb2N1bWVudHx8ZSkhPT1kJiZwKGUpLHQ9dC5yZXBsYWNlKHosXCI9JyQxJ11cIiksbi5tYXRjaGVzU2VsZWN0b3ImJmcmJiFTW3QrXCIgXCJdJiYoIXZ8fCF2LnRlc3QodCkpJiYoIXl8fCF5LnRlc3QodCkpKXRyeXt2YXIgcj1tLmNhbGwoZSx0KTtpZihyfHxuLmRpc2Nvbm5lY3RlZE1hdGNofHxlLmRvY3VtZW50JiYxMSE9PWUuZG9jdW1lbnQubm9kZVR5cGUpcmV0dXJuIHJ9Y2F0Y2goZSl7fXJldHVybiBvZSh0LGQsbnVsbCxbZV0pLmxlbmd0aD4wfSxvZS5jb250YWlucz1mdW5jdGlvbihlLHQpe3JldHVybihlLm93bmVyRG9jdW1lbnR8fGUpIT09ZCYmcChlKSx4KGUsdCl9LG9lLmF0dHI9ZnVuY3Rpb24oZSx0KXsoZS5vd25lckRvY3VtZW50fHxlKSE9PWQmJnAoZSk7dmFyIGk9ci5hdHRySGFuZGxlW3QudG9Mb3dlckNhc2UoKV0sbz1pJiZOLmNhbGwoci5hdHRySGFuZGxlLHQudG9Mb3dlckNhc2UoKSk/aShlLHQsIWcpOnZvaWQgMDtyZXR1cm4gdm9pZCAwIT09bz9vOm4uYXR0cmlidXRlc3x8IWc/ZS5nZXRBdHRyaWJ1dGUodCk6KG89ZS5nZXRBdHRyaWJ1dGVOb2RlKHQpKSYmby5zcGVjaWZpZWQ/by52YWx1ZTpudWxsfSxvZS5lc2NhcGU9ZnVuY3Rpb24oZSl7cmV0dXJuKGUrXCJcIikucmVwbGFjZSh0ZSxuZSl9LG9lLmVycm9yPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiK2UpfSxvZS51bmlxdWVTb3J0PWZ1bmN0aW9uKGUpe3ZhciB0LHI9W10saT0wLG89MDtpZihmPSFuLmRldGVjdER1cGxpY2F0ZXMsYz0hbi5zb3J0U3RhYmxlJiZlLnNsaWNlKDApLGUuc29ydChEKSxmKXt3aGlsZSh0PWVbbysrXSl0PT09ZVtvXSYmKGk9ci5wdXNoKG8pKTt3aGlsZShpLS0pZS5zcGxpY2UocltpXSwxKX1yZXR1cm4gYz1udWxsLGV9LGk9b2UuZ2V0VGV4dD1mdW5jdGlvbihlKXt2YXIgdCxuPVwiXCIscj0wLG89ZS5ub2RlVHlwZTtpZihvKXtpZigxPT09b3x8OT09PW98fDExPT09byl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUudGV4dENvbnRlbnQpcmV0dXJuIGUudGV4dENvbnRlbnQ7Zm9yKGU9ZS5maXJzdENoaWxkO2U7ZT1lLm5leHRTaWJsaW5nKW4rPWkoZSl9ZWxzZSBpZigzPT09b3x8ND09PW8pcmV0dXJuIGUubm9kZVZhbHVlfWVsc2Ugd2hpbGUodD1lW3IrK10pbis9aSh0KTtyZXR1cm4gbn0sKHI9b2Uuc2VsZWN0b3JzPXtjYWNoZUxlbmd0aDo1MCxjcmVhdGVQc2V1ZG86c2UsbWF0Y2g6VixhdHRySGFuZGxlOnt9LGZpbmQ6e30scmVsYXRpdmU6e1wiPlwiOntkaXI6XCJwYXJlbnROb2RlXCIsZmlyc3Q6ITB9LFwiIFwiOntkaXI6XCJwYXJlbnROb2RlXCJ9LFwiK1wiOntkaXI6XCJwcmV2aW91c1NpYmxpbmdcIixmaXJzdDohMH0sXCJ+XCI6e2RpcjpcInByZXZpb3VzU2libGluZ1wifX0scHJlRmlsdGVyOntBVFRSOmZ1bmN0aW9uKGUpe3JldHVybiBlWzFdPWVbMV0ucmVwbGFjZShaLGVlKSxlWzNdPShlWzNdfHxlWzRdfHxlWzVdfHxcIlwiKS5yZXBsYWNlKFosZWUpLFwifj1cIj09PWVbMl0mJihlWzNdPVwiIFwiK2VbM10rXCIgXCIpLGUuc2xpY2UoMCw0KX0sQ0hJTEQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGVbMV09ZVsxXS50b0xvd2VyQ2FzZSgpLFwibnRoXCI9PT1lWzFdLnNsaWNlKDAsMyk/KGVbM118fG9lLmVycm9yKGVbMF0pLGVbNF09KyhlWzRdP2VbNV0rKGVbNl18fDEpOjIqKFwiZXZlblwiPT09ZVszXXx8XCJvZGRcIj09PWVbM10pKSxlWzVdPSsoZVs3XStlWzhdfHxcIm9kZFwiPT09ZVszXSkpOmVbM10mJm9lLmVycm9yKGVbMF0pLGV9LFBTRVVETzpmdW5jdGlvbihlKXt2YXIgdCxuPSFlWzZdJiZlWzJdO3JldHVybiBWLkNISUxELnRlc3QoZVswXSk/bnVsbDooZVszXT9lWzJdPWVbNF18fGVbNV18fFwiXCI6biYmWC50ZXN0KG4pJiYodD1hKG4sITApKSYmKHQ9bi5pbmRleE9mKFwiKVwiLG4ubGVuZ3RoLXQpLW4ubGVuZ3RoKSYmKGVbMF09ZVswXS5zbGljZSgwLHQpLGVbMl09bi5zbGljZSgwLHQpKSxlLnNsaWNlKDAsMykpfX0sZmlsdGVyOntUQUc6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKFosZWUpLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCIqXCI9PT1lP2Z1bmN0aW9uKCl7cmV0dXJuITB9OmZ1bmN0aW9uKGUpe3JldHVybiBlLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT10fX0sQ0xBU1M6ZnVuY3Rpb24oZSl7dmFyIHQ9RVtlK1wiIFwiXTtyZXR1cm4gdHx8KHQ9bmV3IFJlZ0V4cChcIihefFwiK00rXCIpXCIrZStcIihcIitNK1wifCQpXCIpKSYmRShlLGZ1bmN0aW9uKGUpe3JldHVybiB0LnRlc3QoXCJzdHJpbmdcIj09dHlwZW9mIGUuY2xhc3NOYW1lJiZlLmNsYXNzTmFtZXx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUuZ2V0QXR0cmlidXRlJiZlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiKX0pfSxBVFRSOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gZnVuY3Rpb24ocil7dmFyIGk9b2UuYXR0cihyLGUpO3JldHVybiBudWxsPT1pP1wiIT1cIj09PXQ6IXR8fChpKz1cIlwiLFwiPVwiPT09dD9pPT09bjpcIiE9XCI9PT10P2khPT1uOlwiXj1cIj09PXQ/biYmMD09PWkuaW5kZXhPZihuKTpcIio9XCI9PT10P24mJmkuaW5kZXhPZihuKT4tMTpcIiQ9XCI9PT10P24mJmkuc2xpY2UoLW4ubGVuZ3RoKT09PW46XCJ+PVwiPT09dD8oXCIgXCIraS5yZXBsYWNlKCQsXCIgXCIpK1wiIFwiKS5pbmRleE9mKG4pPi0xOlwifD1cIj09PXQmJihpPT09bnx8aS5zbGljZSgwLG4ubGVuZ3RoKzEpPT09bitcIi1cIikpfX0sQ0hJTEQ6ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbz1cIm50aFwiIT09ZS5zbGljZSgwLDMpLGE9XCJsYXN0XCIhPT1lLnNsaWNlKC00KSxzPVwib2YtdHlwZVwiPT09dDtyZXR1cm4gMT09PXImJjA9PT1pP2Z1bmN0aW9uKGUpe3JldHVybiEhZS5wYXJlbnROb2RlfTpmdW5jdGlvbih0LG4sdSl7dmFyIGwsYyxmLHAsZCxoLGc9byE9PWE/XCJuZXh0U2libGluZ1wiOlwicHJldmlvdXNTaWJsaW5nXCIseT10LnBhcmVudE5vZGUsdj1zJiZ0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksbT0hdSYmIXMseD0hMTtpZih5KXtpZihvKXt3aGlsZShnKXtwPXQ7d2hpbGUocD1wW2ddKWlmKHM/cC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09djoxPT09cC5ub2RlVHlwZSlyZXR1cm4hMTtoPWc9XCJvbmx5XCI9PT1lJiYhaCYmXCJuZXh0U2libGluZ1wifXJldHVybiEwfWlmKGg9W2E/eS5maXJzdENoaWxkOnkubGFzdENoaWxkXSxhJiZtKXt4PShkPShsPShjPShmPShwPXkpW2JdfHwocFtiXT17fSkpW3AudW5pcXVlSURdfHwoZltwLnVuaXF1ZUlEXT17fSkpW2VdfHxbXSlbMF09PT1UJiZsWzFdKSYmbFsyXSxwPWQmJnkuY2hpbGROb2Rlc1tkXTt3aGlsZShwPSsrZCYmcCYmcFtnXXx8KHg9ZD0wKXx8aC5wb3AoKSlpZigxPT09cC5ub2RlVHlwZSYmKyt4JiZwPT09dCl7Y1tlXT1bVCxkLHhdO2JyZWFrfX1lbHNlIGlmKG0mJih4PWQ9KGw9KGM9KGY9KHA9dClbYl18fChwW2JdPXt9KSlbcC51bmlxdWVJRF18fChmW3AudW5pcXVlSURdPXt9KSlbZV18fFtdKVswXT09PVQmJmxbMV0pLCExPT09eCl3aGlsZShwPSsrZCYmcCYmcFtnXXx8KHg9ZD0wKXx8aC5wb3AoKSlpZigocz9wLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT12OjE9PT1wLm5vZGVUeXBlKSYmKyt4JiYobSYmKChjPShmPXBbYl18fChwW2JdPXt9KSlbcC51bmlxdWVJRF18fChmW3AudW5pcXVlSURdPXt9KSlbZV09W1QseF0pLHA9PT10KSlicmVhaztyZXR1cm4oeC09aSk9PT1yfHx4JXI9PTAmJngvcj49MH19fSxQU0VVRE86ZnVuY3Rpb24oZSx0KXt2YXIgbixpPXIucHNldWRvc1tlXXx8ci5zZXRGaWx0ZXJzW2UudG9Mb3dlckNhc2UoKV18fG9lLmVycm9yKFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIitlKTtyZXR1cm4gaVtiXT9pKHQpOmkubGVuZ3RoPjE/KG49W2UsZSxcIlwiLHRdLHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eShlLnRvTG93ZXJDYXNlKCkpP3NlKGZ1bmN0aW9uKGUsbil7dmFyIHIsbz1pKGUsdCksYT1vLmxlbmd0aDt3aGlsZShhLS0pZVtyPU8oZSxvW2FdKV09IShuW3JdPW9bYV0pfSk6ZnVuY3Rpb24oZSl7cmV0dXJuIGkoZSwwLG4pfSk6aX19LHBzZXVkb3M6e25vdDpzZShmdW5jdGlvbihlKXt2YXIgdD1bXSxuPVtdLHI9cyhlLnJlcGxhY2UoQixcIiQxXCIpKTtyZXR1cm4gcltiXT9zZShmdW5jdGlvbihlLHQsbixpKXt2YXIgbyxhPXIoZSxudWxsLGksW10pLHM9ZS5sZW5ndGg7d2hpbGUocy0tKShvPWFbc10pJiYoZVtzXT0hKHRbc109bykpfSk6ZnVuY3Rpb24oZSxpLG8pe3JldHVybiB0WzBdPWUscih0LG51bGwsbyxuKSx0WzBdPW51bGwsIW4ucG9wKCl9fSksaGFzOnNlKGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gb2UoZSx0KS5sZW5ndGg+MH19KSxjb250YWluczpzZShmdW5jdGlvbihlKXtyZXR1cm4gZT1lLnJlcGxhY2UoWixlZSksZnVuY3Rpb24odCl7cmV0dXJuKHQudGV4dENvbnRlbnR8fHQuaW5uZXJUZXh0fHxpKHQpKS5pbmRleE9mKGUpPi0xfX0pLGxhbmc6c2UoZnVuY3Rpb24oZSl7cmV0dXJuIFUudGVzdChlfHxcIlwiKXx8b2UuZXJyb3IoXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIitlKSxlPWUucmVwbGFjZShaLGVlKS50b0xvd2VyQ2FzZSgpLGZ1bmN0aW9uKHQpe3ZhciBuO2Rve2lmKG49Zz90Lmxhbmc6dC5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKXx8dC5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKXJldHVybihuPW4udG9Mb3dlckNhc2UoKSk9PT1lfHwwPT09bi5pbmRleE9mKGUrXCItXCIpfXdoaWxlKCh0PXQucGFyZW50Tm9kZSkmJjE9PT10Lm5vZGVUeXBlKTtyZXR1cm4hMX19KSx0YXJnZXQ6ZnVuY3Rpb24odCl7dmFyIG49ZS5sb2NhdGlvbiYmZS5sb2NhdGlvbi5oYXNoO3JldHVybiBuJiZuLnNsaWNlKDEpPT09dC5pZH0scm9vdDpmdW5jdGlvbihlKXtyZXR1cm4gZT09PWh9LGZvY3VzOmZ1bmN0aW9uKGUpe3JldHVybiBlPT09ZC5hY3RpdmVFbGVtZW50JiYoIWQuaGFzRm9jdXN8fGQuaGFzRm9jdXMoKSkmJiEhKGUudHlwZXx8ZS5ocmVmfHx+ZS50YWJJbmRleCl9LGVuYWJsZWQ6ZGUoITEpLGRpc2FibGVkOmRlKCEwKSxjaGVja2VkOmZ1bmN0aW9uKGUpe3ZhciB0PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT10JiYhIWUuY2hlY2tlZHx8XCJvcHRpb25cIj09PXQmJiEhZS5zZWxlY3RlZH0sc2VsZWN0ZWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFyZW50Tm9kZSYmZS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsITA9PT1lLnNlbGVjdGVkfSxlbXB0eTpmdW5jdGlvbihlKXtmb3IoZT1lLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpaWYoZS5ub2RlVHlwZTw2KXJldHVybiExO3JldHVybiEwfSxwYXJlbnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIXIucHNldWRvcy5lbXB0eShlKX0saGVhZGVyOmZ1bmN0aW9uKGUpe3JldHVybiBZLnRlc3QoZS5ub2RlTmFtZSl9LGlucHV0OmZ1bmN0aW9uKGUpe3JldHVybiBHLnRlc3QoZS5ub2RlTmFtZSl9LGJ1dHRvbjpmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09dCYmXCJidXR0b25cIj09PWUudHlwZXx8XCJidXR0b25cIj09PXR9LHRleHQ6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuXCJpbnB1dFwiPT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiZcInRleHRcIj09PWUudHlwZSYmKG51bGw9PSh0PWUuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSl8fFwidGV4dFwiPT09dC50b0xvd2VyQ2FzZSgpKX0sZmlyc3Q6aGUoZnVuY3Rpb24oKXtyZXR1cm5bMF19KSxsYXN0OmhlKGZ1bmN0aW9uKGUsdCl7cmV0dXJuW3QtMV19KSxlcTpoZShmdW5jdGlvbihlLHQsbil7cmV0dXJuW248MD9uK3Q6bl19KSxldmVuOmhlKGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTA7bjx0O24rPTIpZS5wdXNoKG4pO3JldHVybiBlfSksb2RkOmhlKGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPTE7bjx0O24rPTIpZS5wdXNoKG4pO3JldHVybiBlfSksbHQ6aGUoZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj1uPDA/bit0Om47LS1yPj0wOyllLnB1c2gocik7cmV0dXJuIGV9KSxndDpoZShmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPW48MD9uK3Q6bjsrK3I8dDspZS5wdXNoKHIpO3JldHVybiBlfSl9fSkucHNldWRvcy5udGg9ci5wc2V1ZG9zLmVxO2Zvcih0IGlue3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KXIucHNldWRvc1t0XT1mZSh0KTtmb3IodCBpbntzdWJtaXQ6ITAscmVzZXQ6ITB9KXIucHNldWRvc1t0XT1wZSh0KTtmdW5jdGlvbiB5ZSgpe315ZS5wcm90b3R5cGU9ci5maWx0ZXJzPXIucHNldWRvcyxyLnNldEZpbHRlcnM9bmV3IHllLGE9b2UudG9rZW5pemU9ZnVuY3Rpb24oZSx0KXt2YXIgbixpLG8sYSxzLHUsbCxjPWtbZStcIiBcIl07aWYoYylyZXR1cm4gdD8wOmMuc2xpY2UoMCk7cz1lLHU9W10sbD1yLnByZUZpbHRlcjt3aGlsZShzKXtuJiYhKGk9Ri5leGVjKHMpKXx8KGkmJihzPXMuc2xpY2UoaVswXS5sZW5ndGgpfHxzKSx1LnB1c2gobz1bXSkpLG49ITEsKGk9Xy5leGVjKHMpKSYmKG49aS5zaGlmdCgpLG8ucHVzaCh7dmFsdWU6bix0eXBlOmlbMF0ucmVwbGFjZShCLFwiIFwiKX0pLHM9cy5zbGljZShuLmxlbmd0aCkpO2ZvcihhIGluIHIuZmlsdGVyKSEoaT1WW2FdLmV4ZWMocykpfHxsW2FdJiYhKGk9bFthXShpKSl8fChuPWkuc2hpZnQoKSxvLnB1c2goe3ZhbHVlOm4sdHlwZTphLG1hdGNoZXM6aX0pLHM9cy5zbGljZShuLmxlbmd0aCkpO2lmKCFuKWJyZWFrfXJldHVybiB0P3MubGVuZ3RoOnM/b2UuZXJyb3IoZSk6ayhlLHUpLnNsaWNlKDApfTtmdW5jdGlvbiB2ZShlKXtmb3IodmFyIHQ9MCxuPWUubGVuZ3RoLHI9XCJcIjt0PG47dCsrKXIrPWVbdF0udmFsdWU7cmV0dXJuIHJ9ZnVuY3Rpb24gbWUoZSx0LG4pe3ZhciByPXQuZGlyLGk9dC5uZXh0LG89aXx8cixhPW4mJlwicGFyZW50Tm9kZVwiPT09byxzPUMrKztyZXR1cm4gdC5maXJzdD9mdW5jdGlvbih0LG4saSl7d2hpbGUodD10W3JdKWlmKDE9PT10Lm5vZGVUeXBlfHxhKXJldHVybiBlKHQsbixpKTtyZXR1cm4hMX06ZnVuY3Rpb24odCxuLHUpe3ZhciBsLGMsZixwPVtULHNdO2lmKHUpe3doaWxlKHQ9dFtyXSlpZigoMT09PXQubm9kZVR5cGV8fGEpJiZlKHQsbix1KSlyZXR1cm4hMH1lbHNlIHdoaWxlKHQ9dFtyXSlpZigxPT09dC5ub2RlVHlwZXx8YSlpZihmPXRbYl18fCh0W2JdPXt9KSxjPWZbdC51bmlxdWVJRF18fChmW3QudW5pcXVlSURdPXt9KSxpJiZpPT09dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXQ9dFtyXXx8dDtlbHNle2lmKChsPWNbb10pJiZsWzBdPT09VCYmbFsxXT09PXMpcmV0dXJuIHBbMl09bFsyXTtpZihjW29dPXAscFsyXT1lKHQsbix1KSlyZXR1cm4hMH1yZXR1cm4hMX19ZnVuY3Rpb24geGUoZSl7cmV0dXJuIGUubGVuZ3RoPjE/ZnVuY3Rpb24odCxuLHIpe3ZhciBpPWUubGVuZ3RoO3doaWxlKGktLSlpZighZVtpXSh0LG4scikpcmV0dXJuITE7cmV0dXJuITB9OmVbMF19ZnVuY3Rpb24gYmUoZSx0LG4pe2Zvcih2YXIgcj0wLGk9dC5sZW5ndGg7cjxpO3IrKylvZShlLHRbcl0sbik7cmV0dXJuIG59ZnVuY3Rpb24gd2UoZSx0LG4scixpKXtmb3IodmFyIG8sYT1bXSxzPTAsdT1lLmxlbmd0aCxsPW51bGwhPXQ7czx1O3MrKykobz1lW3NdKSYmKG4mJiFuKG8scixpKXx8KGEucHVzaChvKSxsJiZ0LnB1c2gocykpKTtyZXR1cm4gYX1mdW5jdGlvbiBUZShlLHQsbixyLGksbyl7cmV0dXJuIHImJiFyW2JdJiYocj1UZShyKSksaSYmIWlbYl0mJihpPVRlKGksbykpLHNlKGZ1bmN0aW9uKG8sYSxzLHUpe3ZhciBsLGMsZixwPVtdLGQ9W10saD1hLmxlbmd0aCxnPW98fGJlKHR8fFwiKlwiLHMubm9kZVR5cGU/W3NdOnMsW10pLHk9IWV8fCFvJiZ0P2c6d2UoZyxwLGUscyx1KSx2PW4/aXx8KG8/ZTpofHxyKT9bXTphOnk7aWYobiYmbih5LHYscyx1KSxyKXtsPXdlKHYsZCkscihsLFtdLHMsdSksYz1sLmxlbmd0aDt3aGlsZShjLS0pKGY9bFtjXSkmJih2W2RbY11dPSEoeVtkW2NdXT1mKSl9aWYobyl7aWYoaXx8ZSl7aWYoaSl7bD1bXSxjPXYubGVuZ3RoO3doaWxlKGMtLSkoZj12W2NdKSYmbC5wdXNoKHlbY109Zik7aShudWxsLHY9W10sbCx1KX1jPXYubGVuZ3RoO3doaWxlKGMtLSkoZj12W2NdKSYmKGw9aT9PKG8sZik6cFtjXSk+LTEmJihvW2xdPSEoYVtsXT1mKSl9fWVsc2Ugdj13ZSh2PT09YT92LnNwbGljZShoLHYubGVuZ3RoKTp2KSxpP2kobnVsbCxhLHYsdSk6TC5hcHBseShhLHYpfSl9ZnVuY3Rpb24gQ2UoZSl7Zm9yKHZhciB0LG4saSxvPWUubGVuZ3RoLGE9ci5yZWxhdGl2ZVtlWzBdLnR5cGVdLHM9YXx8ci5yZWxhdGl2ZVtcIiBcIl0sdT1hPzE6MCxjPW1lKGZ1bmN0aW9uKGUpe3JldHVybiBlPT09dH0scywhMCksZj1tZShmdW5jdGlvbihlKXtyZXR1cm4gTyh0LGUpPi0xfSxzLCEwKSxwPVtmdW5jdGlvbihlLG4scil7dmFyIGk9IWEmJihyfHxuIT09bCl8fCgodD1uKS5ub2RlVHlwZT9jKGUsbixyKTpmKGUsbixyKSk7cmV0dXJuIHQ9bnVsbCxpfV07dTxvO3UrKylpZihuPXIucmVsYXRpdmVbZVt1XS50eXBlXSlwPVttZSh4ZShwKSxuKV07ZWxzZXtpZigobj1yLmZpbHRlcltlW3VdLnR5cGVdLmFwcGx5KG51bGwsZVt1XS5tYXRjaGVzKSlbYl0pe2ZvcihpPSsrdTtpPG87aSsrKWlmKHIucmVsYXRpdmVbZVtpXS50eXBlXSlicmVhaztyZXR1cm4gVGUodT4xJiZ4ZShwKSx1PjEmJnZlKGUuc2xpY2UoMCx1LTEpLmNvbmNhdCh7dmFsdWU6XCIgXCI9PT1lW3UtMl0udHlwZT9cIipcIjpcIlwifSkpLnJlcGxhY2UoQixcIiQxXCIpLG4sdTxpJiZDZShlLnNsaWNlKHUsaSkpLGk8byYmQ2UoZT1lLnNsaWNlKGkpKSxpPG8mJnZlKGUpKX1wLnB1c2gobil9cmV0dXJuIHhlKHApfWZ1bmN0aW9uIEVlKGUsdCl7dmFyIG49dC5sZW5ndGg+MCxpPWUubGVuZ3RoPjAsbz1mdW5jdGlvbihvLGEscyx1LGMpe3ZhciBmLGgseSx2PTAsbT1cIjBcIix4PW8mJltdLGI9W10sdz1sLEM9b3x8aSYmci5maW5kLlRBRyhcIipcIixjKSxFPVQrPW51bGw9PXc/MTpNYXRoLnJhbmRvbSgpfHwuMSxrPUMubGVuZ3RoO2ZvcihjJiYobD1hPT09ZHx8YXx8Yyk7bSE9PWsmJm51bGwhPShmPUNbbV0pO20rKyl7aWYoaSYmZil7aD0wLGF8fGYub3duZXJEb2N1bWVudD09PWR8fChwKGYpLHM9IWcpO3doaWxlKHk9ZVtoKytdKWlmKHkoZixhfHxkLHMpKXt1LnB1c2goZik7YnJlYWt9YyYmKFQ9RSl9biYmKChmPSF5JiZmKSYmdi0tLG8mJngucHVzaChmKSl9aWYodis9bSxuJiZtIT09dil7aD0wO3doaWxlKHk9dFtoKytdKXkoeCxiLGEscyk7aWYobyl7aWYodj4wKXdoaWxlKG0tLSl4W21dfHxiW21dfHwoYlttXT1qLmNhbGwodSkpO2I9d2UoYil9TC5hcHBseSh1LGIpLGMmJiFvJiZiLmxlbmd0aD4wJiZ2K3QubGVuZ3RoPjEmJm9lLnVuaXF1ZVNvcnQodSl9cmV0dXJuIGMmJihUPUUsbD13KSx4fTtyZXR1cm4gbj9zZShvKTpvfXJldHVybiBzPW9lLmNvbXBpbGU9ZnVuY3Rpb24oZSx0KXt2YXIgbixyPVtdLGk9W10sbz1TW2UrXCIgXCJdO2lmKCFvKXt0fHwodD1hKGUpKSxuPXQubGVuZ3RoO3doaWxlKG4tLSkobz1DZSh0W25dKSlbYl0/ci5wdXNoKG8pOmkucHVzaChvKTsobz1TKGUsRWUoaSxyKSkpLnNlbGVjdG9yPWV9cmV0dXJuIG99LHU9b2Uuc2VsZWN0PWZ1bmN0aW9uKGUsdCxuLGkpe3ZhciBvLHUsbCxjLGYscD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlLGQ9IWkmJmEoZT1wLnNlbGVjdG9yfHxlKTtpZihuPW58fFtdLDE9PT1kLmxlbmd0aCl7aWYoKHU9ZFswXT1kWzBdLnNsaWNlKDApKS5sZW5ndGg+MiYmXCJJRFwiPT09KGw9dVswXSkudHlwZSYmOT09PXQubm9kZVR5cGUmJmcmJnIucmVsYXRpdmVbdVsxXS50eXBlXSl7aWYoISh0PShyLmZpbmQuSUQobC5tYXRjaGVzWzBdLnJlcGxhY2UoWixlZSksdCl8fFtdKVswXSkpcmV0dXJuIG47cCYmKHQ9dC5wYXJlbnROb2RlKSxlPWUuc2xpY2UodS5zaGlmdCgpLnZhbHVlLmxlbmd0aCl9bz1WLm5lZWRzQ29udGV4dC50ZXN0KGUpPzA6dS5sZW5ndGg7d2hpbGUoby0tKXtpZihsPXVbb10sci5yZWxhdGl2ZVtjPWwudHlwZV0pYnJlYWs7aWYoKGY9ci5maW5kW2NdKSYmKGk9ZihsLm1hdGNoZXNbMF0ucmVwbGFjZShaLGVlKSxLLnRlc3QodVswXS50eXBlKSYmZ2UodC5wYXJlbnROb2RlKXx8dCkpKXtpZih1LnNwbGljZShvLDEpLCEoZT1pLmxlbmd0aCYmdmUodSkpKXJldHVybiBMLmFwcGx5KG4saSksbjticmVha319fXJldHVybihwfHxzKGUsZCkpKGksdCwhZyxuLCF0fHxLLnRlc3QoZSkmJmdlKHQucGFyZW50Tm9kZSl8fHQpLG59LG4uc29ydFN0YWJsZT1iLnNwbGl0KFwiXCIpLnNvcnQoRCkuam9pbihcIlwiKT09PWIsbi5kZXRlY3REdXBsaWNhdGVzPSEhZixwKCksbi5zb3J0RGV0YWNoZWQ9dWUoZnVuY3Rpb24oZSl7cmV0dXJuIDEmZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihkLmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSl9KSx1ZShmdW5jdGlvbihlKXtyZXR1cm4gZS5pbm5lckhUTUw9XCI8YSBocmVmPScjJz48L2E+XCIsXCIjXCI9PT1lLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKX0pfHxsZShcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIixmdW5jdGlvbihlLHQsbil7aWYoIW4pcmV0dXJuIGUuZ2V0QXR0cmlidXRlKHQsXCJ0eXBlXCI9PT10LnRvTG93ZXJDYXNlKCk/MToyKX0pLG4uYXR0cmlidXRlcyYmdWUoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaW5uZXJIVE1MPVwiPGlucHV0Lz5cIixlLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiKSxcIlwiPT09ZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpfSl8fGxlKFwidmFsdWVcIixmdW5jdGlvbihlLHQsbil7aWYoIW4mJlwiaW5wdXRcIj09PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSlyZXR1cm4gZS5kZWZhdWx0VmFsdWV9KSx1ZShmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZS5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKX0pfHxsZShQLGZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtpZighbilyZXR1cm4hMD09PWVbdF0/dC50b0xvd2VyQ2FzZSgpOihyPWUuZ2V0QXR0cmlidXRlTm9kZSh0KSkmJnIuc3BlY2lmaWVkP3IudmFsdWU6bnVsbH0pLG9lfShlKTt3LmZpbmQ9RSx3LmV4cHI9RS5zZWxlY3RvcnMsdy5leHByW1wiOlwiXT13LmV4cHIucHNldWRvcyx3LnVuaXF1ZVNvcnQ9dy51bmlxdWU9RS51bmlxdWVTb3J0LHcudGV4dD1FLmdldFRleHQsdy5pc1hNTERvYz1FLmlzWE1MLHcuY29udGFpbnM9RS5jb250YWlucyx3LmVzY2FwZVNlbGVjdG9yPUUuZXNjYXBlO3ZhciBrPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1bXSxpPXZvaWQgMCE9PW47d2hpbGUoKGU9ZVt0XSkmJjkhPT1lLm5vZGVUeXBlKWlmKDE9PT1lLm5vZGVUeXBlKXtpZihpJiZ3KGUpLmlzKG4pKWJyZWFrO3IucHVzaChlKX1yZXR1cm4gcn0sUz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1bXTtlO2U9ZS5uZXh0U2libGluZykxPT09ZS5ub2RlVHlwZSYmZSE9PXQmJm4ucHVzaChlKTtyZXR1cm4gbn0sRD13LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O2Z1bmN0aW9uIE4oZSx0KXtyZXR1cm4gZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09dC50b0xvd2VyQ2FzZSgpfXZhciBBPS9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pO2Z1bmN0aW9uIGooZSx0LG4pe3JldHVybiBnKHQpP3cuZ3JlcChlLGZ1bmN0aW9uKGUscil7cmV0dXJuISF0LmNhbGwoZSxyLGUpIT09bn0pOnQubm9kZVR5cGU/dy5ncmVwKGUsZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT10IT09bn0pOlwic3RyaW5nXCIhPXR5cGVvZiB0P3cuZ3JlcChlLGZ1bmN0aW9uKGUpe3JldHVybiB1LmNhbGwodCxlKT4tMSE9PW59KTp3LmZpbHRlcih0LGUsbil9dy5maWx0ZXI9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRbMF07cmV0dXJuIG4mJihlPVwiOm5vdChcIitlK1wiKVwiKSwxPT09dC5sZW5ndGgmJjE9PT1yLm5vZGVUeXBlP3cuZmluZC5tYXRjaGVzU2VsZWN0b3IocixlKT9bcl06W106dy5maW5kLm1hdGNoZXMoZSx3LmdyZXAodCxmdW5jdGlvbihlKXtyZXR1cm4gMT09PWUubm9kZVR5cGV9KSl9LHcuZm4uZXh0ZW5kKHtmaW5kOmZ1bmN0aW9uKGUpe3ZhciB0LG4scj10aGlzLmxlbmd0aCxpPXRoaXM7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuIHRoaXMucHVzaFN0YWNrKHcoZSkuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKHQ9MDt0PHI7dCsrKWlmKHcuY29udGFpbnMoaVt0XSx0aGlzKSlyZXR1cm4hMH0pKTtmb3Iobj10aGlzLnB1c2hTdGFjayhbXSksdD0wO3Q8cjt0Kyspdy5maW5kKGUsaVt0XSxuKTtyZXR1cm4gcj4xP3cudW5pcXVlU29ydChuKTpufSxmaWx0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGoodGhpcyxlfHxbXSwhMSkpfSxub3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGoodGhpcyxlfHxbXSwhMCkpfSxpczpmdW5jdGlvbihlKXtyZXR1cm4hIWoodGhpcyxcInN0cmluZ1wiPT10eXBlb2YgZSYmRC50ZXN0KGUpP3coZSk6ZXx8W10sITEpLmxlbmd0aH19KTt2YXIgcSxMPS9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvOyh3LmZuLmluaXQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciBpLG87aWYoIWUpcmV0dXJuIHRoaXM7aWYobj1ufHxxLFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZighKGk9XCI8XCI9PT1lWzBdJiZcIj5cIj09PWVbZS5sZW5ndGgtMV0mJmUubGVuZ3RoPj0zP1tudWxsLGUsbnVsbF06TC5leGVjKGUpKXx8IWlbMV0mJnQpcmV0dXJuIXR8fHQuanF1ZXJ5Pyh0fHxuKS5maW5kKGUpOnRoaXMuY29uc3RydWN0b3IodCkuZmluZChlKTtpZihpWzFdKXtpZih0PXQgaW5zdGFuY2VvZiB3P3RbMF06dCx3Lm1lcmdlKHRoaXMsdy5wYXJzZUhUTUwoaVsxXSx0JiZ0Lm5vZGVUeXBlP3Qub3duZXJEb2N1bWVudHx8dDpyLCEwKSksQS50ZXN0KGlbMV0pJiZ3LmlzUGxhaW5PYmplY3QodCkpZm9yKGkgaW4gdClnKHRoaXNbaV0pP3RoaXNbaV0odFtpXSk6dGhpcy5hdHRyKGksdFtpXSk7cmV0dXJuIHRoaXN9cmV0dXJuKG89ci5nZXRFbGVtZW50QnlJZChpWzJdKSkmJih0aGlzWzBdPW8sdGhpcy5sZW5ndGg9MSksdGhpc31yZXR1cm4gZS5ub2RlVHlwZT8odGhpc1swXT1lLHRoaXMubGVuZ3RoPTEsdGhpcyk6ZyhlKT92b2lkIDAhPT1uLnJlYWR5P24ucmVhZHkoZSk6ZSh3KTp3Lm1ha2VBcnJheShlLHRoaXMpfSkucHJvdG90eXBlPXcuZm4scT13KHIpO3ZhciBIPS9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLE89e2NoaWxkcmVuOiEwLGNvbnRlbnRzOiEwLG5leHQ6ITAscHJldjohMH07dy5mbi5leHRlbmQoe2hhczpmdW5jdGlvbihlKXt2YXIgdD13KGUsdGhpcyksbj10Lmxlbmd0aDtyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKXtmb3IodmFyIGU9MDtlPG47ZSsrKWlmKHcuY29udGFpbnModGhpcyx0W2VdKSlyZXR1cm4hMH0pfSxjbG9zZXN0OmZ1bmN0aW9uKGUsdCl7dmFyIG4scj0wLGk9dGhpcy5sZW5ndGgsbz1bXSxhPVwic3RyaW5nXCIhPXR5cGVvZiBlJiZ3KGUpO2lmKCFELnRlc3QoZSkpZm9yKDtyPGk7cisrKWZvcihuPXRoaXNbcl07biYmbiE9PXQ7bj1uLnBhcmVudE5vZGUpaWYobi5ub2RlVHlwZTwxMSYmKGE/YS5pbmRleChuKT4tMToxPT09bi5ub2RlVHlwZSYmdy5maW5kLm1hdGNoZXNTZWxlY3RvcihuLGUpKSl7by5wdXNoKG4pO2JyZWFrfXJldHVybiB0aGlzLnB1c2hTdGFjayhvLmxlbmd0aD4xP3cudW5pcXVlU29ydChvKTpvKX0saW5kZXg6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/XCJzdHJpbmdcIj09dHlwZW9mIGU/dS5jYWxsKHcoZSksdGhpc1swXSk6dS5jYWxsKHRoaXMsZS5qcXVlcnk/ZVswXTplKTp0aGlzWzBdJiZ0aGlzWzBdLnBhcmVudE5vZGU/dGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGg6LTF9LGFkZDpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLnB1c2hTdGFjayh3LnVuaXF1ZVNvcnQody5tZXJnZSh0aGlzLmdldCgpLHcoZSx0KSkpKX0sYWRkQmFjazpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5hZGQobnVsbD09ZT90aGlzLnByZXZPYmplY3Q6dGhpcy5wcmV2T2JqZWN0LmZpbHRlcihlKSl9fSk7ZnVuY3Rpb24gUChlLHQpe3doaWxlKChlPWVbdF0pJiYxIT09ZS5ub2RlVHlwZSk7cmV0dXJuIGV9dy5lYWNoKHtwYXJlbnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3JldHVybiB0JiYxMSE9PXQubm9kZVR5cGU/dDpudWxsfSxwYXJlbnRzOmZ1bmN0aW9uKGUpe3JldHVybiBrKGUsXCJwYXJlbnROb2RlXCIpfSxwYXJlbnRzVW50aWw6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBrKGUsXCJwYXJlbnROb2RlXCIsbil9LG5leHQ6ZnVuY3Rpb24oZSl7cmV0dXJuIFAoZSxcIm5leHRTaWJsaW5nXCIpfSxwcmV2OmZ1bmN0aW9uKGUpe3JldHVybiBQKGUsXCJwcmV2aW91c1NpYmxpbmdcIil9LG5leHRBbGw6ZnVuY3Rpb24oZSl7cmV0dXJuIGsoZSxcIm5leHRTaWJsaW5nXCIpfSxwcmV2QWxsOmZ1bmN0aW9uKGUpe3JldHVybiBrKGUsXCJwcmV2aW91c1NpYmxpbmdcIil9LG5leHRVbnRpbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGsoZSxcIm5leHRTaWJsaW5nXCIsbil9LHByZXZVbnRpbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGsoZSxcInByZXZpb3VzU2libGluZ1wiLG4pfSxzaWJsaW5nczpmdW5jdGlvbihlKXtyZXR1cm4gUygoZS5wYXJlbnROb2RlfHx7fSkuZmlyc3RDaGlsZCxlKX0sY2hpbGRyZW46ZnVuY3Rpb24oZSl7cmV0dXJuIFMoZS5maXJzdENoaWxkKX0sY29udGVudHM6ZnVuY3Rpb24oZSl7cmV0dXJuIE4oZSxcImlmcmFtZVwiKT9lLmNvbnRlbnREb2N1bWVudDooTihlLFwidGVtcGxhdGVcIikmJihlPWUuY29udGVudHx8ZSksdy5tZXJnZShbXSxlLmNoaWxkTm9kZXMpKX19LGZ1bmN0aW9uKGUsdCl7dy5mbltlXT1mdW5jdGlvbihuLHIpe3ZhciBpPXcubWFwKHRoaXMsdCxuKTtyZXR1cm5cIlVudGlsXCIhPT1lLnNsaWNlKC01KSYmKHI9biksciYmXCJzdHJpbmdcIj09dHlwZW9mIHImJihpPXcuZmlsdGVyKHIsaSkpLHRoaXMubGVuZ3RoPjEmJihPW2VdfHx3LnVuaXF1ZVNvcnQoaSksSC50ZXN0KGUpJiZpLnJldmVyc2UoKSksdGhpcy5wdXNoU3RhY2soaSl9fSk7dmFyIE09L1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nO2Z1bmN0aW9uIFIoZSl7dmFyIHQ9e307cmV0dXJuIHcuZWFjaChlLm1hdGNoKE0pfHxbXSxmdW5jdGlvbihlLG4pe3Rbbl09ITB9KSx0fXcuQ2FsbGJhY2tzPWZ1bmN0aW9uKGUpe2U9XCJzdHJpbmdcIj09dHlwZW9mIGU/UihlKTp3LmV4dGVuZCh7fSxlKTt2YXIgdCxuLHIsaSxvPVtdLGE9W10scz0tMSx1PWZ1bmN0aW9uKCl7Zm9yKGk9aXx8ZS5vbmNlLHI9dD0hMDthLmxlbmd0aDtzPS0xKXtuPWEuc2hpZnQoKTt3aGlsZSgrK3M8by5sZW5ndGgpITE9PT1vW3NdLmFwcGx5KG5bMF0sblsxXSkmJmUuc3RvcE9uRmFsc2UmJihzPW8ubGVuZ3RoLG49ITEpfWUubWVtb3J5fHwobj0hMSksdD0hMSxpJiYobz1uP1tdOlwiXCIpfSxsPXthZGQ6ZnVuY3Rpb24oKXtyZXR1cm4gbyYmKG4mJiF0JiYocz1vLmxlbmd0aC0xLGEucHVzaChuKSksZnVuY3Rpb24gdChuKXt3LmVhY2gobixmdW5jdGlvbihuLHIpe2cocik/ZS51bmlxdWUmJmwuaGFzKHIpfHxvLnB1c2gocik6ciYmci5sZW5ndGgmJlwic3RyaW5nXCIhPT14KHIpJiZ0KHIpfSl9KGFyZ3VtZW50cyksbiYmIXQmJnUoKSksdGhpc30scmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIHcuZWFjaChhcmd1bWVudHMsZnVuY3Rpb24oZSx0KXt2YXIgbjt3aGlsZSgobj13LmluQXJyYXkodCxvLG4pKT4tMSlvLnNwbGljZShuLDEpLG48PXMmJnMtLX0pLHRoaXN9LGhhczpmdW5jdGlvbihlKXtyZXR1cm4gZT93LmluQXJyYXkoZSxvKT4tMTpvLmxlbmd0aD4wfSxlbXB0eTpmdW5jdGlvbigpe3JldHVybiBvJiYobz1bXSksdGhpc30sZGlzYWJsZTpmdW5jdGlvbigpe3JldHVybiBpPWE9W10sbz1uPVwiXCIsdGhpc30sZGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hb30sbG9jazpmdW5jdGlvbigpe3JldHVybiBpPWE9W10sbnx8dHx8KG89bj1cIlwiKSx0aGlzfSxsb2NrZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIWl9LGZpcmVXaXRoOmZ1bmN0aW9uKGUsbil7cmV0dXJuIGl8fChuPVtlLChuPW58fFtdKS5zbGljZT9uLnNsaWNlKCk6bl0sYS5wdXNoKG4pLHR8fHUoKSksdGhpc30sZmlyZTpmdW5jdGlvbigpe3JldHVybiBsLmZpcmVXaXRoKHRoaXMsYXJndW1lbnRzKSx0aGlzfSxmaXJlZDpmdW5jdGlvbigpe3JldHVybiEhcn19O3JldHVybiBsfTtmdW5jdGlvbiBJKGUpe3JldHVybiBlfWZ1bmN0aW9uIFcoZSl7dGhyb3cgZX1mdW5jdGlvbiAkKGUsdCxuLHIpe3ZhciBpO3RyeXtlJiZnKGk9ZS5wcm9taXNlKT9pLmNhbGwoZSkuZG9uZSh0KS5mYWlsKG4pOmUmJmcoaT1lLnRoZW4pP2kuY2FsbChlLHQsbik6dC5hcHBseSh2b2lkIDAsW2VdLnNsaWNlKHIpKX1jYXRjaChlKXtuLmFwcGx5KHZvaWQgMCxbZV0pfX13LmV4dGVuZCh7RGVmZXJyZWQ6ZnVuY3Rpb24odCl7dmFyIG49W1tcIm5vdGlmeVwiLFwicHJvZ3Jlc3NcIix3LkNhbGxiYWNrcyhcIm1lbW9yeVwiKSx3LkNhbGxiYWNrcyhcIm1lbW9yeVwiKSwyXSxbXCJyZXNvbHZlXCIsXCJkb25lXCIsdy5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSx3LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLDAsXCJyZXNvbHZlZFwiXSxbXCJyZWplY3RcIixcImZhaWxcIix3LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLHcuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksMSxcInJlamVjdGVkXCJdXSxyPVwicGVuZGluZ1wiLGk9e3N0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LGFsd2F5czpmdW5jdGlvbigpe3JldHVybiBvLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksdGhpc30sXCJjYXRjaFwiOmZ1bmN0aW9uKGUpe3JldHVybiBpLnRoZW4obnVsbCxlKX0scGlwZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cztyZXR1cm4gdy5EZWZlcnJlZChmdW5jdGlvbih0KXt3LmVhY2gobixmdW5jdGlvbihuLHIpe3ZhciBpPWcoZVtyWzRdXSkmJmVbcls0XV07b1tyWzFdXShmdW5jdGlvbigpe3ZhciBlPWkmJmkuYXBwbHkodGhpcyxhcmd1bWVudHMpO2UmJmcoZS5wcm9taXNlKT9lLnByb21pc2UoKS5wcm9ncmVzcyh0Lm5vdGlmeSkuZG9uZSh0LnJlc29sdmUpLmZhaWwodC5yZWplY3QpOnRbclswXStcIldpdGhcIl0odGhpcyxpP1tlXTphcmd1bWVudHMpfSl9KSxlPW51bGx9KS5wcm9taXNlKCl9LHRoZW46ZnVuY3Rpb24odCxyLGkpe3ZhciBvPTA7ZnVuY3Rpb24gYSh0LG4scixpKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgcz10aGlzLHU9YXJndW1lbnRzLGw9ZnVuY3Rpb24oKXt2YXIgZSxsO2lmKCEodDxvKSl7aWYoKGU9ci5hcHBseShzLHUpKT09PW4ucHJvbWlzZSgpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIik7bD1lJiYoXCJvYmplY3RcIj09dHlwZW9mIGV8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGUpJiZlLnRoZW4sZyhsKT9pP2wuY2FsbChlLGEobyxuLEksaSksYShvLG4sVyxpKSk6KG8rKyxsLmNhbGwoZSxhKG8sbixJLGkpLGEobyxuLFcsaSksYShvLG4sSSxuLm5vdGlmeVdpdGgpKSk6KHIhPT1JJiYocz12b2lkIDAsdT1bZV0pLChpfHxuLnJlc29sdmVXaXRoKShzLHUpKX19LGM9aT9sOmZ1bmN0aW9uKCl7dHJ5e2woKX1jYXRjaChlKXt3LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2smJncuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayhlLGMuc3RhY2tUcmFjZSksdCsxPj1vJiYociE9PVcmJihzPXZvaWQgMCx1PVtlXSksbi5yZWplY3RXaXRoKHMsdSkpfX07dD9jKCk6KHcuRGVmZXJyZWQuZ2V0U3RhY2tIb29rJiYoYy5zdGFja1RyYWNlPXcuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCkpLGUuc2V0VGltZW91dChjKSl9fXJldHVybiB3LkRlZmVycmVkKGZ1bmN0aW9uKGUpe25bMF1bM10uYWRkKGEoMCxlLGcoaSk/aTpJLGUubm90aWZ5V2l0aCkpLG5bMV1bM10uYWRkKGEoMCxlLGcodCk/dDpJKSksblsyXVszXS5hZGQoYSgwLGUsZyhyKT9yOlcpKX0pLnByb21pc2UoKX0scHJvbWlzZTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZT93LmV4dGVuZChlLGkpOml9fSxvPXt9O3JldHVybiB3LmVhY2gobixmdW5jdGlvbihlLHQpe3ZhciBhPXRbMl0scz10WzVdO2lbdFsxXV09YS5hZGQscyYmYS5hZGQoZnVuY3Rpb24oKXtyPXN9LG5bMy1lXVsyXS5kaXNhYmxlLG5bMy1lXVszXS5kaXNhYmxlLG5bMF1bMl0ubG9jayxuWzBdWzNdLmxvY2spLGEuYWRkKHRbM10uZmlyZSksb1t0WzBdXT1mdW5jdGlvbigpe3JldHVybiBvW3RbMF0rXCJXaXRoXCJdKHRoaXM9PT1vP3ZvaWQgMDp0aGlzLGFyZ3VtZW50cyksdGhpc30sb1t0WzBdK1wiV2l0aFwiXT1hLmZpcmVXaXRofSksaS5wcm9taXNlKG8pLHQmJnQuY2FsbChvLG8pLG99LHdoZW46ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPXQscj1BcnJheShuKSxpPW8uY2FsbChhcmd1bWVudHMpLGE9dy5EZWZlcnJlZCgpLHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKG4pe3JbZV09dGhpcyxpW2VdPWFyZ3VtZW50cy5sZW5ndGg+MT9vLmNhbGwoYXJndW1lbnRzKTpuLC0tdHx8YS5yZXNvbHZlV2l0aChyLGkpfX07aWYodDw9MSYmKCQoZSxhLmRvbmUocyhuKSkucmVzb2x2ZSxhLnJlamVjdCwhdCksXCJwZW5kaW5nXCI9PT1hLnN0YXRlKCl8fGcoaVtuXSYmaVtuXS50aGVuKSkpcmV0dXJuIGEudGhlbigpO3doaWxlKG4tLSkkKGlbbl0scyhuKSxhLnJlamVjdCk7cmV0dXJuIGEucHJvbWlzZSgpfX0pO3ZhciBCPS9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO3cuRGVmZXJyZWQuZXhjZXB0aW9uSG9vaz1mdW5jdGlvbih0LG4pe2UuY29uc29sZSYmZS5jb25zb2xlLndhcm4mJnQmJkIudGVzdCh0Lm5hbWUpJiZlLmNvbnNvbGUud2FybihcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiK3QubWVzc2FnZSx0LnN0YWNrLG4pfSx3LnJlYWR5RXhjZXB0aW9uPWZ1bmN0aW9uKHQpe2Uuc2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IHR9KX07dmFyIEY9dy5EZWZlcnJlZCgpO3cuZm4ucmVhZHk9ZnVuY3Rpb24oZSl7cmV0dXJuIEYudGhlbihlKVtcImNhdGNoXCJdKGZ1bmN0aW9uKGUpe3cucmVhZHlFeGNlcHRpb24oZSl9KSx0aGlzfSx3LmV4dGVuZCh7aXNSZWFkeTohMSxyZWFkeVdhaXQ6MSxyZWFkeTpmdW5jdGlvbihlKXsoITA9PT1lPy0tdy5yZWFkeVdhaXQ6dy5pc1JlYWR5KXx8KHcuaXNSZWFkeT0hMCwhMCE9PWUmJi0tdy5yZWFkeVdhaXQ+MHx8Ri5yZXNvbHZlV2l0aChyLFt3XSkpfX0pLHcucmVhZHkudGhlbj1GLnRoZW47ZnVuY3Rpb24gXygpe3IucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixfKSxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsXyksdy5yZWFkeSgpfVwiY29tcGxldGVcIj09PXIucmVhZHlTdGF0ZXx8XCJsb2FkaW5nXCIhPT1yLnJlYWR5U3RhdGUmJiFyLmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbD9lLnNldFRpbWVvdXQody5yZWFkeSk6KHIuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixfKSxlLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsXykpO3ZhciB6PWZ1bmN0aW9uKGUsdCxuLHIsaSxvLGEpe3ZhciBzPTAsdT1lLmxlbmd0aCxsPW51bGw9PW47aWYoXCJvYmplY3RcIj09PXgobikpe2k9ITA7Zm9yKHMgaW4gbil6KGUsdCxzLG5bc10sITAsbyxhKX1lbHNlIGlmKHZvaWQgMCE9PXImJihpPSEwLGcocil8fChhPSEwKSxsJiYoYT8odC5jYWxsKGUsciksdD1udWxsKToobD10LHQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBsLmNhbGwodyhlKSxuKX0pKSx0KSlmb3IoO3M8dTtzKyspdChlW3NdLG4sYT9yOnIuY2FsbChlW3NdLHMsdChlW3NdLG4pKSk7cmV0dXJuIGk/ZTpsP3QuY2FsbChlKTp1P3QoZVswXSxuKTpvfSxYPS9eLW1zLS8sVT0vLShbYS16XSkvZztmdW5jdGlvbiBWKGUsdCl7cmV0dXJuIHQudG9VcHBlckNhc2UoKX1mdW5jdGlvbiBHKGUpe3JldHVybiBlLnJlcGxhY2UoWCxcIm1zLVwiKS5yZXBsYWNlKFUsVil9dmFyIFk9ZnVuY3Rpb24oZSl7cmV0dXJuIDE9PT1lLm5vZGVUeXBlfHw5PT09ZS5ub2RlVHlwZXx8IStlLm5vZGVUeXBlfTtmdW5jdGlvbiBRKCl7dGhpcy5leHBhbmRvPXcuZXhwYW5kbytRLnVpZCsrfVEudWlkPTEsUS5wcm90b3R5cGU9e2NhY2hlOmZ1bmN0aW9uKGUpe3ZhciB0PWVbdGhpcy5leHBhbmRvXTtyZXR1cm4gdHx8KHQ9e30sWShlKSYmKGUubm9kZVR5cGU/ZVt0aGlzLmV4cGFuZG9dPXQ6T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdGhpcy5leHBhbmRvLHt2YWx1ZTp0LGNvbmZpZ3VyYWJsZTohMH0pKSksdH0sc2V0OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpPXRoaXMuY2FjaGUoZSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpaVtHKHQpXT1uO2Vsc2UgZm9yKHIgaW4gdClpW0cocildPXRbcl07cmV0dXJuIGl9LGdldDpmdW5jdGlvbihlLHQpe3JldHVybiB2b2lkIDA9PT10P3RoaXMuY2FjaGUoZSk6ZVt0aGlzLmV4cGFuZG9dJiZlW3RoaXMuZXhwYW5kb11bRyh0KV19LGFjY2VzczpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHZvaWQgMD09PXR8fHQmJlwic3RyaW5nXCI9PXR5cGVvZiB0JiZ2b2lkIDA9PT1uP3RoaXMuZ2V0KGUsdCk6KHRoaXMuc2V0KGUsdCxuKSx2b2lkIDAhPT1uP246dCl9LHJlbW92ZTpmdW5jdGlvbihlLHQpe3ZhciBuLHI9ZVt0aGlzLmV4cGFuZG9dO2lmKHZvaWQgMCE9PXIpe2lmKHZvaWQgMCE9PXQpe249KHQ9QXJyYXkuaXNBcnJheSh0KT90Lm1hcChHKToodD1HKHQpKWluIHI/W3RdOnQubWF0Y2goTSl8fFtdKS5sZW5ndGg7d2hpbGUobi0tKWRlbGV0ZSByW3Rbbl1dfSh2b2lkIDA9PT10fHx3LmlzRW1wdHlPYmplY3QocikpJiYoZS5ub2RlVHlwZT9lW3RoaXMuZXhwYW5kb109dm9pZCAwOmRlbGV0ZSBlW3RoaXMuZXhwYW5kb10pfX0saGFzRGF0YTpmdW5jdGlvbihlKXt2YXIgdD1lW3RoaXMuZXhwYW5kb107cmV0dXJuIHZvaWQgMCE9PXQmJiF3LmlzRW1wdHlPYmplY3QodCl9fTt2YXIgSj1uZXcgUSxLPW5ldyBRLFo9L14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLGVlPS9bQS1aXS9nO2Z1bmN0aW9uIHRlKGUpe3JldHVyblwidHJ1ZVwiPT09ZXx8XCJmYWxzZVwiIT09ZSYmKFwibnVsbFwiPT09ZT9udWxsOmU9PT0rZStcIlwiPytlOloudGVzdChlKT9KU09OLnBhcnNlKGUpOmUpfWZ1bmN0aW9uIG5lKGUsdCxuKXt2YXIgcjtpZih2b2lkIDA9PT1uJiYxPT09ZS5ub2RlVHlwZSlpZihyPVwiZGF0YS1cIit0LnJlcGxhY2UoZWUsXCItJCZcIikudG9Mb3dlckNhc2UoKSxcInN0cmluZ1wiPT10eXBlb2Yobj1lLmdldEF0dHJpYnV0ZShyKSkpe3RyeXtuPXRlKG4pfWNhdGNoKGUpe31LLnNldChlLHQsbil9ZWxzZSBuPXZvaWQgMDtyZXR1cm4gbn13LmV4dGVuZCh7aGFzRGF0YTpmdW5jdGlvbihlKXtyZXR1cm4gSy5oYXNEYXRhKGUpfHxKLmhhc0RhdGEoZSl9LGRhdGE6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBLLmFjY2VzcyhlLHQsbil9LHJlbW92ZURhdGE6ZnVuY3Rpb24oZSx0KXtLLnJlbW92ZShlLHQpfSxfZGF0YTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIEouYWNjZXNzKGUsdCxuKX0sX3JlbW92ZURhdGE6ZnVuY3Rpb24oZSx0KXtKLnJlbW92ZShlLHQpfX0pLHcuZm4uZXh0ZW5kKHtkYXRhOmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG89dGhpc1swXSxhPW8mJm8uYXR0cmlidXRlcztpZih2b2lkIDA9PT1lKXtpZih0aGlzLmxlbmd0aCYmKGk9Sy5nZXQobyksMT09PW8ubm9kZVR5cGUmJiFKLmdldChvLFwiaGFzRGF0YUF0dHJzXCIpKSl7bj1hLmxlbmd0aDt3aGlsZShuLS0pYVtuXSYmMD09PShyPWFbbl0ubmFtZSkuaW5kZXhPZihcImRhdGEtXCIpJiYocj1HKHIuc2xpY2UoNSkpLG5lKG8scixpW3JdKSk7Si5zZXQobyxcImhhc0RhdGFBdHRyc1wiLCEwKX1yZXR1cm4gaX1yZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZT90aGlzLmVhY2goZnVuY3Rpb24oKXtLLnNldCh0aGlzLGUpfSk6eih0aGlzLGZ1bmN0aW9uKHQpe3ZhciBuO2lmKG8mJnZvaWQgMD09PXQpe2lmKHZvaWQgMCE9PShuPUsuZ2V0KG8sZSkpKXJldHVybiBuO2lmKHZvaWQgMCE9PShuPW5lKG8sZSkpKXJldHVybiBufWVsc2UgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Sy5zZXQodGhpcyxlLHQpfSl9LG51bGwsdCxhcmd1bWVudHMubGVuZ3RoPjEsbnVsbCwhMCl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe0sucmVtb3ZlKHRoaXMsZSl9KX19KSx3LmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByO2lmKGUpcmV0dXJuIHQ9KHR8fFwiZnhcIikrXCJxdWV1ZVwiLHI9Si5nZXQoZSx0KSxuJiYoIXJ8fEFycmF5LmlzQXJyYXkobik/cj1KLmFjY2VzcyhlLHQsdy5tYWtlQXJyYXkobikpOnIucHVzaChuKSkscnx8W119LGRlcXVldWU6ZnVuY3Rpb24oZSx0KXt0PXR8fFwiZnhcIjt2YXIgbj13LnF1ZXVlKGUsdCkscj1uLmxlbmd0aCxpPW4uc2hpZnQoKSxvPXcuX3F1ZXVlSG9va3MoZSx0KSxhPWZ1bmN0aW9uKCl7dy5kZXF1ZXVlKGUsdCl9O1wiaW5wcm9ncmVzc1wiPT09aSYmKGk9bi5zaGlmdCgpLHItLSksaSYmKFwiZnhcIj09PXQmJm4udW5zaGlmdChcImlucHJvZ3Jlc3NcIiksZGVsZXRlIG8uc3RvcCxpLmNhbGwoZSxhLG8pKSwhciYmbyYmby5lbXB0eS5maXJlKCl9LF9xdWV1ZUhvb2tzOmZ1bmN0aW9uKGUsdCl7dmFyIG49dCtcInF1ZXVlSG9va3NcIjtyZXR1cm4gSi5nZXQoZSxuKXx8Si5hY2Nlc3MoZSxuLHtlbXB0eTp3LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLmFkZChmdW5jdGlvbigpe0oucmVtb3ZlKGUsW3QrXCJxdWV1ZVwiLG5dKX0pfSl9fSksdy5mbi5leHRlbmQoe3F1ZXVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49MjtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgZSYmKHQ9ZSxlPVwiZnhcIixuLS0pLGFyZ3VtZW50cy5sZW5ndGg8bj93LnF1ZXVlKHRoaXNbMF0sZSk6dm9pZCAwPT09dD90aGlzOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBuPXcucXVldWUodGhpcyxlLHQpO3cuX3F1ZXVlSG9va3ModGhpcyxlKSxcImZ4XCI9PT1lJiZcImlucHJvZ3Jlc3NcIiE9PW5bMF0mJncuZGVxdWV1ZSh0aGlzLGUpfSl9LGRlcXVldWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3cuZGVxdWV1ZSh0aGlzLGUpfSl9LGNsZWFyUXVldWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucXVldWUoZXx8XCJmeFwiLFtdKX0scHJvbWlzZTpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MSxpPXcuRGVmZXJyZWQoKSxvPXRoaXMsYT10aGlzLmxlbmd0aCxzPWZ1bmN0aW9uKCl7LS1yfHxpLnJlc29sdmVXaXRoKG8sW29dKX07XCJzdHJpbmdcIiE9dHlwZW9mIGUmJih0PWUsZT12b2lkIDApLGU9ZXx8XCJmeFwiO3doaWxlKGEtLSkobj1KLmdldChvW2FdLGUrXCJxdWV1ZUhvb2tzXCIpKSYmbi5lbXB0eSYmKHIrKyxuLmVtcHR5LmFkZChzKSk7cmV0dXJuIHMoKSxpLnByb21pc2UodCl9fSk7dmFyIHJlPS9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvLnNvdXJjZSxpZT1uZXcgUmVnRXhwKFwiXig/OihbKy1dKT18KShcIityZStcIikoW2EteiVdKikkXCIsXCJpXCIpLG9lPVtcIlRvcFwiLFwiUmlnaHRcIixcIkJvdHRvbVwiLFwiTGVmdFwiXSxhZT1mdW5jdGlvbihlLHQpe3JldHVyblwibm9uZVwiPT09KGU9dHx8ZSkuc3R5bGUuZGlzcGxheXx8XCJcIj09PWUuc3R5bGUuZGlzcGxheSYmdy5jb250YWlucyhlLm93bmVyRG9jdW1lbnQsZSkmJlwibm9uZVwiPT09dy5jc3MoZSxcImRpc3BsYXlcIil9LHNlPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBpLG8sYT17fTtmb3IobyBpbiB0KWFbb109ZS5zdHlsZVtvXSxlLnN0eWxlW29dPXRbb107aT1uLmFwcGx5KGUscnx8W10pO2ZvcihvIGluIHQpZS5zdHlsZVtvXT1hW29dO3JldHVybiBpfTtmdW5jdGlvbiB1ZShlLHQsbixyKXt2YXIgaSxvLGE9MjAscz1yP2Z1bmN0aW9uKCl7cmV0dXJuIHIuY3VyKCl9OmZ1bmN0aW9uKCl7cmV0dXJuIHcuY3NzKGUsdCxcIlwiKX0sdT1zKCksbD1uJiZuWzNdfHwody5jc3NOdW1iZXJbdF0/XCJcIjpcInB4XCIpLGM9KHcuY3NzTnVtYmVyW3RdfHxcInB4XCIhPT1sJiYrdSkmJmllLmV4ZWMody5jc3MoZSx0KSk7aWYoYyYmY1szXSE9PWwpe3UvPTIsbD1sfHxjWzNdLGM9K3V8fDE7d2hpbGUoYS0tKXcuc3R5bGUoZSx0LGMrbCksKDEtbykqKDEtKG89cygpL3V8fC41KSk8PTAmJihhPTApLGMvPW87Yyo9Mix3LnN0eWxlKGUsdCxjK2wpLG49bnx8W119cmV0dXJuIG4mJihjPStjfHwrdXx8MCxpPW5bMV0/YysoblsxXSsxKSpuWzJdOituWzJdLHImJihyLnVuaXQ9bCxyLnN0YXJ0PWMsci5lbmQ9aSkpLGl9dmFyIGxlPXt9O2Z1bmN0aW9uIGNlKGUpe3ZhciB0LG49ZS5vd25lckRvY3VtZW50LHI9ZS5ub2RlTmFtZSxpPWxlW3JdO3JldHVybiBpfHwodD1uLmJvZHkuYXBwZW5kQ2hpbGQobi5jcmVhdGVFbGVtZW50KHIpKSxpPXcuY3NzKHQsXCJkaXNwbGF5XCIpLHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KSxcIm5vbmVcIj09PWkmJihpPVwiYmxvY2tcIiksbGVbcl09aSxpKX1mdW5jdGlvbiBmZShlLHQpe2Zvcih2YXIgbixyLGk9W10sbz0wLGE9ZS5sZW5ndGg7bzxhO28rKykocj1lW29dKS5zdHlsZSYmKG49ci5zdHlsZS5kaXNwbGF5LHQ/KFwibm9uZVwiPT09biYmKGlbb109Si5nZXQocixcImRpc3BsYXlcIil8fG51bGwsaVtvXXx8KHIuc3R5bGUuZGlzcGxheT1cIlwiKSksXCJcIj09PXIuc3R5bGUuZGlzcGxheSYmYWUocikmJihpW29dPWNlKHIpKSk6XCJub25lXCIhPT1uJiYoaVtvXT1cIm5vbmVcIixKLnNldChyLFwiZGlzcGxheVwiLG4pKSk7Zm9yKG89MDtvPGE7bysrKW51bGwhPWlbb10mJihlW29dLnN0eWxlLmRpc3BsYXk9aVtvXSk7cmV0dXJuIGV9dy5mbi5leHRlbmQoe3Nob3c6ZnVuY3Rpb24oKXtyZXR1cm4gZmUodGhpcywhMCl9LGhpZGU6ZnVuY3Rpb24oKXtyZXR1cm4gZmUodGhpcyl9LHRvZ2dsZTpmdW5jdGlvbihlKXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIGU/ZT90aGlzLnNob3coKTp0aGlzLmhpZGUoKTp0aGlzLmVhY2goZnVuY3Rpb24oKXthZSh0aGlzKT93KHRoaXMpLnNob3coKTp3KHRoaXMpLmhpZGUoKX0pfX0pO3ZhciBwZT0vXig/OmNoZWNrYm94fHJhZGlvKSQvaSxkZT0vPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSspL2ksaGU9L14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSxnZT17b3B0aW9uOlsxLFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLFwiPC9zZWxlY3Q+XCJdLHRoZWFkOlsxLFwiPHRhYmxlPlwiLFwiPC90YWJsZT5cIl0sY29sOlsyLFwiPHRhYmxlPjxjb2xncm91cD5cIixcIjwvY29sZ3JvdXA+PC90YWJsZT5cIl0sdHI6WzIsXCI8dGFibGU+PHRib2R5PlwiLFwiPC90Ym9keT48L3RhYmxlPlwiXSx0ZDpbMyxcIjx0YWJsZT48dGJvZHk+PHRyPlwiLFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCJdLF9kZWZhdWx0OlswLFwiXCIsXCJcIl19O2dlLm9wdGdyb3VwPWdlLm9wdGlvbixnZS50Ym9keT1nZS50Zm9vdD1nZS5jb2xncm91cD1nZS5jYXB0aW9uPWdlLnRoZWFkLGdlLnRoPWdlLnRkO2Z1bmN0aW9uIHllKGUsdCl7dmFyIG47cmV0dXJuIG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWU/ZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0fHxcIipcIik6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGUucXVlcnlTZWxlY3RvckFsbD9lLnF1ZXJ5U2VsZWN0b3JBbGwodHx8XCIqXCIpOltdLHZvaWQgMD09PXR8fHQmJk4oZSx0KT93Lm1lcmdlKFtlXSxuKTpufWZ1bmN0aW9uIHZlKGUsdCl7Zm9yKHZhciBuPTAscj1lLmxlbmd0aDtuPHI7bisrKUouc2V0KGVbbl0sXCJnbG9iYWxFdmFsXCIsIXR8fEouZ2V0KHRbbl0sXCJnbG9iYWxFdmFsXCIpKX12YXIgbWU9Lzx8JiM/XFx3KzsvO2Z1bmN0aW9uIHhlKGUsdCxuLHIsaSl7Zm9yKHZhciBvLGEscyx1LGwsYyxmPXQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLHA9W10sZD0wLGg9ZS5sZW5ndGg7ZDxoO2QrKylpZigobz1lW2RdKXx8MD09PW8paWYoXCJvYmplY3RcIj09PXgobykpdy5tZXJnZShwLG8ubm9kZVR5cGU/W29dOm8pO2Vsc2UgaWYobWUudGVzdChvKSl7YT1hfHxmLmFwcGVuZENoaWxkKHQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkscz0oZGUuZXhlYyhvKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCksdT1nZVtzXXx8Z2UuX2RlZmF1bHQsYS5pbm5lckhUTUw9dVsxXSt3Lmh0bWxQcmVmaWx0ZXIobykrdVsyXSxjPXVbMF07d2hpbGUoYy0tKWE9YS5sYXN0Q2hpbGQ7dy5tZXJnZShwLGEuY2hpbGROb2RlcyksKGE9Zi5maXJzdENoaWxkKS50ZXh0Q29udGVudD1cIlwifWVsc2UgcC5wdXNoKHQuY3JlYXRlVGV4dE5vZGUobykpO2YudGV4dENvbnRlbnQ9XCJcIixkPTA7d2hpbGUobz1wW2QrK10paWYociYmdy5pbkFycmF5KG8scik+LTEpaSYmaS5wdXNoKG8pO2Vsc2UgaWYobD13LmNvbnRhaW5zKG8ub3duZXJEb2N1bWVudCxvKSxhPXllKGYuYXBwZW5kQ2hpbGQobyksXCJzY3JpcHRcIiksbCYmdmUoYSksbil7Yz0wO3doaWxlKG89YVtjKytdKWhlLnRlc3Qoby50eXBlfHxcIlwiKSYmbi5wdXNoKG8pfXJldHVybiBmfSFmdW5jdGlvbigpe3ZhciBlPXIuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLmFwcGVuZENoaWxkKHIuY3JlYXRlRWxlbWVudChcImRpdlwiKSksdD1yLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTt0LnNldEF0dHJpYnV0ZShcInR5cGVcIixcInJhZGlvXCIpLHQuc2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiLFwiY2hlY2tlZFwiKSx0LnNldEF0dHJpYnV0ZShcIm5hbWVcIixcInRcIiksZS5hcHBlbmRDaGlsZCh0KSxoLmNoZWNrQ2xvbmU9ZS5jbG9uZU5vZGUoITApLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmNoZWNrZWQsZS5pbm5lckhUTUw9XCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCIsaC5ub0Nsb25lQ2hlY2tlZD0hIWUuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlfSgpO3ZhciBiZT1yLmRvY3VtZW50RWxlbWVudCx3ZT0vXmtleS8sVGU9L14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLENlPS9eKFteLl0qKSg/OlxcLiguKyl8KS87ZnVuY3Rpb24gRWUoKXtyZXR1cm4hMH1mdW5jdGlvbiBrZSgpe3JldHVybiExfWZ1bmN0aW9uIFNlKCl7dHJ5e3JldHVybiByLmFjdGl2ZUVsZW1lbnR9Y2F0Y2goZSl7fX1mdW5jdGlvbiBEZShlLHQsbixyLGksbyl7dmFyIGEscztpZihcIm9iamVjdFwiPT10eXBlb2YgdCl7XCJzdHJpbmdcIiE9dHlwZW9mIG4mJihyPXJ8fG4sbj12b2lkIDApO2ZvcihzIGluIHQpRGUoZSxzLG4scix0W3NdLG8pO3JldHVybiBlfWlmKG51bGw9PXImJm51bGw9PWk/KGk9bixyPW49dm9pZCAwKTpudWxsPT1pJiYoXCJzdHJpbmdcIj09dHlwZW9mIG4/KGk9cixyPXZvaWQgMCk6KGk9cixyPW4sbj12b2lkIDApKSwhMT09PWkpaT1rZTtlbHNlIGlmKCFpKXJldHVybiBlO3JldHVybiAxPT09byYmKGE9aSwoaT1mdW5jdGlvbihlKXtyZXR1cm4gdygpLm9mZihlKSxhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pLmd1aWQ9YS5ndWlkfHwoYS5ndWlkPXcuZ3VpZCsrKSksZS5lYWNoKGZ1bmN0aW9uKCl7dy5ldmVudC5hZGQodGhpcyx0LGkscixuKX0pfXcuZXZlbnQ9e2dsb2JhbDp7fSxhZGQ6ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbyxhLHMsdSxsLGMsZixwLGQsaCxnLHk9Si5nZXQoZSk7aWYoeSl7bi5oYW5kbGVyJiYobj0obz1uKS5oYW5kbGVyLGk9by5zZWxlY3RvciksaSYmdy5maW5kLm1hdGNoZXNTZWxlY3RvcihiZSxpKSxuLmd1aWR8fChuLmd1aWQ9dy5ndWlkKyspLCh1PXkuZXZlbnRzKXx8KHU9eS5ldmVudHM9e30pLChhPXkuaGFuZGxlKXx8KGE9eS5oYW5kbGU9ZnVuY3Rpb24odCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHcmJncuZXZlbnQudHJpZ2dlcmVkIT09dC50eXBlP3cuZXZlbnQuZGlzcGF0Y2guYXBwbHkoZSxhcmd1bWVudHMpOnZvaWQgMH0pLGw9KHQ9KHR8fFwiXCIpLm1hdGNoKE0pfHxbXCJcIl0pLmxlbmd0aDt3aGlsZShsLS0pZD1nPShzPUNlLmV4ZWModFtsXSl8fFtdKVsxXSxoPShzWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLGQmJihmPXcuZXZlbnQuc3BlY2lhbFtkXXx8e30sZD0oaT9mLmRlbGVnYXRlVHlwZTpmLmJpbmRUeXBlKXx8ZCxmPXcuZXZlbnQuc3BlY2lhbFtkXXx8e30sYz13LmV4dGVuZCh7dHlwZTpkLG9yaWdUeXBlOmcsZGF0YTpyLGhhbmRsZXI6bixndWlkOm4uZ3VpZCxzZWxlY3RvcjppLG5lZWRzQ29udGV4dDppJiZ3LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoaSksbmFtZXNwYWNlOmguam9pbihcIi5cIil9LG8pLChwPXVbZF0pfHwoKHA9dVtkXT1bXSkuZGVsZWdhdGVDb3VudD0wLGYuc2V0dXAmJiExIT09Zi5zZXR1cC5jYWxsKGUscixoLGEpfHxlLmFkZEV2ZW50TGlzdGVuZXImJmUuYWRkRXZlbnRMaXN0ZW5lcihkLGEpKSxmLmFkZCYmKGYuYWRkLmNhbGwoZSxjKSxjLmhhbmRsZXIuZ3VpZHx8KGMuaGFuZGxlci5ndWlkPW4uZ3VpZCkpLGk/cC5zcGxpY2UocC5kZWxlZ2F0ZUNvdW50KyssMCxjKTpwLnB1c2goYyksdy5ldmVudC5nbG9iYWxbZF09ITApfX0scmVtb3ZlOmZ1bmN0aW9uKGUsdCxuLHIsaSl7dmFyIG8sYSxzLHUsbCxjLGYscCxkLGgsZyx5PUouaGFzRGF0YShlKSYmSi5nZXQoZSk7aWYoeSYmKHU9eS5ldmVudHMpKXtsPSh0PSh0fHxcIlwiKS5tYXRjaChNKXx8W1wiXCJdKS5sZW5ndGg7d2hpbGUobC0tKWlmKHM9Q2UuZXhlYyh0W2xdKXx8W10sZD1nPXNbMV0saD0oc1syXXx8XCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSxkKXtmPXcuZXZlbnQuc3BlY2lhbFtkXXx8e30scD11W2Q9KHI/Zi5kZWxlZ2F0ZVR5cGU6Zi5iaW5kVHlwZSl8fGRdfHxbXSxzPXNbMl0mJm5ldyBSZWdFeHAoXCIoXnxcXFxcLilcIitoLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKStcIihcXFxcLnwkKVwiKSxhPW89cC5sZW5ndGg7d2hpbGUoby0tKWM9cFtvXSwhaSYmZyE9PWMub3JpZ1R5cGV8fG4mJm4uZ3VpZCE9PWMuZ3VpZHx8cyYmIXMudGVzdChjLm5hbWVzcGFjZSl8fHImJnIhPT1jLnNlbGVjdG9yJiYoXCIqKlwiIT09cnx8IWMuc2VsZWN0b3IpfHwocC5zcGxpY2UobywxKSxjLnNlbGVjdG9yJiZwLmRlbGVnYXRlQ291bnQtLSxmLnJlbW92ZSYmZi5yZW1vdmUuY2FsbChlLGMpKTthJiYhcC5sZW5ndGgmJihmLnRlYXJkb3duJiYhMSE9PWYudGVhcmRvd24uY2FsbChlLGgseS5oYW5kbGUpfHx3LnJlbW92ZUV2ZW50KGUsZCx5LmhhbmRsZSksZGVsZXRlIHVbZF0pfWVsc2UgZm9yKGQgaW4gdSl3LmV2ZW50LnJlbW92ZShlLGQrdFtsXSxuLHIsITApO3cuaXNFbXB0eU9iamVjdCh1KSYmSi5yZW1vdmUoZSxcImhhbmRsZSBldmVudHNcIil9fSxkaXNwYXRjaDpmdW5jdGlvbihlKXt2YXIgdD13LmV2ZW50LmZpeChlKSxuLHIsaSxvLGEscyx1PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKSxsPShKLmdldCh0aGlzLFwiZXZlbnRzXCIpfHx7fSlbdC50eXBlXXx8W10sYz13LmV2ZW50LnNwZWNpYWxbdC50eXBlXXx8e307Zm9yKHVbMF09dCxuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl1W25dPWFyZ3VtZW50c1tuXTtpZih0LmRlbGVnYXRlVGFyZ2V0PXRoaXMsIWMucHJlRGlzcGF0Y2h8fCExIT09Yy5wcmVEaXNwYXRjaC5jYWxsKHRoaXMsdCkpe3M9dy5ldmVudC5oYW5kbGVycy5jYWxsKHRoaXMsdCxsKSxuPTA7d2hpbGUoKG89c1tuKytdKSYmIXQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSl7dC5jdXJyZW50VGFyZ2V0PW8uZWxlbSxyPTA7d2hpbGUoKGE9by5oYW5kbGVyc1tyKytdKSYmIXQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSl0LnJuYW1lc3BhY2UmJiF0LnJuYW1lc3BhY2UudGVzdChhLm5hbWVzcGFjZSl8fCh0LmhhbmRsZU9iaj1hLHQuZGF0YT1hLmRhdGEsdm9pZCAwIT09KGk9KCh3LmV2ZW50LnNwZWNpYWxbYS5vcmlnVHlwZV18fHt9KS5oYW5kbGV8fGEuaGFuZGxlcikuYXBwbHkoby5lbGVtLHUpKSYmITE9PT0odC5yZXN1bHQ9aSkmJih0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSkpfXJldHVybiBjLnBvc3REaXNwYXRjaCYmYy5wb3N0RGlzcGF0Y2guY2FsbCh0aGlzLHQpLHQucmVzdWx0fX0saGFuZGxlcnM6ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGksbyxhLHM9W10sdT10LmRlbGVnYXRlQ291bnQsbD1lLnRhcmdldDtpZih1JiZsLm5vZGVUeXBlJiYhKFwiY2xpY2tcIj09PWUudHlwZSYmZS5idXR0b24+PTEpKWZvcig7bCE9PXRoaXM7bD1sLnBhcmVudE5vZGV8fHRoaXMpaWYoMT09PWwubm9kZVR5cGUmJihcImNsaWNrXCIhPT1lLnR5cGV8fCEwIT09bC5kaXNhYmxlZCkpe2ZvcihvPVtdLGE9e30sbj0wO248dTtuKyspdm9pZCAwPT09YVtpPShyPXRbbl0pLnNlbGVjdG9yK1wiIFwiXSYmKGFbaV09ci5uZWVkc0NvbnRleHQ/dyhpLHRoaXMpLmluZGV4KGwpPi0xOncuZmluZChpLHRoaXMsbnVsbCxbbF0pLmxlbmd0aCksYVtpXSYmby5wdXNoKHIpO28ubGVuZ3RoJiZzLnB1c2goe2VsZW06bCxoYW5kbGVyczpvfSl9cmV0dXJuIGw9dGhpcyx1PHQubGVuZ3RoJiZzLnB1c2goe2VsZW06bCxoYW5kbGVyczp0LnNsaWNlKHUpfSksc30sYWRkUHJvcDpmdW5jdGlvbihlLHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh3LkV2ZW50LnByb3RvdHlwZSxlLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6Zyh0KT9mdW5jdGlvbigpe2lmKHRoaXMub3JpZ2luYWxFdmVudClyZXR1cm4gdCh0aGlzLm9yaWdpbmFsRXZlbnQpfTpmdW5jdGlvbigpe2lmKHRoaXMub3JpZ2luYWxFdmVudClyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50W2VdfSxzZXQ6ZnVuY3Rpb24odCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsZSx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6dH0pfX0pfSxmaXg6ZnVuY3Rpb24oZSl7cmV0dXJuIGVbdy5leHBhbmRvXT9lOm5ldyB3LkV2ZW50KGUpfSxzcGVjaWFsOntsb2FkOntub0J1YmJsZTohMH0sZm9jdXM6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZih0aGlzIT09U2UoKSYmdGhpcy5mb2N1cylyZXR1cm4gdGhpcy5mb2N1cygpLCExfSxkZWxlZ2F0ZVR5cGU6XCJmb2N1c2luXCJ9LGJsdXI6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZih0aGlzPT09U2UoKSYmdGhpcy5ibHVyKXJldHVybiB0aGlzLmJsdXIoKSwhMX0sZGVsZWdhdGVUeXBlOlwiZm9jdXNvdXRcIn0sY2xpY2s6e3RyaWdnZXI6ZnVuY3Rpb24oKXtpZihcImNoZWNrYm94XCI9PT10aGlzLnR5cGUmJnRoaXMuY2xpY2smJk4odGhpcyxcImlucHV0XCIpKXJldHVybiB0aGlzLmNsaWNrKCksITF9LF9kZWZhdWx0OmZ1bmN0aW9uKGUpe3JldHVybiBOKGUudGFyZ2V0LFwiYVwiKX19LGJlZm9yZXVubG9hZDp7cG9zdERpc3BhdGNoOmZ1bmN0aW9uKGUpe3ZvaWQgMCE9PWUucmVzdWx0JiZlLm9yaWdpbmFsRXZlbnQmJihlLm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWU9ZS5yZXN1bHQpfX19fSx3LnJlbW92ZUV2ZW50PWZ1bmN0aW9uKGUsdCxuKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXImJmUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4pfSx3LkV2ZW50PWZ1bmN0aW9uKGUsdCl7aWYoISh0aGlzIGluc3RhbmNlb2Ygdy5FdmVudCkpcmV0dXJuIG5ldyB3LkV2ZW50KGUsdCk7ZSYmZS50eXBlPyh0aGlzLm9yaWdpbmFsRXZlbnQ9ZSx0aGlzLnR5cGU9ZS50eXBlLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWUuZGVmYXVsdFByZXZlbnRlZHx8dm9pZCAwPT09ZS5kZWZhdWx0UHJldmVudGVkJiYhMT09PWUucmV0dXJuVmFsdWU/RWU6a2UsdGhpcy50YXJnZXQ9ZS50YXJnZXQmJjM9PT1lLnRhcmdldC5ub2RlVHlwZT9lLnRhcmdldC5wYXJlbnROb2RlOmUudGFyZ2V0LHRoaXMuY3VycmVudFRhcmdldD1lLmN1cnJlbnRUYXJnZXQsdGhpcy5yZWxhdGVkVGFyZ2V0PWUucmVsYXRlZFRhcmdldCk6dGhpcy50eXBlPWUsdCYmdy5leHRlbmQodGhpcyx0KSx0aGlzLnRpbWVTdGFtcD1lJiZlLnRpbWVTdGFtcHx8RGF0ZS5ub3coKSx0aGlzW3cuZXhwYW5kb109ITB9LHcuRXZlbnQucHJvdG90eXBlPXtjb25zdHJ1Y3Rvcjp3LkV2ZW50LGlzRGVmYXVsdFByZXZlbnRlZDprZSxpc1Byb3BhZ2F0aW9uU3RvcHBlZDprZSxpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDprZSxpc1NpbXVsYXRlZDohMSxwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1FZSxlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5wcmV2ZW50RGVmYXVsdCgpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1FZSxlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5zdG9wUHJvcGFnYXRpb24oKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9RWUsZSYmIXRoaXMuaXNTaW11bGF0ZWQmJmUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksdGhpcy5zdG9wUHJvcGFnYXRpb24oKX19LHcuZWFjaCh7YWx0S2V5OiEwLGJ1YmJsZXM6ITAsY2FuY2VsYWJsZTohMCxjaGFuZ2VkVG91Y2hlczohMCxjdHJsS2V5OiEwLGRldGFpbDohMCxldmVudFBoYXNlOiEwLG1ldGFLZXk6ITAscGFnZVg6ITAscGFnZVk6ITAsc2hpZnRLZXk6ITAsdmlldzohMCxcImNoYXJcIjohMCxjaGFyQ29kZTohMCxrZXk6ITAsa2V5Q29kZTohMCxidXR0b246ITAsYnV0dG9uczohMCxjbGllbnRYOiEwLGNsaWVudFk6ITAsb2Zmc2V0WDohMCxvZmZzZXRZOiEwLHBvaW50ZXJJZDohMCxwb2ludGVyVHlwZTohMCxzY3JlZW5YOiEwLHNjcmVlblk6ITAsdGFyZ2V0VG91Y2hlczohMCx0b0VsZW1lbnQ6ITAsdG91Y2hlczohMCx3aGljaDpmdW5jdGlvbihlKXt2YXIgdD1lLmJ1dHRvbjtyZXR1cm4gbnVsbD09ZS53aGljaCYmd2UudGVzdChlLnR5cGUpP251bGwhPWUuY2hhckNvZGU/ZS5jaGFyQ29kZTplLmtleUNvZGU6IWUud2hpY2gmJnZvaWQgMCE9PXQmJlRlLnRlc3QoZS50eXBlKT8xJnQ/MToyJnQ/Mzo0JnQ/MjowOmUud2hpY2h9fSx3LmV2ZW50LmFkZFByb3ApLHcuZWFjaCh7bW91c2VlbnRlcjpcIm1vdXNlb3ZlclwiLG1vdXNlbGVhdmU6XCJtb3VzZW91dFwiLHBvaW50ZXJlbnRlcjpcInBvaW50ZXJvdmVyXCIscG9pbnRlcmxlYXZlOlwicG9pbnRlcm91dFwifSxmdW5jdGlvbihlLHQpe3cuZXZlbnQuc3BlY2lhbFtlXT17ZGVsZWdhdGVUeXBlOnQsYmluZFR5cGU6dCxoYW5kbGU6ZnVuY3Rpb24oZSl7dmFyIG4scj10aGlzLGk9ZS5yZWxhdGVkVGFyZ2V0LG89ZS5oYW5kbGVPYmo7cmV0dXJuIGkmJihpPT09cnx8dy5jb250YWlucyhyLGkpKXx8KGUudHlwZT1vLm9yaWdUeXBlLG49by5oYW5kbGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxlLnR5cGU9dCksbn19fSksdy5mbi5leHRlbmQoe29uOmZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBEZSh0aGlzLGUsdCxuLHIpfSxvbmU6ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIERlKHRoaXMsZSx0LG4sciwxKX0sb2ZmOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpO2lmKGUmJmUucHJldmVudERlZmF1bHQmJmUuaGFuZGxlT2JqKXJldHVybiByPWUuaGFuZGxlT2JqLHcoZS5kZWxlZ2F0ZVRhcmdldCkub2ZmKHIubmFtZXNwYWNlP3Iub3JpZ1R5cGUrXCIuXCIrci5uYW1lc3BhY2U6ci5vcmlnVHlwZSxyLnNlbGVjdG9yLHIuaGFuZGxlciksdGhpcztpZihcIm9iamVjdFwiPT10eXBlb2YgZSl7Zm9yKGkgaW4gZSl0aGlzLm9mZihpLHQsZVtpXSk7cmV0dXJuIHRoaXN9cmV0dXJuITEhPT10JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0fHwobj10LHQ9dm9pZCAwKSwhMT09PW4mJihuPWtlKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt3LmV2ZW50LnJlbW92ZSh0aGlzLGUsbix0KX0pfX0pO3ZhciBOZT0vPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxBZT0vPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxqZT0vY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLHFlPS9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztmdW5jdGlvbiBMZShlLHQpe3JldHVybiBOKGUsXCJ0YWJsZVwiKSYmTigxMSE9PXQubm9kZVR5cGU/dDp0LmZpcnN0Q2hpbGQsXCJ0clwiKT93KGUpLmNoaWxkcmVuKFwidGJvZHlcIilbMF18fGU6ZX1mdW5jdGlvbiBIZShlKXtyZXR1cm4gZS50eXBlPShudWxsIT09ZS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKStcIi9cIitlLnR5cGUsZX1mdW5jdGlvbiBPZShlKXtyZXR1cm5cInRydWUvXCI9PT0oZS50eXBlfHxcIlwiKS5zbGljZSgwLDUpP2UudHlwZT1lLnR5cGUuc2xpY2UoNSk6ZS5yZW1vdmVBdHRyaWJ1dGUoXCJ0eXBlXCIpLGV9ZnVuY3Rpb24gUGUoZSx0KXt2YXIgbixyLGksbyxhLHMsdSxsO2lmKDE9PT10Lm5vZGVUeXBlKXtpZihKLmhhc0RhdGEoZSkmJihvPUouYWNjZXNzKGUpLGE9Si5zZXQodCxvKSxsPW8uZXZlbnRzKSl7ZGVsZXRlIGEuaGFuZGxlLGEuZXZlbnRzPXt9O2ZvcihpIGluIGwpZm9yKG49MCxyPWxbaV0ubGVuZ3RoO248cjtuKyspdy5ldmVudC5hZGQodCxpLGxbaV1bbl0pfUsuaGFzRGF0YShlKSYmKHM9Sy5hY2Nlc3MoZSksdT13LmV4dGVuZCh7fSxzKSxLLnNldCh0LHUpKX19ZnVuY3Rpb24gTWUoZSx0KXt2YXIgbj10Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XCJpbnB1dFwiPT09biYmcGUudGVzdChlLnR5cGUpP3QuY2hlY2tlZD1lLmNoZWNrZWQ6XCJpbnB1dFwiIT09biYmXCJ0ZXh0YXJlYVwiIT09bnx8KHQuZGVmYXVsdFZhbHVlPWUuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBSZShlLHQsbixyKXt0PWEuYXBwbHkoW10sdCk7dmFyIGksbyxzLHUsbCxjLGY9MCxwPWUubGVuZ3RoLGQ9cC0xLHk9dFswXSx2PWcoeSk7aWYodnx8cD4xJiZcInN0cmluZ1wiPT10eXBlb2YgeSYmIWguY2hlY2tDbG9uZSYmamUudGVzdCh5KSlyZXR1cm4gZS5lYWNoKGZ1bmN0aW9uKGkpe3ZhciBvPWUuZXEoaSk7diYmKHRbMF09eS5jYWxsKHRoaXMsaSxvLmh0bWwoKSkpLFJlKG8sdCxuLHIpfSk7aWYocCYmKGk9eGUodCxlWzBdLm93bmVyRG9jdW1lbnQsITEsZSxyKSxvPWkuZmlyc3RDaGlsZCwxPT09aS5jaGlsZE5vZGVzLmxlbmd0aCYmKGk9byksb3x8cikpe2Zvcih1PShzPXcubWFwKHllKGksXCJzY3JpcHRcIiksSGUpKS5sZW5ndGg7ZjxwO2YrKylsPWksZiE9PWQmJihsPXcuY2xvbmUobCwhMCwhMCksdSYmdy5tZXJnZShzLHllKGwsXCJzY3JpcHRcIikpKSxuLmNhbGwoZVtmXSxsLGYpO2lmKHUpZm9yKGM9c1tzLmxlbmd0aC0xXS5vd25lckRvY3VtZW50LHcubWFwKHMsT2UpLGY9MDtmPHU7ZisrKWw9c1tmXSxoZS50ZXN0KGwudHlwZXx8XCJcIikmJiFKLmFjY2VzcyhsLFwiZ2xvYmFsRXZhbFwiKSYmdy5jb250YWlucyhjLGwpJiYobC5zcmMmJlwibW9kdWxlXCIhPT0obC50eXBlfHxcIlwiKS50b0xvd2VyQ2FzZSgpP3cuX2V2YWxVcmwmJncuX2V2YWxVcmwobC5zcmMpOm0obC50ZXh0Q29udGVudC5yZXBsYWNlKHFlLFwiXCIpLGMsbCkpfXJldHVybiBlfWZ1bmN0aW9uIEllKGUsdCxuKXtmb3IodmFyIHIsaT10P3cuZmlsdGVyKHQsZSk6ZSxvPTA7bnVsbCE9KHI9aVtvXSk7bysrKW58fDEhPT1yLm5vZGVUeXBlfHx3LmNsZWFuRGF0YSh5ZShyKSksci5wYXJlbnROb2RlJiYobiYmdy5jb250YWlucyhyLm93bmVyRG9jdW1lbnQscikmJnZlKHllKHIsXCJzY3JpcHRcIikpLHIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyKSk7cmV0dXJuIGV9dy5leHRlbmQoe2h0bWxQcmVmaWx0ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZShOZSxcIjwkMT48LyQyPlwiKX0sY2xvbmU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHM9ZS5jbG9uZU5vZGUoITApLHU9dy5jb250YWlucyhlLm93bmVyRG9jdW1lbnQsZSk7aWYoIShoLm5vQ2xvbmVDaGVja2VkfHwxIT09ZS5ub2RlVHlwZSYmMTEhPT1lLm5vZGVUeXBlfHx3LmlzWE1MRG9jKGUpKSlmb3IoYT15ZShzKSxyPTAsaT0obz15ZShlKSkubGVuZ3RoO3I8aTtyKyspTWUob1tyXSxhW3JdKTtpZih0KWlmKG4pZm9yKG89b3x8eWUoZSksYT1hfHx5ZShzKSxyPTAsaT1vLmxlbmd0aDtyPGk7cisrKVBlKG9bcl0sYVtyXSk7ZWxzZSBQZShlLHMpO3JldHVybihhPXllKHMsXCJzY3JpcHRcIikpLmxlbmd0aD4wJiZ2ZShhLCF1JiZ5ZShlLFwic2NyaXB0XCIpKSxzfSxjbGVhbkRhdGE6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG4scixpPXcuZXZlbnQuc3BlY2lhbCxvPTA7dm9pZCAwIT09KG49ZVtvXSk7bysrKWlmKFkobikpe2lmKHQ9bltKLmV4cGFuZG9dKXtpZih0LmV2ZW50cylmb3IociBpbiB0LmV2ZW50cylpW3JdP3cuZXZlbnQucmVtb3ZlKG4scik6dy5yZW1vdmVFdmVudChuLHIsdC5oYW5kbGUpO25bSi5leHBhbmRvXT12b2lkIDB9bltLLmV4cGFuZG9dJiYobltLLmV4cGFuZG9dPXZvaWQgMCl9fX0pLHcuZm4uZXh0ZW5kKHtkZXRhY2g6ZnVuY3Rpb24oZSl7cmV0dXJuIEllKHRoaXMsZSwhMCl9LHJlbW92ZTpmdW5jdGlvbihlKXtyZXR1cm4gSWUodGhpcyxlKX0sdGV4dDpmdW5jdGlvbihlKXtyZXR1cm4geih0aGlzLGZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lP3cudGV4dCh0aGlzKTp0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbigpezEhPT10aGlzLm5vZGVUeXBlJiYxMSE9PXRoaXMubm9kZVR5cGUmJjkhPT10aGlzLm5vZGVUeXBlfHwodGhpcy50ZXh0Q29udGVudD1lKX0pfSxudWxsLGUsYXJndW1lbnRzLmxlbmd0aCl9LGFwcGVuZDpmdW5jdGlvbigpe3JldHVybiBSZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXsxIT09dGhpcy5ub2RlVHlwZSYmMTEhPT10aGlzLm5vZGVUeXBlJiY5IT09dGhpcy5ub2RlVHlwZXx8TGUodGhpcyxlKS5hcHBlbmRDaGlsZChlKX0pfSxwcmVwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIFJlKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgdD1MZSh0aGlzLGUpO3QuaW5zZXJ0QmVmb3JlKGUsdC5maXJzdENoaWxkKX19KX0sYmVmb3JlOmZ1bmN0aW9uKCl7cmV0dXJuIFJlKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHRoaXMpfSl9LGFmdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIFJlKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHRoaXMubmV4dFNpYmxpbmcpfSl9LGVtcHR5OmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9MDtudWxsIT0oZT10aGlzW3RdKTt0KyspMT09PWUubm9kZVR5cGUmJih3LmNsZWFuRGF0YSh5ZShlLCExKSksZS50ZXh0Q29udGVudD1cIlwiKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1udWxsIT1lJiZlLHQ9bnVsbD09dD9lOnQsdGhpcy5tYXAoZnVuY3Rpb24oKXtyZXR1cm4gdy5jbG9uZSh0aGlzLGUsdCl9KX0saHRtbDpmdW5jdGlvbihlKXtyZXR1cm4geih0aGlzLGZ1bmN0aW9uKGUpe3ZhciB0PXRoaXNbMF18fHt9LG49MCxyPXRoaXMubGVuZ3RoO2lmKHZvaWQgMD09PWUmJjE9PT10Lm5vZGVUeXBlKXJldHVybiB0LmlubmVySFRNTDtpZihcInN0cmluZ1wiPT10eXBlb2YgZSYmIUFlLnRlc3QoZSkmJiFnZVsoZGUuZXhlYyhlKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCldKXtlPXcuaHRtbFByZWZpbHRlcihlKTt0cnl7Zm9yKDtuPHI7bisrKTE9PT0odD10aGlzW25dfHx7fSkubm9kZVR5cGUmJih3LmNsZWFuRGF0YSh5ZSh0LCExKSksdC5pbm5lckhUTUw9ZSk7dD0wfWNhdGNoKGUpe319dCYmdGhpcy5lbXB0eSgpLmFwcGVuZChlKX0sbnVsbCxlLGFyZ3VtZW50cy5sZW5ndGgpfSxyZXBsYWNlV2l0aDpmdW5jdGlvbigpe3ZhciBlPVtdO3JldHVybiBSZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbih0KXt2YXIgbj10aGlzLnBhcmVudE5vZGU7dy5pbkFycmF5KHRoaXMsZSk8MCYmKHcuY2xlYW5EYXRhKHllKHRoaXMpKSxuJiZuLnJlcGxhY2VDaGlsZCh0LHRoaXMpKX0sZSl9fSksdy5lYWNoKHthcHBlbmRUbzpcImFwcGVuZFwiLHByZXBlbmRUbzpcInByZXBlbmRcIixpbnNlcnRCZWZvcmU6XCJiZWZvcmVcIixpbnNlcnRBZnRlcjpcImFmdGVyXCIscmVwbGFjZUFsbDpcInJlcGxhY2VXaXRoXCJ9LGZ1bmN0aW9uKGUsdCl7dy5mbltlXT1mdW5jdGlvbihlKXtmb3IodmFyIG4scj1bXSxpPXcoZSksbz1pLmxlbmd0aC0xLGE9MDthPD1vO2ErKyluPWE9PT1vP3RoaXM6dGhpcy5jbG9uZSghMCksdyhpW2FdKVt0XShuKSxzLmFwcGx5KHIsbi5nZXQoKSk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKHIpfX0pO3ZhciBXZT1uZXcgUmVnRXhwKFwiXihcIityZStcIikoPyFweClbYS16JV0rJFwiLFwiaVwiKSwkZT1mdW5jdGlvbih0KXt2YXIgbj10Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7cmV0dXJuIG4mJm4ub3BlbmVyfHwobj1lKSxuLmdldENvbXB1dGVkU3R5bGUodCl9LEJlPW5ldyBSZWdFeHAob2Uuam9pbihcInxcIiksXCJpXCIpOyFmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXtpZihjKXtsLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7bWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCIsYy5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO21hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7d2lkdGg6NjAlO3RvcDoxJVwiLGJlLmFwcGVuZENoaWxkKGwpLmFwcGVuZENoaWxkKGMpO3ZhciB0PWUuZ2V0Q29tcHV0ZWRTdHlsZShjKTtpPVwiMSVcIiE9PXQudG9wLHU9MTI9PT1uKHQubWFyZ2luTGVmdCksYy5zdHlsZS5yaWdodD1cIjYwJVwiLHM9MzY9PT1uKHQucmlnaHQpLG89MzY9PT1uKHQud2lkdGgpLGMuc3R5bGUucG9zaXRpb249XCJhYnNvbHV0ZVwiLGE9MzY9PT1jLm9mZnNldFdpZHRofHxcImFic29sdXRlXCIsYmUucmVtb3ZlQ2hpbGQobCksYz1udWxsfX1mdW5jdGlvbiBuKGUpe3JldHVybiBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoZSkpfXZhciBpLG8sYSxzLHUsbD1yLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYz1yLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Yy5zdHlsZSYmKGMuc3R5bGUuYmFja2dyb3VuZENsaXA9XCJjb250ZW50LWJveFwiLGMuY2xvbmVOb2RlKCEwKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD1cIlwiLGguY2xlYXJDbG9uZVN0eWxlPVwiY29udGVudC1ib3hcIj09PWMuc3R5bGUuYmFja2dyb3VuZENsaXAsdy5leHRlbmQoaCx7Ym94U2l6aW5nUmVsaWFibGU6ZnVuY3Rpb24oKXtyZXR1cm4gdCgpLG99LHBpeGVsQm94U3R5bGVzOmZ1bmN0aW9uKCl7cmV0dXJuIHQoKSxzfSxwaXhlbFBvc2l0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHQoKSxpfSxyZWxpYWJsZU1hcmdpbkxlZnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdCgpLHV9LHNjcm9sbGJveFNpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdCgpLGF9fSkpfSgpO2Z1bmN0aW9uIEZlKGUsdCxuKXt2YXIgcixpLG8sYSxzPWUuc3R5bGU7cmV0dXJuKG49bnx8JGUoZSkpJiYoXCJcIiE9PShhPW4uZ2V0UHJvcGVydHlWYWx1ZSh0KXx8blt0XSl8fHcuY29udGFpbnMoZS5vd25lckRvY3VtZW50LGUpfHwoYT13LnN0eWxlKGUsdCkpLCFoLnBpeGVsQm94U3R5bGVzKCkmJldlLnRlc3QoYSkmJkJlLnRlc3QodCkmJihyPXMud2lkdGgsaT1zLm1pbldpZHRoLG89cy5tYXhXaWR0aCxzLm1pbldpZHRoPXMubWF4V2lkdGg9cy53aWR0aD1hLGE9bi53aWR0aCxzLndpZHRoPXIscy5taW5XaWR0aD1pLHMubWF4V2lkdGg9bykpLHZvaWQgMCE9PWE/YStcIlwiOmF9ZnVuY3Rpb24gX2UoZSx0KXtyZXR1cm57Z2V0OmZ1bmN0aW9uKCl7aWYoIWUoKSlyZXR1cm4odGhpcy5nZXQ9dCkuYXBwbHkodGhpcyxhcmd1bWVudHMpO2RlbGV0ZSB0aGlzLmdldH19fXZhciB6ZT0vXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sWGU9L14tLS8sVWU9e3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix2aXNpYmlsaXR5OlwiaGlkZGVuXCIsZGlzcGxheTpcImJsb2NrXCJ9LFZlPXtsZXR0ZXJTcGFjaW5nOlwiMFwiLGZvbnRXZWlnaHQ6XCI0MDBcIn0sR2U9W1wiV2Via2l0XCIsXCJNb3pcIixcIm1zXCJdLFllPXIuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZTtmdW5jdGlvbiBRZShlKXtpZihlIGluIFllKXJldHVybiBlO3ZhciB0PWVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpLG49R2UubGVuZ3RoO3doaWxlKG4tLSlpZigoZT1HZVtuXSt0KWluIFllKXJldHVybiBlfWZ1bmN0aW9uIEplKGUpe3ZhciB0PXcuY3NzUHJvcHNbZV07cmV0dXJuIHR8fCh0PXcuY3NzUHJvcHNbZV09UWUoZSl8fGUpLHR9ZnVuY3Rpb24gS2UoZSx0LG4pe3ZhciByPWllLmV4ZWModCk7cmV0dXJuIHI/TWF0aC5tYXgoMCxyWzJdLShufHwwKSkrKHJbM118fFwicHhcIik6dH1mdW5jdGlvbiBaZShlLHQsbixyLGksbyl7dmFyIGE9XCJ3aWR0aFwiPT09dD8xOjAscz0wLHU9MDtpZihuPT09KHI/XCJib3JkZXJcIjpcImNvbnRlbnRcIikpcmV0dXJuIDA7Zm9yKDthPDQ7YSs9MilcIm1hcmdpblwiPT09biYmKHUrPXcuY3NzKGUsbitvZVthXSwhMCxpKSkscj8oXCJjb250ZW50XCI9PT1uJiYodS09dy5jc3MoZSxcInBhZGRpbmdcIitvZVthXSwhMCxpKSksXCJtYXJnaW5cIiE9PW4mJih1LT13LmNzcyhlLFwiYm9yZGVyXCIrb2VbYV0rXCJXaWR0aFwiLCEwLGkpKSk6KHUrPXcuY3NzKGUsXCJwYWRkaW5nXCIrb2VbYV0sITAsaSksXCJwYWRkaW5nXCIhPT1uP3UrPXcuY3NzKGUsXCJib3JkZXJcIitvZVthXStcIldpZHRoXCIsITAsaSk6cys9dy5jc3MoZSxcImJvcmRlclwiK29lW2FdK1wiV2lkdGhcIiwhMCxpKSk7cmV0dXJuIXImJm8+PTAmJih1Kz1NYXRoLm1heCgwLE1hdGguY2VpbChlW1wib2Zmc2V0XCIrdFswXS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSldLW8tdS1zLS41KSkpLHV9ZnVuY3Rpb24gZXQoZSx0LG4pe3ZhciByPSRlKGUpLGk9RmUoZSx0LHIpLG89XCJib3JkZXItYm94XCI9PT13LmNzcyhlLFwiYm94U2l6aW5nXCIsITEsciksYT1vO2lmKFdlLnRlc3QoaSkpe2lmKCFuKXJldHVybiBpO2k9XCJhdXRvXCJ9cmV0dXJuIGE9YSYmKGguYm94U2l6aW5nUmVsaWFibGUoKXx8aT09PWUuc3R5bGVbdF0pLChcImF1dG9cIj09PWl8fCFwYXJzZUZsb2F0KGkpJiZcImlubGluZVwiPT09dy5jc3MoZSxcImRpc3BsYXlcIiwhMSxyKSkmJihpPWVbXCJvZmZzZXRcIit0WzBdLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKV0sYT0hMCksKGk9cGFyc2VGbG9hdChpKXx8MCkrWmUoZSx0LG58fChvP1wiYm9yZGVyXCI6XCJjb250ZW50XCIpLGEscixpKStcInB4XCJ9dy5leHRlbmQoe2Nzc0hvb2tzOntvcGFjaXR5OntnZXQ6ZnVuY3Rpb24oZSx0KXtpZih0KXt2YXIgbj1GZShlLFwib3BhY2l0eVwiKTtyZXR1cm5cIlwiPT09bj9cIjFcIjpufX19fSxjc3NOdW1iZXI6e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGNvbHVtbkNvdW50OiEwLGZpbGxPcGFjaXR5OiEwLGZsZXhHcm93OiEwLGZsZXhTaHJpbms6ITAsZm9udFdlaWdodDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITB9LGNzc1Byb3BzOnt9LHN0eWxlOmZ1bmN0aW9uKGUsdCxuLHIpe2lmKGUmJjMhPT1lLm5vZGVUeXBlJiY4IT09ZS5ub2RlVHlwZSYmZS5zdHlsZSl7dmFyIGksbyxhLHM9Ryh0KSx1PVhlLnRlc3QodCksbD1lLnN0eWxlO2lmKHV8fCh0PUplKHMpKSxhPXcuY3NzSG9va3NbdF18fHcuY3NzSG9va3Nbc10sdm9pZCAwPT09bilyZXR1cm4gYSYmXCJnZXRcImluIGEmJnZvaWQgMCE9PShpPWEuZ2V0KGUsITEscikpP2k6bFt0XTtcInN0cmluZ1wiPT0obz10eXBlb2YgbikmJihpPWllLmV4ZWMobikpJiZpWzFdJiYobj11ZShlLHQsaSksbz1cIm51bWJlclwiKSxudWxsIT1uJiZuPT09biYmKFwibnVtYmVyXCI9PT1vJiYobis9aSYmaVszXXx8KHcuY3NzTnVtYmVyW3NdP1wiXCI6XCJweFwiKSksaC5jbGVhckNsb25lU3R5bGV8fFwiXCIhPT1ufHwwIT09dC5pbmRleE9mKFwiYmFja2dyb3VuZFwiKXx8KGxbdF09XCJpbmhlcml0XCIpLGEmJlwic2V0XCJpbiBhJiZ2b2lkIDA9PT0obj1hLnNldChlLG4scikpfHwodT9sLnNldFByb3BlcnR5KHQsbik6bFt0XT1uKSl9fSxjc3M6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHM9Ryh0KTtyZXR1cm4gWGUudGVzdCh0KXx8KHQ9SmUocykpLChhPXcuY3NzSG9va3NbdF18fHcuY3NzSG9va3Nbc10pJiZcImdldFwiaW4gYSYmKGk9YS5nZXQoZSwhMCxuKSksdm9pZCAwPT09aSYmKGk9RmUoZSx0LHIpKSxcIm5vcm1hbFwiPT09aSYmdCBpbiBWZSYmKGk9VmVbdF0pLFwiXCI9PT1ufHxuPyhvPXBhcnNlRmxvYXQoaSksITA9PT1ufHxpc0Zpbml0ZShvKT9vfHwwOmkpOml9fSksdy5lYWNoKFtcImhlaWdodFwiLFwid2lkdGhcIl0sZnVuY3Rpb24oZSx0KXt3LmNzc0hvb2tzW3RdPXtnZXQ6ZnVuY3Rpb24oZSxuLHIpe2lmKG4pcmV0dXJuIXplLnRlc3Qody5jc3MoZSxcImRpc3BsYXlcIikpfHxlLmdldENsaWVudFJlY3RzKCkubGVuZ3RoJiZlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoP2V0KGUsdCxyKTpzZShlLFVlLGZ1bmN0aW9uKCl7cmV0dXJuIGV0KGUsdCxyKX0pfSxzZXQ6ZnVuY3Rpb24oZSxuLHIpe3ZhciBpLG89JGUoZSksYT1cImJvcmRlci1ib3hcIj09PXcuY3NzKGUsXCJib3hTaXppbmdcIiwhMSxvKSxzPXImJlplKGUsdCxyLGEsbyk7cmV0dXJuIGEmJmguc2Nyb2xsYm94U2l6ZSgpPT09by5wb3NpdGlvbiYmKHMtPU1hdGguY2VpbChlW1wib2Zmc2V0XCIrdFswXS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSldLXBhcnNlRmxvYXQob1t0XSktWmUoZSx0LFwiYm9yZGVyXCIsITEsbyktLjUpKSxzJiYoaT1pZS5leGVjKG4pKSYmXCJweFwiIT09KGlbM118fFwicHhcIikmJihlLnN0eWxlW3RdPW4sbj13LmNzcyhlLHQpKSxLZShlLG4scyl9fX0pLHcuY3NzSG9va3MubWFyZ2luTGVmdD1fZShoLnJlbGlhYmxlTWFyZ2luTGVmdCxmdW5jdGlvbihlLHQpe2lmKHQpcmV0dXJuKHBhcnNlRmxvYXQoRmUoZSxcIm1hcmdpbkxlZnRcIikpfHxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQtc2UoZSx7bWFyZ2luTGVmdDowfSxmdW5jdGlvbigpe3JldHVybiBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnR9KSkrXCJweFwifSksdy5lYWNoKHttYXJnaW46XCJcIixwYWRkaW5nOlwiXCIsYm9yZGVyOlwiV2lkdGhcIn0sZnVuY3Rpb24oZSx0KXt3LmNzc0hvb2tzW2UrdF09e2V4cGFuZDpmdW5jdGlvbihuKXtmb3IodmFyIHI9MCxpPXt9LG89XCJzdHJpbmdcIj09dHlwZW9mIG4/bi5zcGxpdChcIiBcIik6W25dO3I8NDtyKyspaVtlK29lW3JdK3RdPW9bcl18fG9bci0yXXx8b1swXTtyZXR1cm4gaX19LFwibWFyZ2luXCIhPT1lJiYody5jc3NIb29rc1tlK3RdLnNldD1LZSl9KSx3LmZuLmV4dGVuZCh7Y3NzOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHoodGhpcyxmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPXt9LGE9MDtpZihBcnJheS5pc0FycmF5KHQpKXtmb3Iocj0kZShlKSxpPXQubGVuZ3RoO2E8aTthKyspb1t0W2FdXT13LmNzcyhlLHRbYV0sITEscik7cmV0dXJuIG99cmV0dXJuIHZvaWQgMCE9PW4/dy5zdHlsZShlLHQsbik6dy5jc3MoZSx0KX0sZSx0LGFyZ3VtZW50cy5sZW5ndGg+MSl9fSk7ZnVuY3Rpb24gdHQoZSx0LG4scixpKXtyZXR1cm4gbmV3IHR0LnByb3RvdHlwZS5pbml0KGUsdCxuLHIsaSl9dy5Ud2Vlbj10dCx0dC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOnR0LGluaXQ6ZnVuY3Rpb24oZSx0LG4scixpLG8pe3RoaXMuZWxlbT1lLHRoaXMucHJvcD1uLHRoaXMuZWFzaW5nPWl8fHcuZWFzaW5nLl9kZWZhdWx0LHRoaXMub3B0aW9ucz10LHRoaXMuc3RhcnQ9dGhpcy5ub3c9dGhpcy5jdXIoKSx0aGlzLmVuZD1yLHRoaXMudW5pdD1vfHwody5jc3NOdW1iZXJbbl0/XCJcIjpcInB4XCIpfSxjdXI6ZnVuY3Rpb24oKXt2YXIgZT10dC5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gZSYmZS5nZXQ/ZS5nZXQodGhpcyk6dHQucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKX0scnVuOmZ1bmN0aW9uKGUpe3ZhciB0LG49dHQucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIHRoaXMub3B0aW9ucy5kdXJhdGlvbj90aGlzLnBvcz10PXcuZWFzaW5nW3RoaXMuZWFzaW5nXShlLHRoaXMub3B0aW9ucy5kdXJhdGlvbiplLDAsMSx0aGlzLm9wdGlvbnMuZHVyYXRpb24pOnRoaXMucG9zPXQ9ZSx0aGlzLm5vdz0odGhpcy5lbmQtdGhpcy5zdGFydCkqdCt0aGlzLnN0YXJ0LHRoaXMub3B0aW9ucy5zdGVwJiZ0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKHRoaXMuZWxlbSx0aGlzLm5vdyx0aGlzKSxuJiZuLnNldD9uLnNldCh0aGlzKTp0dC5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLHRoaXN9fSx0dC5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGU9dHQucHJvdG90eXBlLHR0LnByb3BIb29rcz17X2RlZmF1bHQ6e2dldDpmdW5jdGlvbihlKXt2YXIgdDtyZXR1cm4gMSE9PWUuZWxlbS5ub2RlVHlwZXx8bnVsbCE9ZS5lbGVtW2UucHJvcF0mJm51bGw9PWUuZWxlbS5zdHlsZVtlLnByb3BdP2UuZWxlbVtlLnByb3BdOih0PXcuY3NzKGUuZWxlbSxlLnByb3AsXCJcIikpJiZcImF1dG9cIiE9PXQ/dDowfSxzZXQ6ZnVuY3Rpb24oZSl7dy5meC5zdGVwW2UucHJvcF0/dy5meC5zdGVwW2UucHJvcF0oZSk6MSE9PWUuZWxlbS5ub2RlVHlwZXx8bnVsbD09ZS5lbGVtLnN0eWxlW3cuY3NzUHJvcHNbZS5wcm9wXV0mJiF3LmNzc0hvb2tzW2UucHJvcF0/ZS5lbGVtW2UucHJvcF09ZS5ub3c6dy5zdHlsZShlLmVsZW0sZS5wcm9wLGUubm93K2UudW5pdCl9fX0sdHQucHJvcEhvb2tzLnNjcm9sbFRvcD10dC5wcm9wSG9va3Muc2Nyb2xsTGVmdD17c2V0OmZ1bmN0aW9uKGUpe2UuZWxlbS5ub2RlVHlwZSYmZS5lbGVtLnBhcmVudE5vZGUmJihlLmVsZW1bZS5wcm9wXT1lLm5vdyl9fSx3LmVhc2luZz17bGluZWFyOmZ1bmN0aW9uKGUpe3JldHVybiBlfSxzd2luZzpmdW5jdGlvbihlKXtyZXR1cm4uNS1NYXRoLmNvcyhlKk1hdGguUEkpLzJ9LF9kZWZhdWx0Olwic3dpbmdcIn0sdy5meD10dC5wcm90b3R5cGUuaW5pdCx3LmZ4LnN0ZXA9e307dmFyIG50LHJ0LGl0PS9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxvdD0vcXVldWVIb29rcyQvO2Z1bmN0aW9uIGF0KCl7cnQmJighMT09PXIuaGlkZGVuJiZlLnJlcXVlc3RBbmltYXRpb25GcmFtZT9lLnJlcXVlc3RBbmltYXRpb25GcmFtZShhdCk6ZS5zZXRUaW1lb3V0KGF0LHcuZnguaW50ZXJ2YWwpLHcuZngudGljaygpKX1mdW5jdGlvbiBzdCgpe3JldHVybiBlLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtudD12b2lkIDB9KSxudD1EYXRlLm5vdygpfWZ1bmN0aW9uIHV0KGUsdCl7dmFyIG4scj0wLGk9e2hlaWdodDplfTtmb3IodD10PzE6MDtyPDQ7cis9Mi10KWlbXCJtYXJnaW5cIisobj1vZVtyXSldPWlbXCJwYWRkaW5nXCIrbl09ZTtyZXR1cm4gdCYmKGkub3BhY2l0eT1pLndpZHRoPWUpLGl9ZnVuY3Rpb24gbHQoZSx0LG4pe2Zvcih2YXIgcixpPShwdC50d2VlbmVyc1t0XXx8W10pLmNvbmNhdChwdC50d2VlbmVyc1tcIipcIl0pLG89MCxhPWkubGVuZ3RoO288YTtvKyspaWYocj1pW29dLmNhbGwobix0LGUpKXJldHVybiByfWZ1bmN0aW9uIGN0KGUsdCxuKXt2YXIgcixpLG8sYSxzLHUsbCxjLGY9XCJ3aWR0aFwiaW4gdHx8XCJoZWlnaHRcImluIHQscD10aGlzLGQ9e30saD1lLnN0eWxlLGc9ZS5ub2RlVHlwZSYmYWUoZSkseT1KLmdldChlLFwiZnhzaG93XCIpO24ucXVldWV8fChudWxsPT0oYT13Ll9xdWV1ZUhvb2tzKGUsXCJmeFwiKSkudW5xdWV1ZWQmJihhLnVucXVldWVkPTAscz1hLmVtcHR5LmZpcmUsYS5lbXB0eS5maXJlPWZ1bmN0aW9uKCl7YS51bnF1ZXVlZHx8cygpfSksYS51bnF1ZXVlZCsrLHAuYWx3YXlzKGZ1bmN0aW9uKCl7cC5hbHdheXMoZnVuY3Rpb24oKXthLnVucXVldWVkLS0sdy5xdWV1ZShlLFwiZnhcIikubGVuZ3RofHxhLmVtcHR5LmZpcmUoKX0pfSkpO2ZvcihyIGluIHQpaWYoaT10W3JdLGl0LnRlc3QoaSkpe2lmKGRlbGV0ZSB0W3JdLG89b3x8XCJ0b2dnbGVcIj09PWksaT09PShnP1wiaGlkZVwiOlwic2hvd1wiKSl7aWYoXCJzaG93XCIhPT1pfHwheXx8dm9pZCAwPT09eVtyXSljb250aW51ZTtnPSEwfWRbcl09eSYmeVtyXXx8dy5zdHlsZShlLHIpfWlmKCh1PSF3LmlzRW1wdHlPYmplY3QodCkpfHwhdy5pc0VtcHR5T2JqZWN0KGQpKXtmJiYxPT09ZS5ub2RlVHlwZSYmKG4ub3ZlcmZsb3c9W2gub3ZlcmZsb3csaC5vdmVyZmxvd1gsaC5vdmVyZmxvd1ldLG51bGw9PShsPXkmJnkuZGlzcGxheSkmJihsPUouZ2V0KGUsXCJkaXNwbGF5XCIpKSxcIm5vbmVcIj09PShjPXcuY3NzKGUsXCJkaXNwbGF5XCIpKSYmKGw/Yz1sOihmZShbZV0sITApLGw9ZS5zdHlsZS5kaXNwbGF5fHxsLGM9dy5jc3MoZSxcImRpc3BsYXlcIiksZmUoW2VdKSkpLChcImlubGluZVwiPT09Y3x8XCJpbmxpbmUtYmxvY2tcIj09PWMmJm51bGwhPWwpJiZcIm5vbmVcIj09PXcuY3NzKGUsXCJmbG9hdFwiKSYmKHV8fChwLmRvbmUoZnVuY3Rpb24oKXtoLmRpc3BsYXk9bH0pLG51bGw9PWwmJihjPWguZGlzcGxheSxsPVwibm9uZVwiPT09Yz9cIlwiOmMpKSxoLmRpc3BsYXk9XCJpbmxpbmUtYmxvY2tcIikpLG4ub3ZlcmZsb3cmJihoLm92ZXJmbG93PVwiaGlkZGVuXCIscC5hbHdheXMoZnVuY3Rpb24oKXtoLm92ZXJmbG93PW4ub3ZlcmZsb3dbMF0saC5vdmVyZmxvd1g9bi5vdmVyZmxvd1sxXSxoLm92ZXJmbG93WT1uLm92ZXJmbG93WzJdfSkpLHU9ITE7Zm9yKHIgaW4gZCl1fHwoeT9cImhpZGRlblwiaW4geSYmKGc9eS5oaWRkZW4pOnk9Si5hY2Nlc3MoZSxcImZ4c2hvd1wiLHtkaXNwbGF5Omx9KSxvJiYoeS5oaWRkZW49IWcpLGcmJmZlKFtlXSwhMCkscC5kb25lKGZ1bmN0aW9uKCl7Z3x8ZmUoW2VdKSxKLnJlbW92ZShlLFwiZnhzaG93XCIpO2ZvcihyIGluIGQpdy5zdHlsZShlLHIsZFtyXSl9KSksdT1sdChnP3lbcl06MCxyLHApLHIgaW4geXx8KHlbcl09dS5zdGFydCxnJiYodS5lbmQ9dS5zdGFydCx1LnN0YXJ0PTApKX19ZnVuY3Rpb24gZnQoZSx0KXt2YXIgbixyLGksbyxhO2ZvcihuIGluIGUpaWYocj1HKG4pLGk9dFtyXSxvPWVbbl0sQXJyYXkuaXNBcnJheShvKSYmKGk9b1sxXSxvPWVbbl09b1swXSksbiE9PXImJihlW3JdPW8sZGVsZXRlIGVbbl0pLChhPXcuY3NzSG9va3Nbcl0pJiZcImV4cGFuZFwiaW4gYSl7bz1hLmV4cGFuZChvKSxkZWxldGUgZVtyXTtmb3IobiBpbiBvKW4gaW4gZXx8KGVbbl09b1tuXSx0W25dPWkpfWVsc2UgdFtyXT1pfWZ1bmN0aW9uIHB0KGUsdCxuKXt2YXIgcixpLG89MCxhPXB0LnByZWZpbHRlcnMubGVuZ3RoLHM9dy5EZWZlcnJlZCgpLmFsd2F5cyhmdW5jdGlvbigpe2RlbGV0ZSB1LmVsZW19KSx1PWZ1bmN0aW9uKCl7aWYoaSlyZXR1cm4hMTtmb3IodmFyIHQ9bnR8fHN0KCksbj1NYXRoLm1heCgwLGwuc3RhcnRUaW1lK2wuZHVyYXRpb24tdCkscj0xLShuL2wuZHVyYXRpb258fDApLG89MCxhPWwudHdlZW5zLmxlbmd0aDtvPGE7bysrKWwudHdlZW5zW29dLnJ1bihyKTtyZXR1cm4gcy5ub3RpZnlXaXRoKGUsW2wscixuXSkscjwxJiZhP246KGF8fHMubm90aWZ5V2l0aChlLFtsLDEsMF0pLHMucmVzb2x2ZVdpdGgoZSxbbF0pLCExKX0sbD1zLnByb21pc2Uoe2VsZW06ZSxwcm9wczp3LmV4dGVuZCh7fSx0KSxvcHRzOncuZXh0ZW5kKCEwLHtzcGVjaWFsRWFzaW5nOnt9LGVhc2luZzp3LmVhc2luZy5fZGVmYXVsdH0sbiksb3JpZ2luYWxQcm9wZXJ0aWVzOnQsb3JpZ2luYWxPcHRpb25zOm4sc3RhcnRUaW1lOm50fHxzdCgpLGR1cmF0aW9uOm4uZHVyYXRpb24sdHdlZW5zOltdLGNyZWF0ZVR3ZWVuOmZ1bmN0aW9uKHQsbil7dmFyIHI9dy5Ud2VlbihlLGwub3B0cyx0LG4sbC5vcHRzLnNwZWNpYWxFYXNpbmdbdF18fGwub3B0cy5lYXNpbmcpO3JldHVybiBsLnR3ZWVucy5wdXNoKHIpLHJ9LHN0b3A6ZnVuY3Rpb24odCl7dmFyIG49MCxyPXQ/bC50d2VlbnMubGVuZ3RoOjA7aWYoaSlyZXR1cm4gdGhpcztmb3IoaT0hMDtuPHI7bisrKWwudHdlZW5zW25dLnJ1bigxKTtyZXR1cm4gdD8ocy5ub3RpZnlXaXRoKGUsW2wsMSwwXSkscy5yZXNvbHZlV2l0aChlLFtsLHRdKSk6cy5yZWplY3RXaXRoKGUsW2wsdF0pLHRoaXN9fSksYz1sLnByb3BzO2ZvcihmdChjLGwub3B0cy5zcGVjaWFsRWFzaW5nKTtvPGE7bysrKWlmKHI9cHQucHJlZmlsdGVyc1tvXS5jYWxsKGwsZSxjLGwub3B0cykpcmV0dXJuIGcoci5zdG9wKSYmKHcuX3F1ZXVlSG9va3MobC5lbGVtLGwub3B0cy5xdWV1ZSkuc3RvcD1yLnN0b3AuYmluZChyKSkscjtyZXR1cm4gdy5tYXAoYyxsdCxsKSxnKGwub3B0cy5zdGFydCkmJmwub3B0cy5zdGFydC5jYWxsKGUsbCksbC5wcm9ncmVzcyhsLm9wdHMucHJvZ3Jlc3MpLmRvbmUobC5vcHRzLmRvbmUsbC5vcHRzLmNvbXBsZXRlKS5mYWlsKGwub3B0cy5mYWlsKS5hbHdheXMobC5vcHRzLmFsd2F5cyksdy5meC50aW1lcih3LmV4dGVuZCh1LHtlbGVtOmUsYW5pbTpsLHF1ZXVlOmwub3B0cy5xdWV1ZX0pKSxsfXcuQW5pbWF0aW9uPXcuZXh0ZW5kKHB0LHt0d2VlbmVyczp7XCIqXCI6W2Z1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5jcmVhdGVUd2VlbihlLHQpO3JldHVybiB1ZShuLmVsZW0sZSxpZS5leGVjKHQpLG4pLG59XX0sdHdlZW5lcjpmdW5jdGlvbihlLHQpe2coZSk/KHQ9ZSxlPVtcIipcIl0pOmU9ZS5tYXRjaChNKTtmb3IodmFyIG4scj0wLGk9ZS5sZW5ndGg7cjxpO3IrKyluPWVbcl0scHQudHdlZW5lcnNbbl09cHQudHdlZW5lcnNbbl18fFtdLHB0LnR3ZWVuZXJzW25dLnVuc2hpZnQodCl9LHByZWZpbHRlcnM6W2N0XSxwcmVmaWx0ZXI6ZnVuY3Rpb24oZSx0KXt0P3B0LnByZWZpbHRlcnMudW5zaGlmdChlKTpwdC5wcmVmaWx0ZXJzLnB1c2goZSl9fSksdy5zcGVlZD1mdW5jdGlvbihlLHQsbil7dmFyIHI9ZSYmXCJvYmplY3RcIj09dHlwZW9mIGU/dy5leHRlbmQoe30sZSk6e2NvbXBsZXRlOm58fCFuJiZ0fHxnKGUpJiZlLGR1cmF0aW9uOmUsZWFzaW5nOm4mJnR8fHQmJiFnKHQpJiZ0fTtyZXR1cm4gdy5meC5vZmY/ci5kdXJhdGlvbj0wOlwibnVtYmVyXCIhPXR5cGVvZiByLmR1cmF0aW9uJiYoci5kdXJhdGlvbiBpbiB3LmZ4LnNwZWVkcz9yLmR1cmF0aW9uPXcuZnguc3BlZWRzW3IuZHVyYXRpb25dOnIuZHVyYXRpb249dy5meC5zcGVlZHMuX2RlZmF1bHQpLG51bGwhPXIucXVldWUmJiEwIT09ci5xdWV1ZXx8KHIucXVldWU9XCJmeFwiKSxyLm9sZD1yLmNvbXBsZXRlLHIuY29tcGxldGU9ZnVuY3Rpb24oKXtnKHIub2xkKSYmci5vbGQuY2FsbCh0aGlzKSxyLnF1ZXVlJiZ3LmRlcXVldWUodGhpcyxyLnF1ZXVlKX0scn0sdy5mbi5leHRlbmQoe2ZhZGVUbzpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5maWx0ZXIoYWUpLmNzcyhcIm9wYWNpdHlcIiwwKS5zaG93KCkuZW5kKCkuYW5pbWF0ZSh7b3BhY2l0eTp0fSxlLG4scil9LGFuaW1hdGU6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGk9dy5pc0VtcHR5T2JqZWN0KGUpLG89dy5zcGVlZCh0LG4sciksYT1mdW5jdGlvbigpe3ZhciB0PXB0KHRoaXMsdy5leHRlbmQoe30sZSksbyk7KGl8fEouZ2V0KHRoaXMsXCJmaW5pc2hcIikpJiZ0LnN0b3AoITApfTtyZXR1cm4gYS5maW5pc2g9YSxpfHwhMT09PW8ucXVldWU/dGhpcy5lYWNoKGEpOnRoaXMucXVldWUoby5xdWV1ZSxhKX0sc3RvcDpmdW5jdGlvbihlLHQsbil7dmFyIHI9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zdG9wO2RlbGV0ZSBlLnN0b3AsdChuKX07cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGUmJihuPXQsdD1lLGU9dm9pZCAwKSx0JiYhMSE9PWUmJnRoaXMucXVldWUoZXx8XCJmeFwiLFtdKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD0hMCxpPW51bGwhPWUmJmUrXCJxdWV1ZUhvb2tzXCIsbz13LnRpbWVycyxhPUouZ2V0KHRoaXMpO2lmKGkpYVtpXSYmYVtpXS5zdG9wJiZyKGFbaV0pO2Vsc2UgZm9yKGkgaW4gYSlhW2ldJiZhW2ldLnN0b3AmJm90LnRlc3QoaSkmJnIoYVtpXSk7Zm9yKGk9by5sZW5ndGg7aS0tOylvW2ldLmVsZW0hPT10aGlzfHxudWxsIT1lJiZvW2ldLnF1ZXVlIT09ZXx8KG9baV0uYW5pbS5zdG9wKG4pLHQ9ITEsby5zcGxpY2UoaSwxKSk7IXQmJm58fHcuZGVxdWV1ZSh0aGlzLGUpfSl9LGZpbmlzaDpmdW5jdGlvbihlKXtyZXR1cm4hMSE9PWUmJihlPWV8fFwiZnhcIiksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQsbj1KLmdldCh0aGlzKSxyPW5bZStcInF1ZXVlXCJdLGk9bltlK1wicXVldWVIb29rc1wiXSxvPXcudGltZXJzLGE9cj9yLmxlbmd0aDowO2ZvcihuLmZpbmlzaD0hMCx3LnF1ZXVlKHRoaXMsZSxbXSksaSYmaS5zdG9wJiZpLnN0b3AuY2FsbCh0aGlzLCEwKSx0PW8ubGVuZ3RoO3QtLTspb1t0XS5lbGVtPT09dGhpcyYmb1t0XS5xdWV1ZT09PWUmJihvW3RdLmFuaW0uc3RvcCghMCksby5zcGxpY2UodCwxKSk7Zm9yKHQ9MDt0PGE7dCsrKXJbdF0mJnJbdF0uZmluaXNoJiZyW3RdLmZpbmlzaC5jYWxsKHRoaXMpO2RlbGV0ZSBuLmZpbmlzaH0pfX0pLHcuZWFjaChbXCJ0b2dnbGVcIixcInNob3dcIixcImhpZGVcIl0sZnVuY3Rpb24oZSx0KXt2YXIgbj13LmZuW3RdO3cuZm5bdF09ZnVuY3Rpb24oZSxyLGkpe3JldHVybiBudWxsPT1lfHxcImJvb2xlYW5cIj09dHlwZW9mIGU/bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dGhpcy5hbmltYXRlKHV0KHQsITApLGUscixpKX19KSx3LmVhY2goe3NsaWRlRG93bjp1dChcInNob3dcIiksc2xpZGVVcDp1dChcImhpZGVcIiksc2xpZGVUb2dnbGU6dXQoXCJ0b2dnbGVcIiksZmFkZUluOntvcGFjaXR5Olwic2hvd1wifSxmYWRlT3V0OntvcGFjaXR5OlwiaGlkZVwifSxmYWRlVG9nZ2xlOntvcGFjaXR5OlwidG9nZ2xlXCJ9fSxmdW5jdGlvbihlLHQpe3cuZm5bZV09ZnVuY3Rpb24oZSxuLHIpe3JldHVybiB0aGlzLmFuaW1hdGUodCxlLG4scil9fSksdy50aW1lcnM9W10sdy5meC50aWNrPWZ1bmN0aW9uKCl7dmFyIGUsdD0wLG49dy50aW1lcnM7Zm9yKG50PURhdGUubm93KCk7dDxuLmxlbmd0aDt0KyspKGU9blt0XSkoKXx8blt0XSE9PWV8fG4uc3BsaWNlKHQtLSwxKTtuLmxlbmd0aHx8dy5meC5zdG9wKCksbnQ9dm9pZCAwfSx3LmZ4LnRpbWVyPWZ1bmN0aW9uKGUpe3cudGltZXJzLnB1c2goZSksdy5meC5zdGFydCgpfSx3LmZ4LmludGVydmFsPTEzLHcuZnguc3RhcnQ9ZnVuY3Rpb24oKXtydHx8KHJ0PSEwLGF0KCkpfSx3LmZ4LnN0b3A9ZnVuY3Rpb24oKXtydD1udWxsfSx3LmZ4LnNwZWVkcz17c2xvdzo2MDAsZmFzdDoyMDAsX2RlZmF1bHQ6NDAwfSx3LmZuLmRlbGF5PWZ1bmN0aW9uKHQsbil7cmV0dXJuIHQ9dy5meD93LmZ4LnNwZWVkc1t0XXx8dDp0LG49bnx8XCJmeFwiLHRoaXMucXVldWUobixmdW5jdGlvbihuLHIpe3ZhciBpPWUuc2V0VGltZW91dChuLHQpO3Iuc3RvcD1mdW5jdGlvbigpe2UuY2xlYXJUaW1lb3V0KGkpfX0pfSxmdW5jdGlvbigpe3ZhciBlPXIuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLHQ9ci5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpLmFwcGVuZENoaWxkKHIuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKSk7ZS50eXBlPVwiY2hlY2tib3hcIixoLmNoZWNrT249XCJcIiE9PWUudmFsdWUsaC5vcHRTZWxlY3RlZD10LnNlbGVjdGVkLChlPXIuY3JlYXRlRWxlbWVudChcImlucHV0XCIpKS52YWx1ZT1cInRcIixlLnR5cGU9XCJyYWRpb1wiLGgucmFkaW9WYWx1ZT1cInRcIj09PWUudmFsdWV9KCk7dmFyIGR0LGh0PXcuZXhwci5hdHRySGFuZGxlO3cuZm4uZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHoodGhpcyx3LmF0dHIsZSx0LGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3cucmVtb3ZlQXR0cih0aGlzLGUpfSl9fSksdy5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz1lLm5vZGVUeXBlO2lmKDMhPT1vJiY4IT09byYmMiE9PW8pcmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIGUuZ2V0QXR0cmlidXRlP3cucHJvcChlLHQsbik6KDE9PT1vJiZ3LmlzWE1MRG9jKGUpfHwoaT13LmF0dHJIb29rc1t0LnRvTG93ZXJDYXNlKCldfHwody5leHByLm1hdGNoLmJvb2wudGVzdCh0KT9kdDp2b2lkIDApKSx2b2lkIDAhPT1uP251bGw9PT1uP3ZvaWQgdy5yZW1vdmVBdHRyKGUsdCk6aSYmXCJzZXRcImluIGkmJnZvaWQgMCE9PShyPWkuc2V0KGUsbix0KSk/cjooZS5zZXRBdHRyaWJ1dGUodCxuK1wiXCIpLG4pOmkmJlwiZ2V0XCJpbiBpJiZudWxsIT09KHI9aS5nZXQoZSx0KSk/cjpudWxsPT0ocj13LmZpbmQuYXR0cihlLHQpKT92b2lkIDA6cil9LGF0dHJIb29rczp7dHlwZTp7c2V0OmZ1bmN0aW9uKGUsdCl7aWYoIWgucmFkaW9WYWx1ZSYmXCJyYWRpb1wiPT09dCYmTihlLFwiaW5wdXRcIikpe3ZhciBuPWUudmFsdWU7cmV0dXJuIGUuc2V0QXR0cmlidXRlKFwidHlwZVwiLHQpLG4mJihlLnZhbHVlPW4pLHR9fX19LHJlbW92ZUF0dHI6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPTAsaT10JiZ0Lm1hdGNoKE0pO2lmKGkmJjE9PT1lLm5vZGVUeXBlKXdoaWxlKG49aVtyKytdKWUucmVtb3ZlQXR0cmlidXRlKG4pfX0pLGR0PXtzZXQ6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiExPT09dD93LnJlbW92ZUF0dHIoZSxuKTplLnNldEF0dHJpYnV0ZShuLG4pLG59fSx3LmVhY2gody5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKC9cXHcrL2cpLGZ1bmN0aW9uKGUsdCl7dmFyIG49aHRbdF18fHcuZmluZC5hdHRyO2h0W3RdPWZ1bmN0aW9uKGUsdCxyKXt2YXIgaSxvLGE9dC50b0xvd2VyQ2FzZSgpO3JldHVybiByfHwobz1odFthXSxodFthXT1pLGk9bnVsbCE9bihlLHQscik/YTpudWxsLGh0W2FdPW8pLGl9fSk7dmFyIGd0PS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2kseXQ9L14oPzphfGFyZWEpJC9pO3cuZm4uZXh0ZW5kKHtwcm9wOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHoodGhpcyx3LnByb3AsZSx0LGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZVByb3A6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2RlbGV0ZSB0aGlzW3cucHJvcEZpeFtlXXx8ZV19KX19KSx3LmV4dGVuZCh7cHJvcDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPWUubm9kZVR5cGU7aWYoMyE9PW8mJjghPT1vJiYyIT09bylyZXR1cm4gMT09PW8mJncuaXNYTUxEb2MoZSl8fCh0PXcucHJvcEZpeFt0XXx8dCxpPXcucHJvcEhvb2tzW3RdKSx2b2lkIDAhPT1uP2kmJlwic2V0XCJpbiBpJiZ2b2lkIDAhPT0ocj1pLnNldChlLG4sdCkpP3I6ZVt0XT1uOmkmJlwiZ2V0XCJpbiBpJiZudWxsIT09KHI9aS5nZXQoZSx0KSk/cjplW3RdfSxwcm9wSG9va3M6e3RhYkluZGV4OntnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dy5maW5kLmF0dHIoZSxcInRhYmluZGV4XCIpO3JldHVybiB0P3BhcnNlSW50KHQsMTApOmd0LnRlc3QoZS5ub2RlTmFtZSl8fHl0LnRlc3QoZS5ub2RlTmFtZSkmJmUuaHJlZj8wOi0xfX19LHByb3BGaXg6e1wiZm9yXCI6XCJodG1sRm9yXCIsXCJjbGFzc1wiOlwiY2xhc3NOYW1lXCJ9fSksaC5vcHRTZWxlY3RlZHx8KHcucHJvcEhvb2tzLnNlbGVjdGVkPXtnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3JldHVybiB0JiZ0LnBhcmVudE5vZGUmJnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4LG51bGx9LHNldDpmdW5jdGlvbihlKXt2YXIgdD1lLnBhcmVudE5vZGU7dCYmKHQuc2VsZWN0ZWRJbmRleCx0LnBhcmVudE5vZGUmJnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4KX19KSx3LmVhY2goW1widGFiSW5kZXhcIixcInJlYWRPbmx5XCIsXCJtYXhMZW5ndGhcIixcImNlbGxTcGFjaW5nXCIsXCJjZWxsUGFkZGluZ1wiLFwicm93U3BhblwiLFwiY29sU3BhblwiLFwidXNlTWFwXCIsXCJmcmFtZUJvcmRlclwiLFwiY29udGVudEVkaXRhYmxlXCJdLGZ1bmN0aW9uKCl7dy5wcm9wRml4W3RoaXMudG9Mb3dlckNhc2UoKV09dGhpc30pO2Z1bmN0aW9uIHZ0KGUpe3JldHVybihlLm1hdGNoKE0pfHxbXSkuam9pbihcIiBcIil9ZnVuY3Rpb24gbXQoZSl7cmV0dXJuIGUuZ2V0QXR0cmlidXRlJiZlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwifWZ1bmN0aW9uIHh0KGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP2U6XCJzdHJpbmdcIj09dHlwZW9mIGU/ZS5tYXRjaChNKXx8W106W119dy5mbi5leHRlbmQoe2FkZENsYXNzOmZ1bmN0aW9uKGUpe3ZhciB0LG4scixpLG8sYSxzLHU9MDtpZihnKGUpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24odCl7dyh0aGlzKS5hZGRDbGFzcyhlLmNhbGwodGhpcyx0LG10KHRoaXMpKSl9KTtpZigodD14dChlKSkubGVuZ3RoKXdoaWxlKG49dGhpc1t1KytdKWlmKGk9bXQobikscj0xPT09bi5ub2RlVHlwZSYmXCIgXCIrdnQoaSkrXCIgXCIpe2E9MDt3aGlsZShvPXRbYSsrXSlyLmluZGV4T2YoXCIgXCIrbytcIiBcIik8MCYmKHIrPW8rXCIgXCIpO2khPT0ocz12dChyKSkmJm4uc2V0QXR0cmlidXRlKFwiY2xhc3NcIixzKX1yZXR1cm4gdGhpc30scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oZSl7dmFyIHQsbixyLGksbyxhLHMsdT0wO2lmKGcoZSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbih0KXt3KHRoaXMpLnJlbW92ZUNsYXNzKGUuY2FsbCh0aGlzLHQsbXQodGhpcykpKX0pO2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLmF0dHIoXCJjbGFzc1wiLFwiXCIpO2lmKCh0PXh0KGUpKS5sZW5ndGgpd2hpbGUobj10aGlzW3UrK10paWYoaT1tdChuKSxyPTE9PT1uLm5vZGVUeXBlJiZcIiBcIit2dChpKStcIiBcIil7YT0wO3doaWxlKG89dFthKytdKXdoaWxlKHIuaW5kZXhPZihcIiBcIitvK1wiIFwiKT4tMSlyPXIucmVwbGFjZShcIiBcIitvK1wiIFwiLFwiIFwiKTtpIT09KHM9dnQocikpJiZuLnNldEF0dHJpYnV0ZShcImNsYXNzXCIscyl9cmV0dXJuIHRoaXN9LHRvZ2dsZUNsYXNzOmZ1bmN0aW9uKGUsdCl7dmFyIG49dHlwZW9mIGUscj1cInN0cmluZ1wiPT09bnx8QXJyYXkuaXNBcnJheShlKTtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIHQmJnI/dD90aGlzLmFkZENsYXNzKGUpOnRoaXMucmVtb3ZlQ2xhc3MoZSk6ZyhlKT90aGlzLmVhY2goZnVuY3Rpb24obil7dyh0aGlzKS50b2dnbGVDbGFzcyhlLmNhbGwodGhpcyxuLG10KHRoaXMpLHQpLHQpfSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQsaSxvLGE7aWYocil7aT0wLG89dyh0aGlzKSxhPXh0KGUpO3doaWxlKHQ9YVtpKytdKW8uaGFzQ2xhc3ModCk/by5yZW1vdmVDbGFzcyh0KTpvLmFkZENsYXNzKHQpfWVsc2Ugdm9pZCAwIT09ZSYmXCJib29sZWFuXCIhPT1ufHwoKHQ9bXQodGhpcykpJiZKLnNldCh0aGlzLFwiX19jbGFzc05hbWVfX1wiLHQpLHRoaXMuc2V0QXR0cmlidXRlJiZ0aGlzLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsdHx8ITE9PT1lP1wiXCI6Si5nZXQodGhpcyxcIl9fY2xhc3NOYW1lX19cIil8fFwiXCIpKX0pfSxoYXNDbGFzczpmdW5jdGlvbihlKXt2YXIgdCxuLHI9MDt0PVwiIFwiK2UrXCIgXCI7d2hpbGUobj10aGlzW3IrK10paWYoMT09PW4ubm9kZVR5cGUmJihcIiBcIit2dChtdChuKSkrXCIgXCIpLmluZGV4T2YodCk+LTEpcmV0dXJuITA7cmV0dXJuITF9fSk7dmFyIGJ0PS9cXHIvZzt3LmZuLmV4dGVuZCh7dmFsOmZ1bmN0aW9uKGUpe3ZhciB0LG4scixpPXRoaXNbMF07e2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHI9ZyhlKSx0aGlzLmVhY2goZnVuY3Rpb24obil7dmFyIGk7MT09PXRoaXMubm9kZVR5cGUmJihudWxsPT0oaT1yP2UuY2FsbCh0aGlzLG4sdyh0aGlzKS52YWwoKSk6ZSk/aT1cIlwiOlwibnVtYmVyXCI9PXR5cGVvZiBpP2krPVwiXCI6QXJyYXkuaXNBcnJheShpKSYmKGk9dy5tYXAoaSxmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT9cIlwiOmUrXCJcIn0pKSwodD13LnZhbEhvb2tzW3RoaXMudHlwZV18fHcudmFsSG9va3NbdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkmJlwic2V0XCJpbiB0JiZ2b2lkIDAhPT10LnNldCh0aGlzLGksXCJ2YWx1ZVwiKXx8KHRoaXMudmFsdWU9aSkpfSk7aWYoaSlyZXR1cm4odD13LnZhbEhvb2tzW2kudHlwZV18fHcudmFsSG9va3NbaS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkmJlwiZ2V0XCJpbiB0JiZ2b2lkIDAhPT0obj10LmdldChpLFwidmFsdWVcIikpP246XCJzdHJpbmdcIj09dHlwZW9mKG49aS52YWx1ZSk/bi5yZXBsYWNlKGJ0LFwiXCIpOm51bGw9PW4/XCJcIjpufX19KSx3LmV4dGVuZCh7dmFsSG9va3M6e29wdGlvbjp7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PXcuZmluZC5hdHRyKGUsXCJ2YWx1ZVwiKTtyZXR1cm4gbnVsbCE9dD90OnZ0KHcudGV4dChlKSl9fSxzZWxlY3Q6e2dldDpmdW5jdGlvbihlKXt2YXIgdCxuLHIsaT1lLm9wdGlvbnMsbz1lLnNlbGVjdGVkSW5kZXgsYT1cInNlbGVjdC1vbmVcIj09PWUudHlwZSxzPWE/bnVsbDpbXSx1PWE/bysxOmkubGVuZ3RoO2ZvcihyPW88MD91OmE/bzowO3I8dTtyKyspaWYoKChuPWlbcl0pLnNlbGVjdGVkfHxyPT09bykmJiFuLmRpc2FibGVkJiYoIW4ucGFyZW50Tm9kZS5kaXNhYmxlZHx8IU4obi5wYXJlbnROb2RlLFwib3B0Z3JvdXBcIikpKXtpZih0PXcobikudmFsKCksYSlyZXR1cm4gdDtzLnB1c2godCl9cmV0dXJuIHN9LHNldDpmdW5jdGlvbihlLHQpe3ZhciBuLHIsaT1lLm9wdGlvbnMsbz13Lm1ha2VBcnJheSh0KSxhPWkubGVuZ3RoO3doaWxlKGEtLSkoKHI9aVthXSkuc2VsZWN0ZWQ9dy5pbkFycmF5KHcudmFsSG9va3Mub3B0aW9uLmdldChyKSxvKT4tMSkmJihuPSEwKTtyZXR1cm4gbnx8KGUuc2VsZWN0ZWRJbmRleD0tMSksb319fX0pLHcuZWFjaChbXCJyYWRpb1wiLFwiY2hlY2tib3hcIl0sZnVuY3Rpb24oKXt3LnZhbEhvb2tzW3RoaXNdPXtzZXQ6ZnVuY3Rpb24oZSx0KXtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiBlLmNoZWNrZWQ9dy5pbkFycmF5KHcoZSkudmFsKCksdCk+LTF9fSxoLmNoZWNrT258fCh3LnZhbEhvb2tzW3RoaXNdLmdldD1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09PWUuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik/XCJvblwiOmUudmFsdWV9KX0pLGguZm9jdXNpbj1cIm9uZm9jdXNpblwiaW4gZTt2YXIgd3Q9L14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFR0PWZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCl9O3cuZXh0ZW5kKHcuZXZlbnQse3RyaWdnZXI6ZnVuY3Rpb24odCxuLGksbyl7dmFyIGEscyx1LGwsYyxwLGQsaCx2PVtpfHxyXSxtPWYuY2FsbCh0LFwidHlwZVwiKT90LnR5cGU6dCx4PWYuY2FsbCh0LFwibmFtZXNwYWNlXCIpP3QubmFtZXNwYWNlLnNwbGl0KFwiLlwiKTpbXTtpZihzPWg9dT1pPWl8fHIsMyE9PWkubm9kZVR5cGUmJjghPT1pLm5vZGVUeXBlJiYhd3QudGVzdChtK3cuZXZlbnQudHJpZ2dlcmVkKSYmKG0uaW5kZXhPZihcIi5cIik+LTEmJihtPSh4PW0uc3BsaXQoXCIuXCIpKS5zaGlmdCgpLHguc29ydCgpKSxjPW0uaW5kZXhPZihcIjpcIik8MCYmXCJvblwiK20sdD10W3cuZXhwYW5kb10/dDpuZXcgdy5FdmVudChtLFwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0KSx0LmlzVHJpZ2dlcj1vPzI6Myx0Lm5hbWVzcGFjZT14LmpvaW4oXCIuXCIpLHQucm5hbWVzcGFjZT10Lm5hbWVzcGFjZT9uZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIreC5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIik6bnVsbCx0LnJlc3VsdD12b2lkIDAsdC50YXJnZXR8fCh0LnRhcmdldD1pKSxuPW51bGw9PW4/W3RdOncubWFrZUFycmF5KG4sW3RdKSxkPXcuZXZlbnQuc3BlY2lhbFttXXx8e30sb3x8IWQudHJpZ2dlcnx8ITEhPT1kLnRyaWdnZXIuYXBwbHkoaSxuKSkpe2lmKCFvJiYhZC5ub0J1YmJsZSYmIXkoaSkpe2ZvcihsPWQuZGVsZWdhdGVUeXBlfHxtLHd0LnRlc3QobCttKXx8KHM9cy5wYXJlbnROb2RlKTtzO3M9cy5wYXJlbnROb2RlKXYucHVzaChzKSx1PXM7dT09PShpLm93bmVyRG9jdW1lbnR8fHIpJiZ2LnB1c2godS5kZWZhdWx0Vmlld3x8dS5wYXJlbnRXaW5kb3d8fGUpfWE9MDt3aGlsZSgocz12W2ErK10pJiYhdC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWg9cyx0LnR5cGU9YT4xP2w6ZC5iaW5kVHlwZXx8bSwocD0oSi5nZXQocyxcImV2ZW50c1wiKXx8e30pW3QudHlwZV0mJkouZ2V0KHMsXCJoYW5kbGVcIikpJiZwLmFwcGx5KHMsbiksKHA9YyYmc1tjXSkmJnAuYXBwbHkmJlkocykmJih0LnJlc3VsdD1wLmFwcGx5KHMsbiksITE9PT10LnJlc3VsdCYmdC5wcmV2ZW50RGVmYXVsdCgpKTtyZXR1cm4gdC50eXBlPW0sb3x8dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8ZC5fZGVmYXVsdCYmITEhPT1kLl9kZWZhdWx0LmFwcGx5KHYucG9wKCksbil8fCFZKGkpfHxjJiZnKGlbbV0pJiYheShpKSYmKCh1PWlbY10pJiYoaVtjXT1udWxsKSx3LmV2ZW50LnRyaWdnZXJlZD1tLHQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSYmaC5hZGRFdmVudExpc3RlbmVyKG0sVHQpLGlbbV0oKSx0LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkmJmgucmVtb3ZlRXZlbnRMaXN0ZW5lcihtLFR0KSx3LmV2ZW50LnRyaWdnZXJlZD12b2lkIDAsdSYmKGlbY109dSkpLHQucmVzdWx0fX0sc2ltdWxhdGU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXcuZXh0ZW5kKG5ldyB3LkV2ZW50LG4se3R5cGU6ZSxpc1NpbXVsYXRlZDohMH0pO3cuZXZlbnQudHJpZ2dlcihyLG51bGwsdCl9fSksdy5mbi5leHRlbmQoe3RyaWdnZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dy5ldmVudC50cmlnZ2VyKGUsdCx0aGlzKX0pfSx0cmlnZ2VySGFuZGxlcjpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXNbMF07aWYobilyZXR1cm4gdy5ldmVudC50cmlnZ2VyKGUsdCxuLCEwKX19KSxoLmZvY3VzaW58fHcuZWFjaCh7Zm9jdXM6XCJmb2N1c2luXCIsYmx1cjpcImZvY3Vzb3V0XCJ9LGZ1bmN0aW9uKGUsdCl7dmFyIG49ZnVuY3Rpb24oZSl7dy5ldmVudC5zaW11bGF0ZSh0LGUudGFyZ2V0LHcuZXZlbnQuZml4KGUpKX07dy5ldmVudC5zcGVjaWFsW3RdPXtzZXR1cDpmdW5jdGlvbigpe3ZhciByPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyxpPUouYWNjZXNzKHIsdCk7aXx8ci5hZGRFdmVudExpc3RlbmVyKGUsbiwhMCksSi5hY2Nlc3Mocix0LChpfHwwKSsxKX0sdGVhcmRvd246ZnVuY3Rpb24oKXt2YXIgcj10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsaT1KLmFjY2VzcyhyLHQpLTE7aT9KLmFjY2VzcyhyLHQsaSk6KHIucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLG4sITApLEoucmVtb3ZlKHIsdCkpfX19KTt2YXIgQ3Q9ZS5sb2NhdGlvbixFdD1EYXRlLm5vdygpLGt0PS9cXD8vO3cucGFyc2VYTUw9ZnVuY3Rpb24odCl7dmFyIG47aWYoIXR8fFwic3RyaW5nXCIhPXR5cGVvZiB0KXJldHVybiBudWxsO3RyeXtuPShuZXcgZS5ET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyh0LFwidGV4dC94bWxcIil9Y2F0Y2goZSl7bj12b2lkIDB9cmV0dXJuIG4mJiFuLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwicGFyc2VyZXJyb3JcIikubGVuZ3RofHx3LmVycm9yKFwiSW52YWxpZCBYTUw6IFwiK3QpLG59O3ZhciBTdD0vXFxbXFxdJC8sRHQ9L1xccj9cXG4vZyxOdD0vXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksQXQ9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO2Z1bmN0aW9uIGp0KGUsdCxuLHIpe3ZhciBpO2lmKEFycmF5LmlzQXJyYXkodCkpdy5lYWNoKHQsZnVuY3Rpb24odCxpKXtufHxTdC50ZXN0KGUpP3IoZSxpKTpqdChlK1wiW1wiKyhcIm9iamVjdFwiPT10eXBlb2YgaSYmbnVsbCE9aT90OlwiXCIpK1wiXVwiLGksbixyKX0pO2Vsc2UgaWYobnx8XCJvYmplY3RcIiE9PXgodCkpcihlLHQpO2Vsc2UgZm9yKGkgaW4gdClqdChlK1wiW1wiK2krXCJdXCIsdFtpXSxuLHIpfXcucGFyYW09ZnVuY3Rpb24oZSx0KXt2YXIgbixyPVtdLGk9ZnVuY3Rpb24oZSx0KXt2YXIgbj1nKHQpP3QoKTp0O3Jbci5sZW5ndGhdPWVuY29kZVVSSUNvbXBvbmVudChlKStcIj1cIitlbmNvZGVVUklDb21wb25lbnQobnVsbD09bj9cIlwiOm4pfTtpZihBcnJheS5pc0FycmF5KGUpfHxlLmpxdWVyeSYmIXcuaXNQbGFpbk9iamVjdChlKSl3LmVhY2goZSxmdW5jdGlvbigpe2kodGhpcy5uYW1lLHRoaXMudmFsdWUpfSk7ZWxzZSBmb3IobiBpbiBlKWp0KG4sZVtuXSx0LGkpO3JldHVybiByLmpvaW4oXCImXCIpfSx3LmZuLmV4dGVuZCh7c2VyaWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHcucGFyYW0odGhpcy5zZXJpYWxpemVBcnJheSgpKX0sc2VyaWFsaXplQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgZT13LnByb3AodGhpcyxcImVsZW1lbnRzXCIpO3JldHVybiBlP3cubWFrZUFycmF5KGUpOnRoaXN9KS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgZT10aGlzLnR5cGU7cmV0dXJuIHRoaXMubmFtZSYmIXcodGhpcykuaXMoXCI6ZGlzYWJsZWRcIikmJkF0LnRlc3QodGhpcy5ub2RlTmFtZSkmJiFOdC50ZXN0KGUpJiYodGhpcy5jaGVja2VkfHwhcGUudGVzdChlKSl9KS5tYXAoZnVuY3Rpb24oZSx0KXt2YXIgbj13KHRoaXMpLnZhbCgpO3JldHVybiBudWxsPT1uP251bGw6QXJyYXkuaXNBcnJheShuKT93Lm1hcChuLGZ1bmN0aW9uKGUpe3JldHVybntuYW1lOnQubmFtZSx2YWx1ZTplLnJlcGxhY2UoRHQsXCJcXHJcXG5cIil9fSk6e25hbWU6dC5uYW1lLHZhbHVlOm4ucmVwbGFjZShEdCxcIlxcclxcblwiKX19KS5nZXQoKX19KTt2YXIgcXQ9LyUyMC9nLEx0PS8jLiokLyxIdD0vKFs/Jl0pXz1bXiZdKi8sT3Q9L14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9nbSxQdD0vXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxNdD0vXig/OkdFVHxIRUFEKSQvLFJ0PS9eXFwvXFwvLyxJdD17fSxXdD17fSwkdD1cIiovXCIuY29uY2F0KFwiKlwiKSxCdD1yLmNyZWF0ZUVsZW1lbnQoXCJhXCIpO0J0LmhyZWY9Q3QuaHJlZjtmdW5jdGlvbiBGdChlKXtyZXR1cm4gZnVuY3Rpb24odCxuKXtcInN0cmluZ1wiIT10eXBlb2YgdCYmKG49dCx0PVwiKlwiKTt2YXIgcixpPTAsbz10LnRvTG93ZXJDYXNlKCkubWF0Y2goTSl8fFtdO2lmKGcobikpd2hpbGUocj1vW2krK10pXCIrXCI9PT1yWzBdPyhyPXIuc2xpY2UoMSl8fFwiKlwiLChlW3JdPWVbcl18fFtdKS51bnNoaWZ0KG4pKTooZVtyXT1lW3JdfHxbXSkucHVzaChuKX19ZnVuY3Rpb24gX3QoZSx0LG4scil7dmFyIGk9e30sbz1lPT09V3Q7ZnVuY3Rpb24gYShzKXt2YXIgdTtyZXR1cm4gaVtzXT0hMCx3LmVhY2goZVtzXXx8W10sZnVuY3Rpb24oZSxzKXt2YXIgbD1zKHQsbixyKTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgbHx8b3x8aVtsXT9vPyEodT1sKTp2b2lkIDA6KHQuZGF0YVR5cGVzLnVuc2hpZnQobCksYShsKSwhMSl9KSx1fXJldHVybiBhKHQuZGF0YVR5cGVzWzBdKXx8IWlbXCIqXCJdJiZhKFwiKlwiKX1mdW5jdGlvbiB6dChlLHQpe3ZhciBuLHIsaT13LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9uc3x8e307Zm9yKG4gaW4gdCl2b2lkIDAhPT10W25dJiYoKGlbbl0/ZTpyfHwocj17fSkpW25dPXRbbl0pO3JldHVybiByJiZ3LmV4dGVuZCghMCxlLHIpLGV9ZnVuY3Rpb24gWHQoZSx0LG4pe3ZhciByLGksbyxhLHM9ZS5jb250ZW50cyx1PWUuZGF0YVR5cGVzO3doaWxlKFwiKlwiPT09dVswXSl1LnNoaWZ0KCksdm9pZCAwPT09ciYmKHI9ZS5taW1lVHlwZXx8dC5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKSk7aWYocilmb3IoaSBpbiBzKWlmKHNbaV0mJnNbaV0udGVzdChyKSl7dS51bnNoaWZ0KGkpO2JyZWFrfWlmKHVbMF1pbiBuKW89dVswXTtlbHNle2ZvcihpIGluIG4pe2lmKCF1WzBdfHxlLmNvbnZlcnRlcnNbaStcIiBcIit1WzBdXSl7bz1pO2JyZWFrfWF8fChhPWkpfW89b3x8YX1pZihvKXJldHVybiBvIT09dVswXSYmdS51bnNoaWZ0KG8pLG5bb119ZnVuY3Rpb24gVXQoZSx0LG4scil7dmFyIGksbyxhLHMsdSxsPXt9LGM9ZS5kYXRhVHlwZXMuc2xpY2UoKTtpZihjWzFdKWZvcihhIGluIGUuY29udmVydGVycylsW2EudG9Mb3dlckNhc2UoKV09ZS5jb252ZXJ0ZXJzW2FdO289Yy5zaGlmdCgpO3doaWxlKG8paWYoZS5yZXNwb25zZUZpZWxkc1tvXSYmKG5bZS5yZXNwb25zZUZpZWxkc1tvXV09dCksIXUmJnImJmUuZGF0YUZpbHRlciYmKHQ9ZS5kYXRhRmlsdGVyKHQsZS5kYXRhVHlwZSkpLHU9byxvPWMuc2hpZnQoKSlpZihcIipcIj09PW8pbz11O2Vsc2UgaWYoXCIqXCIhPT11JiZ1IT09byl7aWYoIShhPWxbdStcIiBcIitvXXx8bFtcIiogXCIrb10pKWZvcihpIGluIGwpaWYoKHM9aS5zcGxpdChcIiBcIikpWzFdPT09byYmKGE9bFt1K1wiIFwiK3NbMF1dfHxsW1wiKiBcIitzWzBdXSkpeyEwPT09YT9hPWxbaV06ITAhPT1sW2ldJiYobz1zWzBdLGMudW5zaGlmdChzWzFdKSk7YnJlYWt9aWYoITAhPT1hKWlmKGEmJmVbXCJ0aHJvd3NcIl0pdD1hKHQpO2Vsc2UgdHJ5e3Q9YSh0KX1jYXRjaChlKXtyZXR1cm57c3RhdGU6XCJwYXJzZXJlcnJvclwiLGVycm9yOmE/ZTpcIk5vIGNvbnZlcnNpb24gZnJvbSBcIit1K1wiIHRvIFwiK299fX1yZXR1cm57c3RhdGU6XCJzdWNjZXNzXCIsZGF0YTp0fX13LmV4dGVuZCh7YWN0aXZlOjAsbGFzdE1vZGlmaWVkOnt9LGV0YWc6e30sYWpheFNldHRpbmdzOnt1cmw6Q3QuaHJlZix0eXBlOlwiR0VUXCIsaXNMb2NhbDpQdC50ZXN0KEN0LnByb3RvY29sKSxnbG9iYWw6ITAscHJvY2Vzc0RhdGE6ITAsYXN5bmM6ITAsY29udGVudFR5cGU6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixhY2NlcHRzOntcIipcIjokdCx0ZXh0OlwidGV4dC9wbGFpblwiLGh0bWw6XCJ0ZXh0L2h0bWxcIix4bWw6XCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsanNvbjpcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwifSxjb250ZW50czp7eG1sOi9cXGJ4bWxcXGIvLGh0bWw6L1xcYmh0bWwvLGpzb246L1xcYmpzb25cXGIvfSxyZXNwb25zZUZpZWxkczp7eG1sOlwicmVzcG9uc2VYTUxcIix0ZXh0OlwicmVzcG9uc2VUZXh0XCIsanNvbjpcInJlc3BvbnNlSlNPTlwifSxjb252ZXJ0ZXJzOntcIiogdGV4dFwiOlN0cmluZyxcInRleHQgaHRtbFwiOiEwLFwidGV4dCBqc29uXCI6SlNPTi5wYXJzZSxcInRleHQgeG1sXCI6dy5wYXJzZVhNTH0sZmxhdE9wdGlvbnM6e3VybDohMCxjb250ZXh0OiEwfX0sYWpheFNldHVwOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ/enQoenQoZSx3LmFqYXhTZXR0aW5ncyksdCk6enQody5hamF4U2V0dGluZ3MsZSl9LGFqYXhQcmVmaWx0ZXI6RnQoSXQpLGFqYXhUcmFuc3BvcnQ6RnQoV3QpLGFqYXg6ZnVuY3Rpb24odCxuKXtcIm9iamVjdFwiPT10eXBlb2YgdCYmKG49dCx0PXZvaWQgMCksbj1ufHx7fTt2YXIgaSxvLGEscyx1LGwsYyxmLHAsZCxoPXcuYWpheFNldHVwKHt9LG4pLGc9aC5jb250ZXh0fHxoLHk9aC5jb250ZXh0JiYoZy5ub2RlVHlwZXx8Zy5qcXVlcnkpP3coZyk6dy5ldmVudCx2PXcuRGVmZXJyZWQoKSxtPXcuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikseD1oLnN0YXR1c0NvZGV8fHt9LGI9e30sVD17fSxDPVwiY2FuY2VsZWRcIixFPXtyZWFkeVN0YXRlOjAsZ2V0UmVzcG9uc2VIZWFkZXI6ZnVuY3Rpb24oZSl7dmFyIHQ7aWYoYyl7aWYoIXMpe3M9e307d2hpbGUodD1PdC5leGVjKGEpKXNbdFsxXS50b0xvd2VyQ2FzZSgpXT10WzJdfXQ9c1tlLnRvTG93ZXJDYXNlKCldfXJldHVybiBudWxsPT10P251bGw6dH0sZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIGM/YTpudWxsfSxzZXRSZXF1ZXN0SGVhZGVyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG51bGw9PWMmJihlPVRbZS50b0xvd2VyQ2FzZSgpXT1UW2UudG9Mb3dlckNhc2UoKV18fGUsYltlXT10KSx0aGlzfSxvdmVycmlkZU1pbWVUeXBlOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1jJiYoaC5taW1lVHlwZT1lKSx0aGlzfSxzdGF0dXNDb2RlOmZ1bmN0aW9uKGUpe3ZhciB0O2lmKGUpaWYoYylFLmFsd2F5cyhlW0Uuc3RhdHVzXSk7ZWxzZSBmb3IodCBpbiBlKXhbdF09W3hbdF0sZVt0XV07cmV0dXJuIHRoaXN9LGFib3J0OmZ1bmN0aW9uKGUpe3ZhciB0PWV8fEM7cmV0dXJuIGkmJmkuYWJvcnQodCksaygwLHQpLHRoaXN9fTtpZih2LnByb21pc2UoRSksaC51cmw9KCh0fHxoLnVybHx8Q3QuaHJlZikrXCJcIikucmVwbGFjZShSdCxDdC5wcm90b2NvbCtcIi8vXCIpLGgudHlwZT1uLm1ldGhvZHx8bi50eXBlfHxoLm1ldGhvZHx8aC50eXBlLGguZGF0YVR5cGVzPShoLmRhdGFUeXBlfHxcIipcIikudG9Mb3dlckNhc2UoKS5tYXRjaChNKXx8W1wiXCJdLG51bGw9PWguY3Jvc3NEb21haW4pe2w9ci5jcmVhdGVFbGVtZW50KFwiYVwiKTt0cnl7bC5ocmVmPWgudXJsLGwuaHJlZj1sLmhyZWYsaC5jcm9zc0RvbWFpbj1CdC5wcm90b2NvbCtcIi8vXCIrQnQuaG9zdCE9bC5wcm90b2NvbCtcIi8vXCIrbC5ob3N0fWNhdGNoKGUpe2guY3Jvc3NEb21haW49ITB9fWlmKGguZGF0YSYmaC5wcm9jZXNzRGF0YSYmXCJzdHJpbmdcIiE9dHlwZW9mIGguZGF0YSYmKGguZGF0YT13LnBhcmFtKGguZGF0YSxoLnRyYWRpdGlvbmFsKSksX3QoSXQsaCxuLEUpLGMpcmV0dXJuIEU7KGY9dy5ldmVudCYmaC5nbG9iYWwpJiYwPT13LmFjdGl2ZSsrJiZ3LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RhcnRcIiksaC50eXBlPWgudHlwZS50b1VwcGVyQ2FzZSgpLGguaGFzQ29udGVudD0hTXQudGVzdChoLnR5cGUpLG89aC51cmwucmVwbGFjZShMdCxcIlwiKSxoLmhhc0NvbnRlbnQ/aC5kYXRhJiZoLnByb2Nlc3NEYXRhJiYwPT09KGguY29udGVudFR5cGV8fFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikmJihoLmRhdGE9aC5kYXRhLnJlcGxhY2UocXQsXCIrXCIpKTooZD1oLnVybC5zbGljZShvLmxlbmd0aCksaC5kYXRhJiYoaC5wcm9jZXNzRGF0YXx8XCJzdHJpbmdcIj09dHlwZW9mIGguZGF0YSkmJihvKz0oa3QudGVzdChvKT9cIiZcIjpcIj9cIikraC5kYXRhLGRlbGV0ZSBoLmRhdGEpLCExPT09aC5jYWNoZSYmKG89by5yZXBsYWNlKEh0LFwiJDFcIiksZD0oa3QudGVzdChvKT9cIiZcIjpcIj9cIikrXCJfPVwiK0V0KysrZCksaC51cmw9bytkKSxoLmlmTW9kaWZpZWQmJih3Lmxhc3RNb2RpZmllZFtvXSYmRS5zZXRSZXF1ZXN0SGVhZGVyKFwiSWYtTW9kaWZpZWQtU2luY2VcIix3Lmxhc3RNb2RpZmllZFtvXSksdy5ldGFnW29dJiZFLnNldFJlcXVlc3RIZWFkZXIoXCJJZi1Ob25lLU1hdGNoXCIsdy5ldGFnW29dKSksKGguZGF0YSYmaC5oYXNDb250ZW50JiYhMSE9PWguY29udGVudFR5cGV8fG4uY29udGVudFR5cGUpJiZFLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIixoLmNvbnRlbnRUeXBlKSxFLnNldFJlcXVlc3RIZWFkZXIoXCJBY2NlcHRcIixoLmRhdGFUeXBlc1swXSYmaC5hY2NlcHRzW2guZGF0YVR5cGVzWzBdXT9oLmFjY2VwdHNbaC5kYXRhVHlwZXNbMF1dKyhcIipcIiE9PWguZGF0YVR5cGVzWzBdP1wiLCBcIiskdCtcIjsgcT0wLjAxXCI6XCJcIik6aC5hY2NlcHRzW1wiKlwiXSk7Zm9yKHAgaW4gaC5oZWFkZXJzKUUuc2V0UmVxdWVzdEhlYWRlcihwLGguaGVhZGVyc1twXSk7aWYoaC5iZWZvcmVTZW5kJiYoITE9PT1oLmJlZm9yZVNlbmQuY2FsbChnLEUsaCl8fGMpKXJldHVybiBFLmFib3J0KCk7aWYoQz1cImFib3J0XCIsbS5hZGQoaC5jb21wbGV0ZSksRS5kb25lKGguc3VjY2VzcyksRS5mYWlsKGguZXJyb3IpLGk9X3QoV3QsaCxuLEUpKXtpZihFLnJlYWR5U3RhdGU9MSxmJiZ5LnRyaWdnZXIoXCJhamF4U2VuZFwiLFtFLGhdKSxjKXJldHVybiBFO2guYXN5bmMmJmgudGltZW91dD4wJiYodT1lLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtFLmFib3J0KFwidGltZW91dFwiKX0saC50aW1lb3V0KSk7dHJ5e2M9ITEsaS5zZW5kKGIsayl9Y2F0Y2goZSl7aWYoYyl0aHJvdyBlO2soLTEsZSl9fWVsc2UgaygtMSxcIk5vIFRyYW5zcG9ydFwiKTtmdW5jdGlvbiBrKHQsbixyLHMpe3ZhciBsLHAsZCxiLFQsQz1uO2N8fChjPSEwLHUmJmUuY2xlYXJUaW1lb3V0KHUpLGk9dm9pZCAwLGE9c3x8XCJcIixFLnJlYWR5U3RhdGU9dD4wPzQ6MCxsPXQ+PTIwMCYmdDwzMDB8fDMwND09PXQsciYmKGI9WHQoaCxFLHIpKSxiPVV0KGgsYixFLGwpLGw/KGguaWZNb2RpZmllZCYmKChUPUUuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpKSYmKHcubGFzdE1vZGlmaWVkW29dPVQpLChUPUUuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpKSYmKHcuZXRhZ1tvXT1UKSksMjA0PT09dHx8XCJIRUFEXCI9PT1oLnR5cGU/Qz1cIm5vY29udGVudFwiOjMwND09PXQ/Qz1cIm5vdG1vZGlmaWVkXCI6KEM9Yi5zdGF0ZSxwPWIuZGF0YSxsPSEoZD1iLmVycm9yKSkpOihkPUMsIXQmJkN8fChDPVwiZXJyb3JcIix0PDAmJih0PTApKSksRS5zdGF0dXM9dCxFLnN0YXR1c1RleHQ9KG58fEMpK1wiXCIsbD92LnJlc29sdmVXaXRoKGcsW3AsQyxFXSk6di5yZWplY3RXaXRoKGcsW0UsQyxkXSksRS5zdGF0dXNDb2RlKHgpLHg9dm9pZCAwLGYmJnkudHJpZ2dlcihsP1wiYWpheFN1Y2Nlc3NcIjpcImFqYXhFcnJvclwiLFtFLGgsbD9wOmRdKSxtLmZpcmVXaXRoKGcsW0UsQ10pLGYmJih5LnRyaWdnZXIoXCJhamF4Q29tcGxldGVcIixbRSxoXSksLS13LmFjdGl2ZXx8dy5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIikpKX1yZXR1cm4gRX0sZ2V0SlNPTjpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHcuZ2V0KGUsdCxuLFwianNvblwiKX0sZ2V0U2NyaXB0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHcuZ2V0KGUsdm9pZCAwLHQsXCJzY3JpcHRcIil9fSksdy5lYWNoKFtcImdldFwiLFwicG9zdFwiXSxmdW5jdGlvbihlLHQpe3dbdF09ZnVuY3Rpb24oZSxuLHIsaSl7cmV0dXJuIGcobikmJihpPWl8fHIscj1uLG49dm9pZCAwKSx3LmFqYXgody5leHRlbmQoe3VybDplLHR5cGU6dCxkYXRhVHlwZTppLGRhdGE6bixzdWNjZXNzOnJ9LHcuaXNQbGFpbk9iamVjdChlKSYmZSkpfX0pLHcuX2V2YWxVcmw9ZnVuY3Rpb24oZSl7cmV0dXJuIHcuYWpheCh7dXJsOmUsdHlwZTpcIkdFVFwiLGRhdGFUeXBlOlwic2NyaXB0XCIsY2FjaGU6ITAsYXN5bmM6ITEsZ2xvYmFsOiExLFwidGhyb3dzXCI6ITB9KX0sdy5mbi5leHRlbmQoe3dyYXBBbGw6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIHRoaXNbMF0mJihnKGUpJiYoZT1lLmNhbGwodGhpc1swXSkpLHQ9dyhlLHRoaXNbMF0ub3duZXJEb2N1bWVudCkuZXEoMCkuY2xvbmUoITApLHRoaXNbMF0ucGFyZW50Tm9kZSYmdC5pbnNlcnRCZWZvcmUodGhpc1swXSksdC5tYXAoZnVuY3Rpb24oKXt2YXIgZT10aGlzO3doaWxlKGUuZmlyc3RFbGVtZW50Q2hpbGQpZT1lLmZpcnN0RWxlbWVudENoaWxkO3JldHVybiBlfSkuYXBwZW5kKHRoaXMpKSx0aGlzfSx3cmFwSW5uZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIGcoZSk/dGhpcy5lYWNoKGZ1bmN0aW9uKHQpe3codGhpcykud3JhcElubmVyKGUuY2FsbCh0aGlzLHQpKX0pOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciB0PXcodGhpcyksbj10LmNvbnRlbnRzKCk7bi5sZW5ndGg/bi53cmFwQWxsKGUpOnQuYXBwZW5kKGUpfSl9LHdyYXA6ZnVuY3Rpb24oZSl7dmFyIHQ9ZyhlKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKG4pe3codGhpcykud3JhcEFsbCh0P2UuY2FsbCh0aGlzLG4pOmUpfSl9LHVud3JhcDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wYXJlbnQoZSkubm90KFwiYm9keVwiKS5lYWNoKGZ1bmN0aW9uKCl7dyh0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpfSksdGhpc319KSx3LmV4cHIucHNldWRvcy5oaWRkZW49ZnVuY3Rpb24oZSl7cmV0dXJuIXcuZXhwci5wc2V1ZG9zLnZpc2libGUoZSl9LHcuZXhwci5wc2V1ZG9zLnZpc2libGU9ZnVuY3Rpb24oZSl7cmV0dXJuISEoZS5vZmZzZXRXaWR0aHx8ZS5vZmZzZXRIZWlnaHR8fGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpfSx3LmFqYXhTZXR0aW5ncy54aHI9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIG5ldyBlLlhNTEh0dHBSZXF1ZXN0fWNhdGNoKGUpe319O3ZhciBWdD17MDoyMDAsMTIyMzoyMDR9LEd0PXcuYWpheFNldHRpbmdzLnhocigpO2guY29ycz0hIUd0JiZcIndpdGhDcmVkZW50aWFsc1wiaW4gR3QsaC5hamF4PUd0PSEhR3Qsdy5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKHQpe3ZhciBuLHI7aWYoaC5jb3JzfHxHdCYmIXQuY3Jvc3NEb21haW4pcmV0dXJue3NlbmQ6ZnVuY3Rpb24oaSxvKXt2YXIgYSxzPXQueGhyKCk7aWYocy5vcGVuKHQudHlwZSx0LnVybCx0LmFzeW5jLHQudXNlcm5hbWUsdC5wYXNzd29yZCksdC54aHJGaWVsZHMpZm9yKGEgaW4gdC54aHJGaWVsZHMpc1thXT10LnhockZpZWxkc1thXTt0Lm1pbWVUeXBlJiZzLm92ZXJyaWRlTWltZVR5cGUmJnMub3ZlcnJpZGVNaW1lVHlwZSh0Lm1pbWVUeXBlKSx0LmNyb3NzRG9tYWlufHxpW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXXx8KGlbXCJYLVJlcXVlc3RlZC1XaXRoXCJdPVwiWE1MSHR0cFJlcXVlc3RcIik7Zm9yKGEgaW4gaSlzLnNldFJlcXVlc3RIZWFkZXIoYSxpW2FdKTtuPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe24mJihuPXI9cy5vbmxvYWQ9cy5vbmVycm9yPXMub25hYm9ydD1zLm9udGltZW91dD1zLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLFwiYWJvcnRcIj09PWU/cy5hYm9ydCgpOlwiZXJyb3JcIj09PWU/XCJudW1iZXJcIiE9dHlwZW9mIHMuc3RhdHVzP28oMCxcImVycm9yXCIpOm8ocy5zdGF0dXMscy5zdGF0dXNUZXh0KTpvKFZ0W3Muc3RhdHVzXXx8cy5zdGF0dXMscy5zdGF0dXNUZXh0LFwidGV4dFwiIT09KHMucmVzcG9uc2VUeXBlfHxcInRleHRcIil8fFwic3RyaW5nXCIhPXR5cGVvZiBzLnJlc3BvbnNlVGV4dD97YmluYXJ5OnMucmVzcG9uc2V9Ont0ZXh0OnMucmVzcG9uc2VUZXh0fSxzLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSl9fSxzLm9ubG9hZD1uKCkscj1zLm9uZXJyb3I9cy5vbnRpbWVvdXQ9bihcImVycm9yXCIpLHZvaWQgMCE9PXMub25hYm9ydD9zLm9uYWJvcnQ9cjpzLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpezQ9PT1zLnJlYWR5U3RhdGUmJmUuc2V0VGltZW91dChmdW5jdGlvbigpe24mJnIoKX0pfSxuPW4oXCJhYm9ydFwiKTt0cnl7cy5zZW5kKHQuaGFzQ29udGVudCYmdC5kYXRhfHxudWxsKX1jYXRjaChlKXtpZihuKXRocm93IGV9fSxhYm9ydDpmdW5jdGlvbigpe24mJm4oKX19fSksdy5hamF4UHJlZmlsdGVyKGZ1bmN0aW9uKGUpe2UuY3Jvc3NEb21haW4mJihlLmNvbnRlbnRzLnNjcmlwdD0hMSl9KSx3LmFqYXhTZXR1cCh7YWNjZXB0czp7c2NyaXB0OlwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIn0sY29udGVudHM6e3NjcmlwdDovXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi99LGNvbnZlcnRlcnM6e1widGV4dCBzY3JpcHRcIjpmdW5jdGlvbihlKXtyZXR1cm4gdy5nbG9iYWxFdmFsKGUpLGV9fX0pLHcuYWpheFByZWZpbHRlcihcInNjcmlwdFwiLGZ1bmN0aW9uKGUpe3ZvaWQgMD09PWUuY2FjaGUmJihlLmNhY2hlPSExKSxlLmNyb3NzRG9tYWluJiYoZS50eXBlPVwiR0VUXCIpfSksdy5hamF4VHJhbnNwb3J0KFwic2NyaXB0XCIsZnVuY3Rpb24oZSl7aWYoZS5jcm9zc0RvbWFpbil7dmFyIHQsbjtyZXR1cm57c2VuZDpmdW5jdGlvbihpLG8pe3Q9dyhcIjxzY3JpcHQ+XCIpLnByb3Aoe2NoYXJzZXQ6ZS5zY3JpcHRDaGFyc2V0LHNyYzplLnVybH0pLm9uKFwibG9hZCBlcnJvclwiLG49ZnVuY3Rpb24oZSl7dC5yZW1vdmUoKSxuPW51bGwsZSYmbyhcImVycm9yXCI9PT1lLnR5cGU/NDA0OjIwMCxlLnR5cGUpfSksci5oZWFkLmFwcGVuZENoaWxkKHRbMF0pfSxhYm9ydDpmdW5jdGlvbigpe24mJm4oKX19fX0pO3ZhciBZdD1bXSxRdD0vKD0pXFw/KD89JnwkKXxcXD9cXD8vO3cuYWpheFNldHVwKHtqc29ucDpcImNhbGxiYWNrXCIsanNvbnBDYWxsYmFjazpmdW5jdGlvbigpe3ZhciBlPVl0LnBvcCgpfHx3LmV4cGFuZG8rXCJfXCIrRXQrKztyZXR1cm4gdGhpc1tlXT0hMCxlfX0pLHcuYWpheFByZWZpbHRlcihcImpzb24ganNvbnBcIixmdW5jdGlvbih0LG4scil7dmFyIGksbyxhLHM9ITEhPT10Lmpzb25wJiYoUXQudGVzdCh0LnVybCk/XCJ1cmxcIjpcInN0cmluZ1wiPT10eXBlb2YgdC5kYXRhJiYwPT09KHQuY29udGVudFR5cGV8fFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikmJlF0LnRlc3QodC5kYXRhKSYmXCJkYXRhXCIpO2lmKHN8fFwianNvbnBcIj09PXQuZGF0YVR5cGVzWzBdKXJldHVybiBpPXQuanNvbnBDYWxsYmFjaz1nKHQuanNvbnBDYWxsYmFjayk/dC5qc29ucENhbGxiYWNrKCk6dC5qc29ucENhbGxiYWNrLHM/dFtzXT10W3NdLnJlcGxhY2UoUXQsXCIkMVwiK2kpOiExIT09dC5qc29ucCYmKHQudXJsKz0oa3QudGVzdCh0LnVybCk/XCImXCI6XCI/XCIpK3QuanNvbnArXCI9XCIraSksdC5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl09ZnVuY3Rpb24oKXtyZXR1cm4gYXx8dy5lcnJvcihpK1wiIHdhcyBub3QgY2FsbGVkXCIpLGFbMF19LHQuZGF0YVR5cGVzWzBdPVwianNvblwiLG89ZVtpXSxlW2ldPWZ1bmN0aW9uKCl7YT1hcmd1bWVudHN9LHIuYWx3YXlzKGZ1bmN0aW9uKCl7dm9pZCAwPT09bz93KGUpLnJlbW92ZVByb3AoaSk6ZVtpXT1vLHRbaV0mJih0Lmpzb25wQ2FsbGJhY2s9bi5qc29ucENhbGxiYWNrLFl0LnB1c2goaSkpLGEmJmcobykmJm8oYVswXSksYT1vPXZvaWQgMH0pLFwic2NyaXB0XCJ9KSxoLmNyZWF0ZUhUTUxEb2N1bWVudD1mdW5jdGlvbigpe3ZhciBlPXIuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpLmJvZHk7cmV0dXJuIGUuaW5uZXJIVE1MPVwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIiwyPT09ZS5jaGlsZE5vZGVzLmxlbmd0aH0oKSx3LnBhcnNlSFRNTD1mdW5jdGlvbihlLHQsbil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuW107XCJib29sZWFuXCI9PXR5cGVvZiB0JiYobj10LHQ9ITEpO3ZhciBpLG8sYTtyZXR1cm4gdHx8KGguY3JlYXRlSFRNTERvY3VtZW50PygoaT0odD1yLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKSkuY3JlYXRlRWxlbWVudChcImJhc2VcIikpLmhyZWY9ci5sb2NhdGlvbi5ocmVmLHQuaGVhZC5hcHBlbmRDaGlsZChpKSk6dD1yKSxvPUEuZXhlYyhlKSxhPSFuJiZbXSxvP1t0LmNyZWF0ZUVsZW1lbnQob1sxXSldOihvPXhlKFtlXSx0LGEpLGEmJmEubGVuZ3RoJiZ3KGEpLnJlbW92ZSgpLHcubWVyZ2UoW10sby5jaGlsZE5vZGVzKSl9LHcuZm4ubG9hZD1mdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGE9dGhpcyxzPWUuaW5kZXhPZihcIiBcIik7cmV0dXJuIHM+LTEmJihyPXZ0KGUuc2xpY2UocykpLGU9ZS5zbGljZSgwLHMpKSxnKHQpPyhuPXQsdD12b2lkIDApOnQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiYoaT1cIlBPU1RcIiksYS5sZW5ndGg+MCYmdy5hamF4KHt1cmw6ZSx0eXBlOml8fFwiR0VUXCIsZGF0YVR5cGU6XCJodG1sXCIsZGF0YTp0fSkuZG9uZShmdW5jdGlvbihlKXtvPWFyZ3VtZW50cyxhLmh0bWwocj93KFwiPGRpdj5cIikuYXBwZW5kKHcucGFyc2VIVE1MKGUpKS5maW5kKHIpOmUpfSkuYWx3YXlzKG4mJmZ1bmN0aW9uKGUsdCl7YS5lYWNoKGZ1bmN0aW9uKCl7bi5hcHBseSh0aGlzLG98fFtlLnJlc3BvbnNlVGV4dCx0LGVdKX0pfSksdGhpc30sdy5lYWNoKFtcImFqYXhTdGFydFwiLFwiYWpheFN0b3BcIixcImFqYXhDb21wbGV0ZVwiLFwiYWpheEVycm9yXCIsXCJhamF4U3VjY2Vzc1wiLFwiYWpheFNlbmRcIl0sZnVuY3Rpb24oZSx0KXt3LmZuW3RdPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm9uKHQsZSl9fSksdy5leHByLnBzZXVkb3MuYW5pbWF0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHcuZ3JlcCh3LnRpbWVycyxmdW5jdGlvbih0KXtyZXR1cm4gZT09PXQuZWxlbX0pLmxlbmd0aH0sdy5vZmZzZXQ9e3NldE9mZnNldDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscyx1LGwsYz13LmNzcyhlLFwicG9zaXRpb25cIiksZj13KGUpLHA9e307XCJzdGF0aWNcIj09PWMmJihlLnN0eWxlLnBvc2l0aW9uPVwicmVsYXRpdmVcIikscz1mLm9mZnNldCgpLG89dy5jc3MoZSxcInRvcFwiKSx1PXcuY3NzKGUsXCJsZWZ0XCIpLChsPShcImFic29sdXRlXCI9PT1jfHxcImZpeGVkXCI9PT1jKSYmKG8rdSkuaW5kZXhPZihcImF1dG9cIik+LTEpPyhhPShyPWYucG9zaXRpb24oKSkudG9wLGk9ci5sZWZ0KTooYT1wYXJzZUZsb2F0KG8pfHwwLGk9cGFyc2VGbG9hdCh1KXx8MCksZyh0KSYmKHQ9dC5jYWxsKGUsbix3LmV4dGVuZCh7fSxzKSkpLG51bGwhPXQudG9wJiYocC50b3A9dC50b3Atcy50b3ArYSksbnVsbCE9dC5sZWZ0JiYocC5sZWZ0PXQubGVmdC1zLmxlZnQraSksXCJ1c2luZ1wiaW4gdD90LnVzaW5nLmNhbGwoZSxwKTpmLmNzcyhwKX19LHcuZm4uZXh0ZW5kKHtvZmZzZXQ6ZnVuY3Rpb24oZSl7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09ZT90aGlzOnRoaXMuZWFjaChmdW5jdGlvbih0KXt3Lm9mZnNldC5zZXRPZmZzZXQodGhpcyxlLHQpfSk7dmFyIHQsbixyPXRoaXNbMF07aWYocilyZXR1cm4gci5nZXRDbGllbnRSZWN0cygpLmxlbmd0aD8odD1yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG49ci5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LHt0b3A6dC50b3Arbi5wYWdlWU9mZnNldCxsZWZ0OnQubGVmdCtuLnBhZ2VYT2Zmc2V0fSk6e3RvcDowLGxlZnQ6MH19LHBvc2l0aW9uOmZ1bmN0aW9uKCl7aWYodGhpc1swXSl7dmFyIGUsdCxuLHI9dGhpc1swXSxpPXt0b3A6MCxsZWZ0OjB9O2lmKFwiZml4ZWRcIj09PXcuY3NzKHIsXCJwb3NpdGlvblwiKSl0PXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7ZWxzZXt0PXRoaXMub2Zmc2V0KCksbj1yLm93bmVyRG9jdW1lbnQsZT1yLm9mZnNldFBhcmVudHx8bi5kb2N1bWVudEVsZW1lbnQ7d2hpbGUoZSYmKGU9PT1uLmJvZHl8fGU9PT1uLmRvY3VtZW50RWxlbWVudCkmJlwic3RhdGljXCI9PT13LmNzcyhlLFwicG9zaXRpb25cIikpZT1lLnBhcmVudE5vZGU7ZSYmZSE9PXImJjE9PT1lLm5vZGVUeXBlJiYoKGk9dyhlKS5vZmZzZXQoKSkudG9wKz13LmNzcyhlLFwiYm9yZGVyVG9wV2lkdGhcIiwhMCksaS5sZWZ0Kz13LmNzcyhlLFwiYm9yZGVyTGVmdFdpZHRoXCIsITApKX1yZXR1cm57dG9wOnQudG9wLWkudG9wLXcuY3NzKHIsXCJtYXJnaW5Ub3BcIiwhMCksbGVmdDp0LmxlZnQtaS5sZWZ0LXcuY3NzKHIsXCJtYXJnaW5MZWZ0XCIsITApfX19LG9mZnNldFBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBlPXRoaXMub2Zmc2V0UGFyZW50O3doaWxlKGUmJlwic3RhdGljXCI9PT13LmNzcyhlLFwicG9zaXRpb25cIikpZT1lLm9mZnNldFBhcmVudDtyZXR1cm4gZXx8YmV9KX19KSx3LmVhY2goe3Njcm9sbExlZnQ6XCJwYWdlWE9mZnNldFwiLHNjcm9sbFRvcDpcInBhZ2VZT2Zmc2V0XCJ9LGZ1bmN0aW9uKGUsdCl7dmFyIG49XCJwYWdlWU9mZnNldFwiPT09dDt3LmZuW2VdPWZ1bmN0aW9uKHIpe3JldHVybiB6KHRoaXMsZnVuY3Rpb24oZSxyLGkpe3ZhciBvO2lmKHkoZSk/bz1lOjk9PT1lLm5vZGVUeXBlJiYobz1lLmRlZmF1bHRWaWV3KSx2b2lkIDA9PT1pKXJldHVybiBvP29bdF06ZVtyXTtvP28uc2Nyb2xsVG8obj9vLnBhZ2VYT2Zmc2V0Omksbj9pOm8ucGFnZVlPZmZzZXQpOmVbcl09aX0sZSxyLGFyZ3VtZW50cy5sZW5ndGgpfX0pLHcuZWFjaChbXCJ0b3BcIixcImxlZnRcIl0sZnVuY3Rpb24oZSx0KXt3LmNzc0hvb2tzW3RdPV9lKGgucGl4ZWxQb3NpdGlvbixmdW5jdGlvbihlLG4pe2lmKG4pcmV0dXJuIG49RmUoZSx0KSxXZS50ZXN0KG4pP3coZSkucG9zaXRpb24oKVt0XStcInB4XCI6bn0pfSksdy5lYWNoKHtIZWlnaHQ6XCJoZWlnaHRcIixXaWR0aDpcIndpZHRoXCJ9LGZ1bmN0aW9uKGUsdCl7dy5lYWNoKHtwYWRkaW5nOlwiaW5uZXJcIitlLGNvbnRlbnQ6dCxcIlwiOlwib3V0ZXJcIitlfSxmdW5jdGlvbihuLHIpe3cuZm5bcl09ZnVuY3Rpb24oaSxvKXt2YXIgYT1hcmd1bWVudHMubGVuZ3RoJiYobnx8XCJib29sZWFuXCIhPXR5cGVvZiBpKSxzPW58fCghMD09PWl8fCEwPT09bz9cIm1hcmdpblwiOlwiYm9yZGVyXCIpO3JldHVybiB6KHRoaXMsZnVuY3Rpb24odCxuLGkpe3ZhciBvO3JldHVybiB5KHQpPzA9PT1yLmluZGV4T2YoXCJvdXRlclwiKT90W1wiaW5uZXJcIitlXTp0LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFtcImNsaWVudFwiK2VdOjk9PT10Lm5vZGVUeXBlPyhvPXQuZG9jdW1lbnRFbGVtZW50LE1hdGgubWF4KHQuYm9keVtcInNjcm9sbFwiK2VdLG9bXCJzY3JvbGxcIitlXSx0LmJvZHlbXCJvZmZzZXRcIitlXSxvW1wib2Zmc2V0XCIrZV0sb1tcImNsaWVudFwiK2VdKSk6dm9pZCAwPT09aT93LmNzcyh0LG4scyk6dy5zdHlsZSh0LG4saSxzKX0sdCxhP2k6dm9pZCAwLGEpfX0pfSksdy5lYWNoKFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihlLHQpe3cuZm5bdF09ZnVuY3Rpb24oZSxuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD4wP3RoaXMub24odCxudWxsLGUsbik6dGhpcy50cmlnZ2VyKHQpfX0pLHcuZm4uZXh0ZW5kKHtob3ZlcjpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm1vdXNlZW50ZXIoZSkubW91c2VsZWF2ZSh0fHxlKX19KSx3LmZuLmV4dGVuZCh7YmluZDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIHRoaXMub24oZSxudWxsLHQsbil9LHVuYmluZDpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLm9mZihlLG51bGwsdCl9LGRlbGVnYXRlOmZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiB0aGlzLm9uKHQsZSxuLHIpfSx1bmRlbGVnYXRlOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gMT09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5vZmYoZSxcIioqXCIpOnRoaXMub2ZmKHQsZXx8XCIqKlwiLG4pfX0pLHcucHJveHk9ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQmJihuPWVbdF0sdD1lLGU9biksZyhlKSlyZXR1cm4gcj1vLmNhbGwoYXJndW1lbnRzLDIpLGk9ZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0fHx0aGlzLHIuY29uY2F0KG8uY2FsbChhcmd1bWVudHMpKSl9LGkuZ3VpZD1lLmd1aWQ9ZS5ndWlkfHx3Lmd1aWQrKyxpfSx3LmhvbGRSZWFkeT1mdW5jdGlvbihlKXtlP3cucmVhZHlXYWl0Kys6dy5yZWFkeSghMCl9LHcuaXNBcnJheT1BcnJheS5pc0FycmF5LHcucGFyc2VKU09OPUpTT04ucGFyc2Usdy5ub2RlTmFtZT1OLHcuaXNGdW5jdGlvbj1nLHcuaXNXaW5kb3c9eSx3LmNhbWVsQ2FzZT1HLHcudHlwZT14LHcubm93PURhdGUubm93LHcuaXNOdW1lcmljPWZ1bmN0aW9uKGUpe3ZhciB0PXcudHlwZShlKTtyZXR1cm4oXCJudW1iZXJcIj09PXR8fFwic3RyaW5nXCI9PT10KSYmIWlzTmFOKGUtcGFyc2VGbG9hdChlKSl9LFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZCYmZGVmaW5lKFwianF1ZXJ5XCIsW10sZnVuY3Rpb24oKXtyZXR1cm4gd30pO3ZhciBKdD1lLmpRdWVyeSxLdD1lLiQ7cmV0dXJuIHcubm9Db25mbGljdD1mdW5jdGlvbih0KXtyZXR1cm4gZS4kPT09dyYmKGUuJD1LdCksdCYmZS5qUXVlcnk9PT13JiYoZS5qUXVlcnk9SnQpLHd9LHR8fChlLmpRdWVyeT1lLiQ9dyksd30pO1xyXG4iLCIhZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHMoZSl7dmFyIHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiBlLnByb3A/ZS5wcm9wLmFwcGx5KGUsdCk6ZS5hdHRyLmFwcGx5KGUsdCl9ZnVuY3Rpb24gYShlLHQsbil7dmFyIHMsYTtmb3IocyBpbiBuKW4uaGFzT3duUHJvcGVydHkocykmJihhPXMucmVwbGFjZSgvIHwkL2csdC5ldmVudE5hbWVzcGFjZSksZS5iaW5kKGEsbltzXSkpfWZ1bmN0aW9uIGkoZSx0LG4pe2EoZSxuLHtmb2N1czpmdW5jdGlvbigpe3QuYWRkQ2xhc3Mobi5mb2N1c0NsYXNzKX0sYmx1cjpmdW5jdGlvbigpe3QucmVtb3ZlQ2xhc3Mobi5mb2N1c0NsYXNzKSx0LnJlbW92ZUNsYXNzKG4uYWN0aXZlQ2xhc3MpfSxtb3VzZWVudGVyOmZ1bmN0aW9uKCl7dC5hZGRDbGFzcyhuLmhvdmVyQ2xhc3MpfSxtb3VzZWxlYXZlOmZ1bmN0aW9uKCl7dC5yZW1vdmVDbGFzcyhuLmhvdmVyQ2xhc3MpLHQucmVtb3ZlQ2xhc3Mobi5hY3RpdmVDbGFzcyl9LFwibW91c2Vkb3duIHRvdWNoYmVnaW5cIjpmdW5jdGlvbigpe2UuaXMoXCI6ZGlzYWJsZWRcIil8fHQuYWRkQ2xhc3Mobi5hY3RpdmVDbGFzcyl9LFwibW91c2V1cCB0b3VjaGVuZFwiOmZ1bmN0aW9uKCl7dC5yZW1vdmVDbGFzcyhuLmFjdGl2ZUNsYXNzKX19KX1mdW5jdGlvbiByKGUsdCl7ZS5yZW1vdmVDbGFzcyh0LmhvdmVyQ2xhc3MrXCIgXCIrdC5mb2N1c0NsYXNzK1wiIFwiK3QuYWN0aXZlQ2xhc3MpfWZ1bmN0aW9uIGwoZSx0LG4pe24/ZS5hZGRDbGFzcyh0KTplLnJlbW92ZUNsYXNzKHQpfWZ1bmN0aW9uIHUoZSx0LG4pe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgcz1cImNoZWNrZWRcIixhPXQuaXMoXCI6XCIrcyk7dC5wcm9wP3QucHJvcChzLGEpOmE/dC5hdHRyKHMscyk6dC5yZW1vdmVBdHRyKHMpLGwoZSxuLmNoZWNrZWRDbGFzcyxhKX0sMSl9ZnVuY3Rpb24gbyhlLHQsbil7bChlLG4uZGlzYWJsZWRDbGFzcyx0LmlzKFwiOmRpc2FibGVkXCIpKX1mdW5jdGlvbiBjKGUsdCxuKXtzd2l0Y2gobil7Y2FzZVwiYWZ0ZXJcIjpyZXR1cm4gZS5hZnRlcih0KSxlLm5leHQoKTtjYXNlXCJiZWZvcmVcIjpyZXR1cm4gZS5iZWZvcmUodCksZS5wcmV2KCk7Y2FzZVwid3JhcFwiOnJldHVybiBlLndyYXAodCksZS5wYXJlbnQoKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGUsbixhKXt2YXIgaSxyLGw7cmV0dXJuIGF8fChhPXt9KSxhPXQuZXh0ZW5kKHtiaW5kOnt9LGRpdkNsYXNzOm51bGwsZGl2V3JhcDpcIndyYXBcIixzcGFuQ2xhc3M6bnVsbCxzcGFuSHRtbDpudWxsLHNwYW5XcmFwOlwid3JhcFwifSxhKSxpPXQoXCI8ZGl2IC8+XCIpLHI9dChcIjxzcGFuIC8+XCIpLG4uYXV0b0hpZGUmJmUuaXMoXCI6aGlkZGVuXCIpJiZcIm5vbmVcIj09PWUuY3NzKFwiZGlzcGxheVwiKSYmaS5oaWRlKCksYS5kaXZDbGFzcyYmaS5hZGRDbGFzcyhhLmRpdkNsYXNzKSxuLndyYXBwZXJDbGFzcyYmaS5hZGRDbGFzcyhuLndyYXBwZXJDbGFzcyksYS5zcGFuQ2xhc3MmJnIuYWRkQ2xhc3MoYS5zcGFuQ2xhc3MpLGw9cyhlLFwiaWRcIiksbi51c2VJRCYmbCYmcyhpLFwiaWRcIixuLmlkUHJlZml4K1wiLVwiK2wpLGEuc3Bhbkh0bWwmJnIuaHRtbChhLnNwYW5IdG1sKSxpPWMoZSxpLGEuZGl2V3JhcCkscj1jKGUscixhLnNwYW5XcmFwKSxvKGksZSxuKSx7ZGl2Omksc3BhbjpyfX1mdW5jdGlvbiBmKGUsbil7dmFyIHM7cmV0dXJuIG4ud3JhcHBlckNsYXNzPyhzPXQoXCI8c3BhbiAvPlwiKS5hZGRDbGFzcyhuLndyYXBwZXJDbGFzcykscz1jKGUscyxcIndyYXBcIikpOm51bGx9ZnVuY3Rpb24gcCgpe3ZhciBuLHMsYSxpO3JldHVybiBpPVwicmdiKDEyMCwyLDE1MylcIixzPXQoJzxkaXYgc3R5bGU9XCJ3aWR0aDowO2hlaWdodDowO2NvbG9yOicraSsnXCI+JyksdChcImJvZHlcIikuYXBwZW5kKHMpLGE9cy5nZXQoMCksbj1lLmdldENvbXB1dGVkU3R5bGU/ZS5nZXRDb21wdXRlZFN0eWxlKGEsXCJcIikuY29sb3I6KGEuY3VycmVudFN0eWxlfHxhLnN0eWxlfHx7fSkuY29sb3Iscy5yZW1vdmUoKSxuLnJlcGxhY2UoLyAvZyxcIlwiKSE9PWl9ZnVuY3Rpb24gbShlKXtyZXR1cm4gZT90KFwiPHNwYW4gLz5cIikudGV4dChlKS5odG1sKCk6XCJcIn1mdW5jdGlvbiB2KCl7cmV0dXJuIG5hdmlnYXRvci5jcHVDbGFzcyYmIW5hdmlnYXRvci5wcm9kdWN0fWZ1bmN0aW9uIGgoKXtyZXR1cm4gdm9pZCAwIT09ZS5YTUxIdHRwUmVxdWVzdH1mdW5jdGlvbiBDKGUpe3ZhciB0O3JldHVybiEhZVswXS5tdWx0aXBsZXx8KHQ9cyhlLFwic2l6ZVwiKSwhKCF0fHx0PD0xKSl9ZnVuY3Rpb24gYigpe3JldHVybiExfWZ1bmN0aW9uIHkoZSx0KXt2YXIgbj1cIm5vbmVcIjthKGUsdCx7XCJzZWxlY3RzdGFydCBkcmFnc3RhcnQgbW91c2Vkb3duXCI6Yn0pLGUuY3NzKHtNb3pVc2VyU2VsZWN0Om4sbXNVc2VyU2VsZWN0Om4sd2Via2l0VXNlclNlbGVjdDpuLHVzZXJTZWxlY3Q6bn0pfWZ1bmN0aW9uIHcoZSx0LG4pe3ZhciBzPWUudmFsKCk7XCJcIj09PXM/cz1uLmZpbGVEZWZhdWx0SHRtbDoocz1zLnNwbGl0KC9bXFwvXFxcXF0rLykscz1zW3MubGVuZ3RoLTFdKSx0LnRleHQocyl9ZnVuY3Rpb24gZyhlLHQsbil7dmFyIHMsYTtmb3Iocz1bXSxlLmVhY2goZnVuY3Rpb24oKXt2YXIgZTtmb3IoZSBpbiB0KU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGUpJiYocy5wdXNoKHtlbDp0aGlzLG5hbWU6ZSxvbGQ6dGhpcy5zdHlsZVtlXX0pLHRoaXMuc3R5bGVbZV09dFtlXSl9KSxuKCk7cy5sZW5ndGg7KWE9cy5wb3AoKSxhLmVsLnN0eWxlW2EubmFtZV09YS5vbGR9ZnVuY3Rpb24gayhlLHQpe3ZhciBuO249ZS5wYXJlbnRzKCksbi5wdXNoKGVbMF0pLG49bi5ub3QoXCI6dmlzaWJsZVwiKSxnKG4se3Zpc2liaWxpdHk6XCJoaWRkZW5cIixkaXNwbGF5OlwiYmxvY2tcIixwb3NpdGlvbjpcImFic29sdXRlXCJ9LHQpfWZ1bmN0aW9uIEgoZSx0KXtyZXR1cm4gZnVuY3Rpb24oKXtlLnVud3JhcCgpLnVud3JhcCgpLnVuYmluZCh0LmV2ZW50TmFtZXNwYWNlKX19dmFyIHg9ITAsQT0hMSxXPVt7bWF0Y2g6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuaXMoXCJhLCBidXR0b24sIDpzdWJtaXQsIDpyZXNldCwgaW5wdXRbdHlwZT0nYnV0dG9uJ11cIil9LGFwcGx5OmZ1bmN0aW9uKHQsbil7dmFyIGwsdSxjLGYscDtyZXR1cm4gdT1uLnN1Ym1pdERlZmF1bHRIdG1sLHQuaXMoXCI6cmVzZXRcIikmJih1PW4ucmVzZXREZWZhdWx0SHRtbCksZj10LmlzKFwiYSwgYnV0dG9uXCIpP2Z1bmN0aW9uKCl7cmV0dXJuIHQuaHRtbCgpfHx1fTpmdW5jdGlvbigpe3JldHVybiBtKHModCxcInZhbHVlXCIpKXx8dX0sYz1kKHQsbix7ZGl2Q2xhc3M6bi5idXR0b25DbGFzcyxzcGFuSHRtbDpmKCl9KSxsPWMuZGl2LGkodCxsLG4pLHA9ITEsYShsLG4se1wiY2xpY2sgdG91Y2hlbmRcIjpmdW5jdGlvbigpe3ZhciBuLGEsaSxyO3JldHVybiFwJiYoIXQuaXMoXCI6ZGlzYWJsZWRcIikmJihwPSEwLHRbMF0uZGlzcGF0Y2hFdmVudD8obj1kb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRzXCIpLG4uaW5pdEV2ZW50KFwiY2xpY2tcIiwhMCwhMCksYT10WzBdLmRpc3BhdGNoRXZlbnQobiksdC5pcyhcImFcIikmJmEmJihpPXModCxcInRhcmdldFwiKSxyPXModCxcImhyZWZcIiksaSYmXCJfc2VsZlwiIT09aT9lLm9wZW4ocixpKTpkb2N1bWVudC5sb2NhdGlvbi5ocmVmPXIpKTp0LmNsaWNrKCksdm9pZChwPSExKSkpfX0pLHkobCxuKSx7cmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIGwuYWZ0ZXIodCksbC5yZW1vdmUoKSx0LnVuYmluZChuLmV2ZW50TmFtZXNwYWNlKSx0fSx1cGRhdGU6ZnVuY3Rpb24oKXtyKGwsbiksbyhsLHQsbiksdC5kZXRhY2goKSxjLnNwYW4uaHRtbChmKCkpLmFwcGVuZCh0KX19fX0se21hdGNoOmZ1bmN0aW9uKGUpe3JldHVybiBlLmlzKFwiOmNoZWNrYm94XCIpfSxhcHBseTpmdW5jdGlvbihlLHQpe3ZhciBuLHMsbDtyZXR1cm4gbj1kKGUsdCx7ZGl2Q2xhc3M6dC5jaGVja2JveENsYXNzfSkscz1uLmRpdixsPW4uc3BhbixpKGUscyx0KSxhKGUsdCx7XCJjbGljayB0b3VjaGVuZFwiOmZ1bmN0aW9uKCl7dShsLGUsdCl9fSksdShsLGUsdCkse3JlbW92ZTpIKGUsdCksdXBkYXRlOmZ1bmN0aW9uKCl7cihzLHQpLGwucmVtb3ZlQ2xhc3ModC5jaGVja2VkQ2xhc3MpLHUobCxlLHQpLG8ocyxlLHQpfX19fSx7bWF0Y2g6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuaXMoXCI6ZmlsZVwiKX0sYXBwbHk6ZnVuY3Rpb24oZSxuKXtmdW5jdGlvbiBsKCl7dyhlLHAsbil9dmFyIHUsZixwLG0saD1cInVuZGVmaW5lZFwiIT10eXBlb2YgZS5hdHRyKFwibXVsdGlwbGVcIik7cmV0dXJuIHU9ZChlLG4se2RpdkNsYXNzOm4uZmlsZUNsYXNzLHNwYW5DbGFzczpuLmZpbGVCdXR0b25DbGFzcyxzcGFuSHRtbDpoP24uZmlsZXNCdXR0b25IdG1sOm4uZmlsZUJ1dHRvbkh0bWwsc3BhbldyYXA6XCJhZnRlclwifSksZj11LmRpdixtPXUuc3BhbixwPXQoXCI8c3BhbiAvPlwiKS5odG1sKG4uZmlsZURlZmF1bHRIdG1sKSxwLmFkZENsYXNzKG4uZmlsZW5hbWVDbGFzcykscD1jKGUscCxcImFmdGVyXCIpLHMoZSxcInNpemVcIil8fHMoZSxcInNpemVcIixmLndpZHRoKCkvMTApLGkoZSxmLG4pLGwoKSx2KCk/YShlLG4se2NsaWNrOmZ1bmN0aW9uKCl7ZS50cmlnZ2VyKFwiY2hhbmdlXCIpLHNldFRpbWVvdXQobCwwKX19KTphKGUsbix7Y2hhbmdlOmx9KSx5KHAsbikseShtLG4pLHtyZW1vdmU6ZnVuY3Rpb24oKXtyZXR1cm4gcC5yZW1vdmUoKSxtLnJlbW92ZSgpLGUudW53cmFwKCkudW5iaW5kKG4uZXZlbnROYW1lc3BhY2UpfSx1cGRhdGU6ZnVuY3Rpb24oKXtyKGYsbiksdyhlLHAsbiksbyhmLGUsbil9fX19LHttYXRjaDpmdW5jdGlvbihlKXtpZihlLmlzKFwiaW5wdXRcIikpe3ZhciB0PShcIiBcIitzKGUsXCJ0eXBlXCIpK1wiIFwiKS50b0xvd2VyQ2FzZSgpLG49XCIgY29sb3IgZGF0ZSBkYXRldGltZSBkYXRldGltZS1sb2NhbCBlbWFpbCBtb250aCBudW1iZXIgcGFzc3dvcmQgc2VhcmNoIHRlbCB0ZXh0IHRpbWUgdXJsIHdlZWsgXCI7cmV0dXJuIG4uaW5kZXhPZih0KT49MH1yZXR1cm4hMX0sYXBwbHk6ZnVuY3Rpb24oZSx0KXt2YXIgbixhO3JldHVybiBuPXMoZSxcInR5cGVcIiksZS5hZGRDbGFzcyh0LmlucHV0Q2xhc3MpLGE9ZihlLHQpLGkoZSxlLHQpLHQuaW5wdXRBZGRUeXBlQXNDbGFzcyYmZS5hZGRDbGFzcyhuKSx7cmVtb3ZlOmZ1bmN0aW9uKCl7ZS5yZW1vdmVDbGFzcyh0LmlucHV0Q2xhc3MpLHQuaW5wdXRBZGRUeXBlQXNDbGFzcyYmZS5yZW1vdmVDbGFzcyhuKSxhJiZlLnVud3JhcCgpfSx1cGRhdGU6Yn19fSx7bWF0Y2g6ZnVuY3Rpb24oZSl7cmV0dXJuIGUuaXMoXCI6cmFkaW9cIil9LGFwcGx5OmZ1bmN0aW9uKGUsbil7dmFyIGwsYyxmO3JldHVybiBsPWQoZSxuLHtkaXZDbGFzczpuLnJhZGlvQ2xhc3N9KSxjPWwuZGl2LGY9bC5zcGFuLGkoZSxjLG4pLGEoZSxuLHtcImNsaWNrIHRvdWNoZW5kXCI6ZnVuY3Rpb24oKXt2b2lkIDAhPT1lLmF0dHIoXCJuYW1lXCIpP3QudW5pZm9ybS51cGRhdGUodCgnOnJhZGlvW25hbWU9XCInK3MoZSxcIm5hbWVcIikrJ1wiXScpKTp0LnVuaWZvcm0udXBkYXRlKGUpfX0pLHUoZixlLG4pLHtyZW1vdmU6SChlLG4pLHVwZGF0ZTpmdW5jdGlvbigpe3IoYyxuKSx1KGYsZSxuKSxvKGMsZSxuKX19fX0se21hdGNoOmZ1bmN0aW9uKGUpe3JldHVybiEoIWUuaXMoXCJzZWxlY3RcIil8fEMoZSkpfSxhcHBseTpmdW5jdGlvbihlLG4pe3ZhciBzLGwsdSxjO3JldHVybiBuLnNlbGVjdEF1dG9XaWR0aCYmayhlLGZ1bmN0aW9uKCl7Yz1lLndpZHRoKCl9KSxzPWQoZSxuLHtkaXZDbGFzczpuLnNlbGVjdENsYXNzLHNwYW5IdG1sOihlLmZpbmQoXCI6c2VsZWN0ZWQ6Zmlyc3RcIil8fGUuZmluZChcIm9wdGlvbjpmaXJzdFwiKSkuaHRtbCgpLHNwYW5XcmFwOlwiYmVmb3JlXCJ9KSxsPXMuZGl2LHU9cy5zcGFuLG4uc2VsZWN0QXV0b1dpZHRoP2soZSxmdW5jdGlvbigpe2codChbdVswXSxsWzBdXSkse2Rpc3BsYXk6XCJibG9ja1wifSxmdW5jdGlvbigpe3ZhciBlO2U9dS5vdXRlcldpZHRoKCktdS53aWR0aCgpLGwud2lkdGgoYytlKSx1LndpZHRoKGMpfSl9KTpsLmFkZENsYXNzKFwiZml4ZWRXaWR0aFwiKSxpKGUsbCxuKSxhKGUsbix7Y2hhbmdlOmZ1bmN0aW9uKCl7dS5odG1sKGUuZmluZChcIjpzZWxlY3RlZFwiKS5odG1sKCkpLGwucmVtb3ZlQ2xhc3Mobi5hY3RpdmVDbGFzcyl9LFwiY2xpY2sgdG91Y2hlbmRcIjpmdW5jdGlvbigpe3ZhciB0PWUuZmluZChcIjpzZWxlY3RlZFwiKS5odG1sKCk7dS5odG1sKCkhPT10JiZlLnRyaWdnZXIoXCJjaGFuZ2VcIil9LGtleXVwOmZ1bmN0aW9uKCl7dS5odG1sKGUuZmluZChcIjpzZWxlY3RlZFwiKS5odG1sKCkpfX0pLHkodSxuKSx7cmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIHUucmVtb3ZlKCksZS51bndyYXAoKS51bmJpbmQobi5ldmVudE5hbWVzcGFjZSksZX0sdXBkYXRlOmZ1bmN0aW9uKCl7bi5zZWxlY3RBdXRvV2lkdGg/KHQudW5pZm9ybS5yZXN0b3JlKGUpLGUudW5pZm9ybShuKSk6KHIobCxuKSxlWzBdLnNlbGVjdGVkSW5kZXg9ZVswXS5zZWxlY3RlZEluZGV4LHUuaHRtbChlLmZpbmQoXCI6c2VsZWN0ZWRcIikuaHRtbCgpKSxvKGwsZSxuKSl9fX19LHttYXRjaDpmdW5jdGlvbihlKXtyZXR1cm4hKCFlLmlzKFwic2VsZWN0XCIpfHwhQyhlKSl9LGFwcGx5OmZ1bmN0aW9uKGUsdCl7dmFyIG47cmV0dXJuIGUuYWRkQ2xhc3ModC5zZWxlY3RNdWx0aUNsYXNzKSxuPWYoZSx0KSxpKGUsZSx0KSx7cmVtb3ZlOmZ1bmN0aW9uKCl7ZS5yZW1vdmVDbGFzcyh0LnNlbGVjdE11bHRpQ2xhc3MpLG4mJmUudW53cmFwKCl9LHVwZGF0ZTpifX19LHttYXRjaDpmdW5jdGlvbihlKXtyZXR1cm4gZS5pcyhcInRleHRhcmVhXCIpfSxhcHBseTpmdW5jdGlvbihlLHQpe3ZhciBuO3JldHVybiBlLmFkZENsYXNzKHQudGV4dGFyZWFDbGFzcyksbj1mKGUsdCksaShlLGUsdCkse3JlbW92ZTpmdW5jdGlvbigpe2UucmVtb3ZlQ2xhc3ModC50ZXh0YXJlYUNsYXNzKSxuJiZlLnVud3JhcCgpfSx1cGRhdGU6Yn19fV07digpJiYhaCgpJiYoeD0hMSksdC51bmlmb3JtPXtkZWZhdWx0czp7YWN0aXZlQ2xhc3M6XCJhY3RpdmVcIixhdXRvSGlkZTohMCxidXR0b25DbGFzczpcImJ1dHRvblwiLGNoZWNrYm94Q2xhc3M6XCJ1bmlmb3JtLWNoZWNrZXJcIixjaGVja2VkQ2xhc3M6XCJjaGVja2VkXCIsZGlzYWJsZWRDbGFzczpcImRpc2FibGVkXCIsZXZlbnROYW1lc3BhY2U6XCIudW5pZm9ybVwiLGZpbGVCdXR0b25DbGFzczpcImFjdGlvbiBidG4gYnRuLWxpZ2h0XCIsZmlsZUJ1dHRvbkh0bWw6XCJDaG9vc2UgRmlsZVwiLGZpbGVzQnV0dG9uSHRtbDpcIkNob29zZSBGaWxlc1wiLGZpbGVDbGFzczpcInVuaWZvcm0tdXBsb2FkZXJcIixmaWxlRGVmYXVsdEh0bWw6XCJObyBmaWxlIHNlbGVjdGVkXCIsZmlsZW5hbWVDbGFzczpcImZpbGVuYW1lXCIsZm9jdXNDbGFzczpcImZvY3VzXCIsaG92ZXJDbGFzczpcImhvdmVyXCIsaWRQcmVmaXg6XCJ1bmlmb3JtXCIsaW5wdXRBZGRUeXBlQXNDbGFzczohMCxpbnB1dENsYXNzOlwidW5pZm9ybS1pbnB1dFwiLHJhZGlvQ2xhc3M6XCJ1bmlmb3JtLWNob2ljZVwiLHJlc2V0RGVmYXVsdEh0bWw6XCJSZXNldFwiLHJlc2V0U2VsZWN0b3I6ITEsc2VsZWN0QXV0b1dpZHRoOiExLHNlbGVjdENsYXNzOlwidW5pZm9ybS1zZWxlY3RcIixzZWxlY3RNdWx0aUNsYXNzOlwidW5pZm9ybS1tdWx0aXNlbGVjdFwiLHN1Ym1pdERlZmF1bHRIdG1sOlwiU3VibWl0XCIsdGV4dGFyZWFDbGFzczpcInVuaWZvcm1cIix1c2VJRDohMCx3cmFwcGVyQ2xhc3M6bnVsbH0sZWxlbWVudHM6W119LHQuZm4udW5pZm9ybT1mdW5jdGlvbihuKXt2YXIgcz10aGlzO3JldHVybiBuPXQuZXh0ZW5kKHt9LHQudW5pZm9ybS5kZWZhdWx0cyxuKSxBfHwoQT0hMCxwKCkmJih4PSExKSkseD8obi5yZXNldFNlbGVjdG9yJiZ0KG4ucmVzZXRTZWxlY3RvcikubW91c2V1cChmdW5jdGlvbigpe2Uuc2V0VGltZW91dChmdW5jdGlvbigpe3QudW5pZm9ybS51cGRhdGUocyl9LDEwKX0pLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBlLHMsYSxpPXQodGhpcyk7aWYoaS5kYXRhKFwidW5pZm9ybWVkXCIpKXJldHVybiB2b2lkIHQudW5pZm9ybS51cGRhdGUoaSk7Zm9yKGU9MDtlPFcubGVuZ3RoO2UrPTEpaWYocz1XW2VdLHMubWF0Y2goaSxuKSlyZXR1cm4gYT1zLmFwcGx5KGksbiksaS5kYXRhKFwidW5pZm9ybWVkXCIsYSksdm9pZCB0LnVuaWZvcm0uZWxlbWVudHMucHVzaChpLmdldCgwKSl9KSk6dGhpc30sdC51bmlmb3JtLnJlc3RvcmU9dC5mbi51bmlmb3JtLnJlc3RvcmU9ZnVuY3Rpb24oZSl7ZT09PW4mJihlPXQudW5pZm9ybS5lbGVtZW50cyksdChlKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGUsbixzPXQodGhpcyk7bj1zLmRhdGEoXCJ1bmlmb3JtZWRcIiksbiYmKG4ucmVtb3ZlKCksZT10LmluQXJyYXkodGhpcyx0LnVuaWZvcm0uZWxlbWVudHMpLGU+PTAmJnQudW5pZm9ybS5lbGVtZW50cy5zcGxpY2UoZSwxKSxzLnJlbW92ZURhdGEoXCJ1bmlmb3JtZWRcIikpfSl9LHQudW5pZm9ybS51cGRhdGU9dC5mbi51bmlmb3JtLnVwZGF0ZT1mdW5jdGlvbihlKXtlPT09biYmKGU9dC51bmlmb3JtLmVsZW1lbnRzKSx0KGUpLmVhY2goZnVuY3Rpb24oKXt2YXIgZSxuPXQodGhpcyk7ZT1uLmRhdGEoXCJ1bmlmb3JtZWRcIiksZSYmZS51cGRhdGUobixlLm9wdGlvbnMpfSl9fSh0aGlzLGpRdWVyeSk7IiwiIWZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZShlKXtmdW5jdGlvbiB0KHQsbil7dmFyIHMsaCxrPXQ9PXdpbmRvdyx5PW4mJnZvaWQgMCE9PW4ubWVzc2FnZT9uLm1lc3NhZ2U6dm9pZCAwO2lmKG49ZS5leHRlbmQoe30sZS5ibG9ja1VJLmRlZmF1bHRzLG58fHt9KSwhbi5pZ25vcmVJZkJsb2NrZWR8fCFlKHQpLmRhdGEoXCJibG9ja1VJLmlzQmxvY2tlZFwiKSl7aWYobi5vdmVybGF5Q1NTPWUuZXh0ZW5kKHt9LGUuYmxvY2tVSS5kZWZhdWx0cy5vdmVybGF5Q1NTLG4ub3ZlcmxheUNTU3x8e30pLHM9ZS5leHRlbmQoe30sZS5ibG9ja1VJLmRlZmF1bHRzLmNzcyxuLmNzc3x8e30pLG4ub25PdmVybGF5Q2xpY2smJihuLm92ZXJsYXlDU1MuY3Vyc29yPVwicG9pbnRlclwiKSxoPWUuZXh0ZW5kKHt9LGUuYmxvY2tVSS5kZWZhdWx0cy50aGVtZWRDU1Msbi50aGVtZWRDU1N8fHt9KSx5PXZvaWQgMD09PXk/bi5tZXNzYWdlOnksayYmcCYmbyh3aW5kb3cse2ZhZGVPdXQ6MH0pLHkmJlwic3RyaW5nXCIhPXR5cGVvZiB5JiYoeS5wYXJlbnROb2RlfHx5LmpxdWVyeSkpe3ZhciBtPXkuanF1ZXJ5P3lbMF06eSx2PXt9O2UodCkuZGF0YShcImJsb2NrVUkuaGlzdG9yeVwiLHYpLHYuZWw9bSx2LnBhcmVudD1tLnBhcmVudE5vZGUsdi5kaXNwbGF5PW0uc3R5bGUuZGlzcGxheSx2LnBvc2l0aW9uPW0uc3R5bGUucG9zaXRpb24sdi5wYXJlbnQmJnYucGFyZW50LnJlbW92ZUNoaWxkKG0pfWUodCkuZGF0YShcImJsb2NrVUkub25VbmJsb2NrXCIsbi5vblVuYmxvY2spO3ZhciBnLEksdyxVLHg9bi5iYXNlWjtnPWUocnx8bi5mb3JjZUlmcmFtZT8nPGlmcmFtZSBjbGFzcz1cImJsb2NrVUlcIiBzdHlsZT1cInotaW5kZXg6Jyt4KysgKyc7ZGlzcGxheTpub25lO2JvcmRlcjpub25lO21hcmdpbjowO3BhZGRpbmc6MDtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3RvcDowO2xlZnQ6MFwiIHNyYz1cIicrbi5pZnJhbWVTcmMrJ1wiPjwvaWZyYW1lPic6JzxkaXYgY2xhc3M9XCJibG9ja1VJXCIgc3R5bGU9XCJkaXNwbGF5Om5vbmVcIj48L2Rpdj4nKSxJPWUobi50aGVtZT8nPGRpdiBjbGFzcz1cImJsb2NrVUkgYmxvY2tPdmVybGF5IHVpLXdpZGdldC1vdmVybGF5XCIgc3R5bGU9XCJ6LWluZGV4OicreCsrICsnO2Rpc3BsYXk6bm9uZVwiPjwvZGl2Pic6JzxkaXYgY2xhc3M9XCJibG9ja1VJIGJsb2NrT3ZlcmxheVwiIHN0eWxlPVwiei1pbmRleDonK3grKyArJztkaXNwbGF5Om5vbmU7Ym9yZGVyOm5vbmU7bWFyZ2luOjA7cGFkZGluZzowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7dG9wOjA7bGVmdDowXCI+PC9kaXY+Jyksbi50aGVtZSYmaz8oVT0nPGRpdiBjbGFzcz1cImJsb2NrVUkgJytuLmJsb2NrTXNnQ2xhc3MrJyBibG9ja1BhZ2UgdWktZGlhbG9nIHVpLXdpZGdldCB1aS1jb3JuZXItYWxsXCIgc3R5bGU9XCJ6LWluZGV4OicrKHgrMTApKyc7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmZpeGVkXCI+JyxuLnRpdGxlJiYoVSs9JzxkaXYgY2xhc3M9XCJ1aS13aWRnZXQtaGVhZGVyIHVpLWRpYWxvZy10aXRsZWJhciB1aS1jb3JuZXItYWxsIGJsb2NrVGl0bGVcIj4nKyhuLnRpdGxlfHxcIiZuYnNwO1wiKStcIjwvZGl2PlwiKSxVKz0nPGRpdiBjbGFzcz1cInVpLXdpZGdldC1jb250ZW50IHVpLWRpYWxvZy1jb250ZW50XCI+PC9kaXY+JyxVKz1cIjwvZGl2PlwiKTpuLnRoZW1lPyhVPSc8ZGl2IGNsYXNzPVwiYmxvY2tVSSAnK24uYmxvY2tNc2dDbGFzcysnIGJsb2NrRWxlbWVudCB1aS1kaWFsb2cgdWktd2lkZ2V0IHVpLWNvcm5lci1hbGxcIiBzdHlsZT1cInotaW5kZXg6JysoeCsxMCkrJztkaXNwbGF5Om5vbmU7cG9zaXRpb246YWJzb2x1dGVcIj4nLG4udGl0bGUmJihVKz0nPGRpdiBjbGFzcz1cInVpLXdpZGdldC1oZWFkZXIgdWktZGlhbG9nLXRpdGxlYmFyIHVpLWNvcm5lci1hbGwgYmxvY2tUaXRsZVwiPicrKG4udGl0bGV8fFwiJm5ic3A7XCIpK1wiPC9kaXY+XCIpLFUrPSc8ZGl2IGNsYXNzPVwidWktd2lkZ2V0LWNvbnRlbnQgdWktZGlhbG9nLWNvbnRlbnRcIj48L2Rpdj4nLFUrPVwiPC9kaXY+XCIpOlU9az8nPGRpdiBjbGFzcz1cImJsb2NrVUkgJytuLmJsb2NrTXNnQ2xhc3MrJyBibG9ja1BhZ2VcIiBzdHlsZT1cInotaW5kZXg6JysoeCsxMCkrJztkaXNwbGF5Om5vbmU7cG9zaXRpb246Zml4ZWRcIj48L2Rpdj4nOic8ZGl2IGNsYXNzPVwiYmxvY2tVSSAnK24uYmxvY2tNc2dDbGFzcysnIGJsb2NrRWxlbWVudFwiIHN0eWxlPVwiei1pbmRleDonKyh4KzEwKSsnO2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZVwiPjwvZGl2Picsdz1lKFUpLHkmJihuLnRoZW1lPyh3LmNzcyhoKSx3LmFkZENsYXNzKFwidWktd2lkZ2V0LWNvbnRlbnRcIikpOncuY3NzKHMpKSxuLnRoZW1lfHxJLmNzcyhuLm92ZXJsYXlDU1MpLEkuY3NzKFwicG9zaXRpb25cIixrP1wiZml4ZWRcIjpcImFic29sdXRlXCIpLChyfHxuLmZvcmNlSWZyYW1lKSYmZy5jc3MoXCJvcGFjaXR5XCIsMCk7dmFyIEM9W2csSSx3XSxTPWUoaz9cImJvZHlcIjp0KTtlLmVhY2goQyxmdW5jdGlvbigpe3RoaXMuYXBwZW5kVG8oUyl9KSxuLnRoZW1lJiZuLmRyYWdnYWJsZSYmZS5mbi5kcmFnZ2FibGUmJncuZHJhZ2dhYmxlKHtoYW5kbGU6XCIudWktZGlhbG9nLXRpdGxlYmFyXCIsY2FuY2VsOlwibGlcIn0pO3ZhciBPPWYmJighZS5zdXBwb3J0LmJveE1vZGVsfHxlKFwib2JqZWN0LGVtYmVkXCIsaz9udWxsOnQpLmxlbmd0aD4wKTtpZih1fHxPKXtpZihrJiZuLmFsbG93Qm9keVN0cmV0Y2gmJmUuc3VwcG9ydC5ib3hNb2RlbCYmZShcImh0bWwsYm9keVwiKS5jc3MoXCJoZWlnaHRcIixcIjEwMCVcIiksKHV8fCFlLnN1cHBvcnQuYm94TW9kZWwpJiYhayl2YXIgRT1kKHQsXCJib3JkZXJUb3BXaWR0aFwiKSxUPWQodCxcImJvcmRlckxlZnRXaWR0aFwiKSxNPUU/XCIoMCAtIFwiK0UrXCIpXCI6MCxCPVQ/XCIoMCAtIFwiK1QrXCIpXCI6MDtlLmVhY2goQyxmdW5jdGlvbihlLHQpe3ZhciBvPXRbMF0uc3R5bGU7aWYoby5wb3NpdGlvbj1cImFic29sdXRlXCIsMj5lKWs/by5zZXRFeHByZXNzaW9uKFwiaGVpZ2h0XCIsXCJNYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCwgZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQpIC0gKGpRdWVyeS5zdXBwb3J0LmJveE1vZGVsPzA6XCIrbi5xdWlya3Ntb2RlT2Zmc2V0SGFjaysnKSArIFwicHhcIicpOm8uc2V0RXhwcmVzc2lvbihcImhlaWdodFwiLCd0aGlzLnBhcmVudE5vZGUub2Zmc2V0SGVpZ2h0ICsgXCJweFwiJyksaz9vLnNldEV4cHJlc3Npb24oXCJ3aWR0aFwiLCdqUXVlcnkuc3VwcG9ydC5ib3hNb2RlbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggfHwgZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCArIFwicHhcIicpOm8uc2V0RXhwcmVzc2lvbihcIndpZHRoXCIsJ3RoaXMucGFyZW50Tm9kZS5vZmZzZXRXaWR0aCArIFwicHhcIicpLEImJm8uc2V0RXhwcmVzc2lvbihcImxlZnRcIixCKSxNJiZvLnNldEV4cHJlc3Npb24oXCJ0b3BcIixNKTtlbHNlIGlmKG4uY2VudGVyWSlrJiZvLnNldEV4cHJlc3Npb24oXCJ0b3BcIiwnKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgfHwgZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQpIC8gMiAtICh0aGlzLm9mZnNldEhlaWdodCAvIDIpICsgKGJsYWggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA6IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wKSArIFwicHhcIicpLG8ubWFyZ2luVG9wPTA7ZWxzZSBpZighbi5jZW50ZXJZJiZrKXt2YXIgaT1uLmNzcyYmbi5jc3MudG9wP3BhcnNlSW50KG4uY3NzLnRvcCwxMCk6MCxzPVwiKChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA6IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wKSArIFwiK2krJykgKyBcInB4XCInO28uc2V0RXhwcmVzc2lvbihcInRvcFwiLHMpfX0pfWlmKHkmJihuLnRoZW1lP3cuZmluZChcIi51aS13aWRnZXQtY29udGVudFwiKS5hcHBlbmQoeSk6dy5hcHBlbmQoeSksKHkuanF1ZXJ5fHx5Lm5vZGVUeXBlKSYmZSh5KS5zaG93KCkpLChyfHxuLmZvcmNlSWZyYW1lKSYmbi5zaG93T3ZlcmxheSYmZy5zaG93KCksbi5mYWRlSW4pe3ZhciBqPW4ub25CbG9jaz9uLm9uQmxvY2s6YyxIPW4uc2hvd092ZXJsYXkmJiF5P2o6Yyx6PXk/ajpjO24uc2hvd092ZXJsYXkmJkkuX2ZhZGVJbihuLmZhZGVJbixIKSx5JiZ3Ll9mYWRlSW4obi5mYWRlSW4seil9ZWxzZSBuLnNob3dPdmVybGF5JiZJLnNob3coKSx5JiZ3LnNob3coKSxuLm9uQmxvY2smJm4ub25CbG9jay5iaW5kKHcpKCk7aWYoaSgxLHQsbiksaz8ocD13WzBdLGI9ZShuLmZvY3VzYWJsZUVsZW1lbnRzLHApLG4uZm9jdXNJbnB1dCYmc2V0VGltZW91dChsLDIwKSk6YSh3WzBdLG4uY2VudGVyWCxuLmNlbnRlclkpLG4udGltZW91dCl7dmFyIFc9c2V0VGltZW91dChmdW5jdGlvbigpe2s/ZS51bmJsb2NrVUkobik6ZSh0KS51bmJsb2NrKG4pfSxuLnRpbWVvdXQpO2UodCkuZGF0YShcImJsb2NrVUkudGltZW91dFwiLFcpfX19ZnVuY3Rpb24gbyh0LG8pe3ZhciBzLGw9dD09d2luZG93LGE9ZSh0KSxkPWEuZGF0YShcImJsb2NrVUkuaGlzdG9yeVwiKSxjPWEuZGF0YShcImJsb2NrVUkudGltZW91dFwiKTtjJiYoY2xlYXJUaW1lb3V0KGMpLGEucmVtb3ZlRGF0YShcImJsb2NrVUkudGltZW91dFwiKSksbz1lLmV4dGVuZCh7fSxlLmJsb2NrVUkuZGVmYXVsdHMsb3x8e30pLGkoMCx0LG8pLG51bGw9PT1vLm9uVW5ibG9jayYmKG8ub25VbmJsb2NrPWEuZGF0YShcImJsb2NrVUkub25VbmJsb2NrXCIpLGEucmVtb3ZlRGF0YShcImJsb2NrVUkub25VbmJsb2NrXCIpKTt2YXIgcjtyPWw/ZShcImJvZHlcIikuY2hpbGRyZW4oKS5maWx0ZXIoXCIuYmxvY2tVSVwiKS5hZGQoXCJib2R5ID4gLmJsb2NrVUlcIik6YS5maW5kKFwiPi5ibG9ja1VJXCIpLG8uY3Vyc29yUmVzZXQmJihyLmxlbmd0aD4xJiYoclsxXS5zdHlsZS5jdXJzb3I9by5jdXJzb3JSZXNldCksci5sZW5ndGg+MiYmKHJbMl0uc3R5bGUuY3Vyc29yPW8uY3Vyc29yUmVzZXQpKSxsJiYocD1iPW51bGwpLG8uZmFkZU91dD8ocz1yLmxlbmd0aCxyLnN0b3AoKS5mYWRlT3V0KG8uZmFkZU91dCxmdW5jdGlvbigpezA9PT0tLXMmJm4ocixkLG8sdCl9KSk6bihyLGQsbyx0KX1mdW5jdGlvbiBuKHQsbyxuLGkpe3ZhciBzPWUoaSk7aWYoIXMuZGF0YShcImJsb2NrVUkuaXNCbG9ja2VkXCIpKXt0LmVhY2goZnVuY3Rpb24oZSx0KXt0aGlzLnBhcmVudE5vZGUmJnRoaXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzKX0pLG8mJm8uZWwmJihvLmVsLnN0eWxlLmRpc3BsYXk9by5kaXNwbGF5LG8uZWwuc3R5bGUucG9zaXRpb249by5wb3NpdGlvbixvLmVsLnN0eWxlLmN1cnNvcj1cImRlZmF1bHRcIixvLnBhcmVudCYmby5wYXJlbnQuYXBwZW5kQ2hpbGQoby5lbCkscy5yZW1vdmVEYXRhKFwiYmxvY2tVSS5oaXN0b3J5XCIpKSxzLmRhdGEoXCJibG9ja1VJLnN0YXRpY1wiKSYmcy5jc3MoXCJwb3NpdGlvblwiLFwic3RhdGljXCIpLFwiZnVuY3Rpb25cIj09dHlwZW9mIG4ub25VbmJsb2NrJiZuLm9uVW5ibG9jayhpLG4pO3ZhciBsPWUoZG9jdW1lbnQuYm9keSksYT1sLndpZHRoKCksZD1sWzBdLnN0eWxlLndpZHRoO2wud2lkdGgoYS0xKS53aWR0aChhKSxsWzBdLnN0eWxlLndpZHRoPWR9fWZ1bmN0aW9uIGkodCxvLG4pe3ZhciBpPW89PXdpbmRvdyxsPWUobyk7aWYoKHR8fCghaXx8cCkmJihpfHxsLmRhdGEoXCJibG9ja1VJLmlzQmxvY2tlZFwiKSkpJiYobC5kYXRhKFwiYmxvY2tVSS5pc0Jsb2NrZWRcIix0KSxpJiZuLmJpbmRFdmVudHMmJighdHx8bi5zaG93T3ZlcmxheSkpKXt2YXIgYT1cIm1vdXNlZG93biBtb3VzZXVwIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgdG91Y2hzdGFydCB0b3VjaGVuZCB0b3VjaG1vdmVcIjt0P2UoZG9jdW1lbnQpLmJpbmQoYSxuLHMpOmUoZG9jdW1lbnQpLnVuYmluZChhLHMpfX1mdW5jdGlvbiBzKHQpe2lmKFwia2V5ZG93blwiPT09dC50eXBlJiZ0LmtleUNvZGUmJjk9PXQua2V5Q29kZSYmcCYmdC5kYXRhLmNvbnN0cmFpblRhYktleSl7dmFyIG89YixuPSF0LnNoaWZ0S2V5JiZ0LnRhcmdldD09PW9bby5sZW5ndGgtMV0saT10LnNoaWZ0S2V5JiZ0LnRhcmdldD09PW9bMF07aWYobnx8aSlyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe2woaSl9LDEwKSwhMX12YXIgcz10LmRhdGEsYT1lKHQudGFyZ2V0KTtyZXR1cm4gYS5oYXNDbGFzcyhcImJsb2NrT3ZlcmxheVwiKSYmcy5vbk92ZXJsYXlDbGljayYmcy5vbk92ZXJsYXlDbGljayh0KSxhLnBhcmVudHMoXCJkaXYuXCIrcy5ibG9ja01zZ0NsYXNzKS5sZW5ndGg+MD8hMDowPT09YS5wYXJlbnRzKCkuY2hpbGRyZW4oKS5maWx0ZXIoXCJkaXYuYmxvY2tVSVwiKS5sZW5ndGh9ZnVuY3Rpb24gbChlKXtpZihiKXt2YXIgdD1iW2U9PT0hMD9iLmxlbmd0aC0xOjBdO3QmJnQuZm9jdXMoKX19ZnVuY3Rpb24gYShlLHQsbyl7dmFyIG49ZS5wYXJlbnROb2RlLGk9ZS5zdHlsZSxzPShuLm9mZnNldFdpZHRoLWUub2Zmc2V0V2lkdGgpLzItZChuLFwiYm9yZGVyTGVmdFdpZHRoXCIpLGw9KG4ub2Zmc2V0SGVpZ2h0LWUub2Zmc2V0SGVpZ2h0KS8yLWQobixcImJvcmRlclRvcFdpZHRoXCIpO3QmJihpLmxlZnQ9cz4wP3MrXCJweFwiOlwiMFwiKSxvJiYoaS50b3A9bD4wP2wrXCJweFwiOlwiMFwiKX1mdW5jdGlvbiBkKHQsbyl7cmV0dXJuIHBhcnNlSW50KGUuY3NzKHQsbyksMTApfHwwfWUuZm4uX2ZhZGVJbj1lLmZuLmZhZGVJbjt2YXIgYz1lLm5vb3B8fGZ1bmN0aW9uKCl7fSxyPS9NU0lFLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLHU9L01TSUUgNi4wLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpJiYhL01TSUUgOC4wLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLGY9KGRvY3VtZW50LmRvY3VtZW50TW9kZXx8MCxlLmlzRnVuY3Rpb24oZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZS5zZXRFeHByZXNzaW9uKSk7ZS5ibG9ja1VJPWZ1bmN0aW9uKGUpe3Qod2luZG93LGUpfSxlLnVuYmxvY2tVST1mdW5jdGlvbihlKXtvKHdpbmRvdyxlKX0sZS5ncm93bFVJPWZ1bmN0aW9uKHQsbyxuLGkpe3ZhciBzPWUoJzxkaXYgY2xhc3M9XCJncm93bFVJXCI+PC9kaXY+Jyk7dCYmcy5hcHBlbmQoXCI8aDE+XCIrdCtcIjwvaDE+XCIpLG8mJnMuYXBwZW5kKFwiPGgyPlwiK28rXCI8L2gyPlwiKSx2b2lkIDA9PT1uJiYobj0zZTMpO3ZhciBsPWZ1bmN0aW9uKHQpe3Q9dHx8e30sZS5ibG9ja1VJKHttZXNzYWdlOnMsZmFkZUluOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB0LmZhZGVJbj90LmZhZGVJbjo3MDAsZmFkZU91dDpcInVuZGVmaW5lZFwiIT10eXBlb2YgdC5mYWRlT3V0P3QuZmFkZU91dDoxZTMsdGltZW91dDpcInVuZGVmaW5lZFwiIT10eXBlb2YgdC50aW1lb3V0P3QudGltZW91dDpuLGNlbnRlclk6ITEsc2hvd092ZXJsYXk6ITEsb25VbmJsb2NrOmksY3NzOmUuYmxvY2tVSS5kZWZhdWx0cy5ncm93bENTU30pfTtsKCk7cy5jc3MoXCJvcGFjaXR5XCIpO3MubW91c2VvdmVyKGZ1bmN0aW9uKCl7bCh7ZmFkZUluOjAsdGltZW91dDozZTR9KTt2YXIgdD1lKFwiLmJsb2NrTXNnXCIpO3Quc3RvcCgpLHQuZmFkZVRvKDMwMCwxKX0pLm1vdXNlb3V0KGZ1bmN0aW9uKCl7ZShcIi5ibG9ja01zZ1wiKS5mYWRlT3V0KDFlMyl9KX0sZS5mbi5ibG9jaz1mdW5jdGlvbihvKXtpZih0aGlzWzBdPT09d2luZG93KXJldHVybiBlLmJsb2NrVUkobyksdGhpczt2YXIgbj1lLmV4dGVuZCh7fSxlLmJsb2NrVUkuZGVmYXVsdHMsb3x8e30pO3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1lKHRoaXMpO24uaWdub3JlSWZCbG9ja2VkJiZ0LmRhdGEoXCJibG9ja1VJLmlzQmxvY2tlZFwiKXx8dC51bmJsb2NrKHtmYWRlT3V0OjB9KX0pLHRoaXMuZWFjaChmdW5jdGlvbigpe1wic3RhdGljXCI9PWUuY3NzKHRoaXMsXCJwb3NpdGlvblwiKSYmKHRoaXMuc3R5bGUucG9zaXRpb249XCJyZWxhdGl2ZVwiLGUodGhpcykuZGF0YShcImJsb2NrVUkuc3RhdGljXCIsITApKSx0aGlzLnN0eWxlLnpvb209MSx0KHRoaXMsbyl9KX0sZS5mbi51bmJsb2NrPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzWzBdPT09d2luZG93PyhlLnVuYmxvY2tVSSh0KSx0aGlzKTp0aGlzLmVhY2goZnVuY3Rpb24oKXtvKHRoaXMsdCl9KX0sZS5ibG9ja1VJLnZlcnNpb249Mi43LGUuYmxvY2tVSS5kZWZhdWx0cz17bWVzc2FnZTpcIjxoMT5QbGVhc2Ugd2FpdC4uLjwvaDE+XCIsdGl0bGU6bnVsbCxkcmFnZ2FibGU6ITAsdGhlbWU6ITEsY3NzOntwYWRkaW5nOjAsbWFyZ2luOjAsd2lkdGg6XCIzMCVcIix0b3A6XCI0MCVcIixsZWZ0OlwiMzUlXCIsdGV4dEFsaWduOlwiY2VudGVyXCIsY29sb3I6XCIjMDAwXCIsYm9yZGVyOlwiM3B4IHNvbGlkICNhYWFcIixiYWNrZ3JvdW5kQ29sb3I6XCIjZmZmXCIsY3Vyc29yOlwid2FpdFwifSx0aGVtZWRDU1M6e3dpZHRoOlwiMzAlXCIsdG9wOlwiNDAlXCIsbGVmdDpcIjM1JVwifSxvdmVybGF5Q1NTOntiYWNrZ3JvdW5kQ29sb3I6XCIjMDAwXCIsb3BhY2l0eTouNixjdXJzb3I6XCJ3YWl0XCJ9LGN1cnNvclJlc2V0OlwiZGVmYXVsdFwiLGdyb3dsQ1NTOnt3aWR0aDpcIjM1MHB4XCIsdG9wOlwiMTBweFwiLGxlZnQ6XCJcIixyaWdodDpcIjEwcHhcIixib3JkZXI6XCJub25lXCIscGFkZGluZzpcIjVweFwiLG9wYWNpdHk6LjYsY3Vyc29yOlwiZGVmYXVsdFwiLGNvbG9yOlwiI2ZmZlwiLGJhY2tncm91bmRDb2xvcjpcIiMwMDBcIixcIi13ZWJraXQtYm9yZGVyLXJhZGl1c1wiOlwiMTBweFwiLFwiLW1vei1ib3JkZXItcmFkaXVzXCI6XCIxMHB4XCIsXCJib3JkZXItcmFkaXVzXCI6XCIxMHB4XCJ9LGlmcmFtZVNyYzovXmh0dHBzL2kudGVzdCh3aW5kb3cubG9jYXRpb24uaHJlZnx8XCJcIik/XCJqYXZhc2NyaXB0OmZhbHNlXCI6XCJhYm91dDpibGFua1wiLGZvcmNlSWZyYW1lOiExLGJhc2VaOjFlMyxjZW50ZXJYOiEwLGNlbnRlclk6ITAsYWxsb3dCb2R5U3RyZXRjaDohMCxiaW5kRXZlbnRzOiEwLGNvbnN0cmFpblRhYktleTohMCxmYWRlSW46MjAwLGZhZGVPdXQ6NDAwLHRpbWVvdXQ6MCxzaG93T3ZlcmxheTohMCxmb2N1c0lucHV0OiEwLGZvY3VzYWJsZUVsZW1lbnRzOlwiOmlucHV0OmVuYWJsZWQ6dmlzaWJsZVwiLG9uQmxvY2s6bnVsbCxvblVuYmxvY2s6bnVsbCxvbk92ZXJsYXlDbGljazpudWxsLHF1aXJrc21vZGVPZmZzZXRIYWNrOjQsYmxvY2tNc2dDbGFzczpcImJsb2NrTXNnXCIsaWdub3JlSWZCbG9ja2VkOiExfTt2YXIgcD1udWxsLGI9W119XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUuYW1kLmpRdWVyeT9kZWZpbmUoW1wianF1ZXJ5XCJdLGUpOmUoalF1ZXJ5KX0oKTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9