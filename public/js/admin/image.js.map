{"version":3,"sources":["admin/image.js"],"names":["global","factory","define","amd","exports","image","this","$","Dropzone","autoDiscover","myDropzone","paramName","maxFilesize","acceptedFiles","autoProcessQueue","dictDefaultMessage","dictFileTooBig","dictInvalidFileType","on","file","cropped","cachedFilename","name","removeFile","$cropperModal","modalTemplate","$uploadCrop","find","$cancelCrop","modal","backdrop","keyboard","e","console","log","length","not","remove","$img","reader","FileReader","onloadend","html","attr","result","cropper","preview","viewMode","aspectRatio","movable","cropBoxResizable","crop","event","$cropModal","parents","$cropBoxWidth","$cropBoxHeight","cbWidth","Math","round","detail","width","cbHeight","height","text","readAsDataURL","newFile","dataURI","byteString","atob","split","ab","ArrayBuffer","ia","Uint8Array","i","charCodeAt","Blob","type","dataURItoBlob","toDataURL","addFile","processQueue","reloadFragment","preventDefault","imageURL","window","opener","onSelectImage","$image","closest","confirm","ajax","url","dataType","data","done","status","Msg","success","jQuery"],"mappings":"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","file":"image.js","sourcesContent":["(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory();\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory();\n    global.image = mod.exports;\n  }\n})(this, function () {\n  \"use strict\";\n\n  (function ($) {\n    function dataURItoBlob(dataURI) {\n      var byteString = atob(dataURI.split(',')[1]);\n      var ab = new ArrayBuffer(byteString.length);\n      var ia = new Uint8Array(ab);\n\n      for (var i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n      }\n\n      return new Blob([ab], {\n        type: 'image/jpeg'\n      });\n    }\n\n    var modalTemplate = '';\n    modalTemplate += '<div class=\"modal\">';\n    modalTemplate += '  <div class=\"modal-dialog modal-lg\">';\n    modalTemplate += '      <div class=\"modal-content\">';\n    modalTemplate += '          <div class=\"modal-header\">';\n    modalTemplate += '              <button type=\"button\" class=\"close crop-cancel\" data-dismiss=\"modal\" aria-label=\"Close\">';\n    modalTemplate += '              <span aria-hidden=\"true\">&times;</span></button>';\n    modalTemplate += '              <h4 class=\"modal-title\">Crop Image</h4>';\n    modalTemplate += '          </div>';\n    modalTemplate += '          <div class=\"modal-body\">';\n    modalTemplate += '              <div class=\"image-container\"></div>';\n    modalTemplate += '          </div>';\n    modalTemplate += '          <div class=\"modal-footer\">';\n    modalTemplate += '              <div class=\"pull-left\">';\n    modalTemplate += '                  <span data-width></span> x <span data-height></span>';\n    modalTemplate += '              </div>';\n    modalTemplate += '              <button type=\"button\" class=\"btn btn-default crop-cancel\" data-dismiss=\"modal\">Close</button>';\n    modalTemplate += '              <button type=\"button\" class=\"btn btn-primary crop-upload\">Crop & Upload</button>';\n    modalTemplate += '          </div>';\n    modalTemplate += '      </div>';\n    modalTemplate += '  </div>';\n    modalTemplate += '</div>';\n    Dropzone.autoDiscover = false;\n    var myDropzone = new Dropzone('#image-upload-widget', {\n      paramName: 'file',\n      maxFilesize: 3,\n      acceptedFiles: 'image/*',\n      autoProcessQueue: false,\n      dictDefaultMessage: 'Drag &amp; drop or click to choose upload file',\n      dictFileTooBig: 'Your file has exceeded {{maxFilesize}}MB',\n      dictInvalidFileType: 'Your file is not image'\n    });\n    myDropzone.on('thumbnail', function (file) {\n      if (file.cropped) {\n        return;\n      }\n\n      var cachedFilename = file.name;\n      myDropzone.removeFile(file);\n      var $cropperModal = $(modalTemplate);\n      var $uploadCrop = $cropperModal.find('.crop-upload');\n      var $cancelCrop = $cropperModal.find('.crop-cancel');\n      $cropperModal.modal({\n        backdrop: 'static',\n        keyboard: false\n      });\n      $cropperModal.on('show.bs.modal', function (e) {\n        console.log('Fired');\n\n        if ($(\".modal-backdrop\").length > 1) {\n          $(\".modal-backdrop\").not(':first').remove();\n        }\n      }).modal('show');\n      var $img = $('<img class=\"img-responsive\" />');\n      var reader = new FileReader();\n\n      reader.onloadend = function () {\n        $cropperModal.find('.image-container').html($img);\n        $img.attr('src', reader.result);\n        $img.cropper({\n          preview: '.image-preview',\n          viewMode: 3,\n          aspectRatio: 2,\n          movable: false,\n          cropBoxResizable: true,\n          crop: function crop(event) {\n            var $cropModal = $(this).parents('.modal');\n            var $cropBoxWidth = $cropModal.find('span[data-width]');\n            var $cropBoxHeight = $cropModal.find('span[data-height]');\n            var cbWidth = Math.round(event.detail.width);\n            var cbHeight = Math.round(event.detail.height);\n            $cropBoxWidth.attr('data-width', cbWidth).text('Width: ' + cbWidth);\n            $cropBoxHeight.attr('data-width', cbHeight).text('Height: ' + cbHeight);\n          }\n        });\n      };\n\n      reader.readAsDataURL(file);\n      $uploadCrop.on('click', function () {\n        var blob = $img.cropper('getCroppedCanvas').toDataURL();\n        var newFile = dataURItoBlob(blob);\n        newFile.cropped = true;\n        newFile.name = cachedFilename;\n        myDropzone.addFile(newFile);\n        myDropzone.processQueue();\n        $cropperModal.modal('hide');\n        $cropperModal.remove();\n      });\n      $cancelCrop.on('click', function () {\n        $cropperModal.modal('hide');\n        $cropperModal.remove();\n      });\n    });\n    myDropzone.on('success', function (file) {\n      this.removeFile(file);\n      $('#images-wrapper').reloadFragment();\n    }); // trigger select image\n\n    $('#images-wrapper').on('click', '.btn-select-image', function (e) {\n      e.preventDefault();\n      var btn = $(this);\n      var imageURL = btn.attr('href');\n\n      if (window.opener) {\n        window.opener.onSelectImage(imageURL);\n      }\n    }); // trigger delete image\n\n    $('#images-wrapper').on('click', '.btn-delete-image', function (e) {\n      e.preventDefault();\n      var $image = $(this).closest('.image');\n\n      if (confirm('Are you sure you want to delete this image?')) {\n        $.ajax({\n          url: '/image/delete',\n          type: 'post',\n          dataType: 'json',\n          data: {\n            file: $image.attr('title')\n          }\n        }).done(function (data) {\n          if (data && data.status) {\n            Msg.success('Deleted!');\n            $('#images-wrapper').reloadFragment();\n          }\n        });\n      }\n    });\n  })(jQuery);\n});"]}